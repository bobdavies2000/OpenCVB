<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>CPP_Class - new C++</Title>
        </Header>
        <Snippet>
            <Code Language="VB">
                <![CDATA[

'//#include <cstdlib>
'//#include <cstdio>
'//#include <iostream>
'//#include <algorithm>
'//#include <opencv2/core.hpp>
'//#include <opencv2/imgproc.hpp>
'//#include <opencv2/highgui.hpp>

'//using namespace std;
'//using namespace cv;
'//class Anyname
'//{
'//private:
'//public:
'//    Mat src, dst;
'//    Anyname(){}
'//    void RunCPP() {
'//        dst = src.clone();
'//    }
'//};

'//extern "C" __declspec(dllexport)
'//Anyname *Anyname_Open() {
'//    Anyname *cPtr = new Anyname();
'//    return cPtr;
'//}

'//extern "C" __declspec(dllexport)
'//void Anyname_Close(Anyname *cPtr)
'//{
'//    delete cPtr;
'//}

'//extern "C" __declspec(dllexport)
'//int *Anyname_RunCPP(Anyname *cPtr, int *dataPtr, int rows, int cols, int channels)
'//{
'//		cPtr->src = Mat(rows, cols, (channels == 3) ? CV_8UC3 : CV_8UC1, dataPtr);
'//		cPtr->RunCPP();
'//		return (int *) cPtr->dst.data; 
'//}

Public Class Anyname_CPP : Inherits VB_Algorithm
    Public Sub New()
        cPtr = Anyname_Open()
	    labels = {"", "", "Grayscale image of src", "dst3Label"}
        UpdateAdvice(traceName + ": <place advice here on any options that are useful>")
        desc = "description"
	  End Sub
    Public Sub RunAlg(src as cvb.Mat)
        If src.Channels <> 1 Then src = src.CvtColor(cvb.ColorConversionCodes.BGR2GRAY)

        Dim cppData(src.Total * src.ElemSize - 1) As Byte
        Marshal.Copy(src.Data, cppData, 0, cppData.Length - 1)
        Dim handleSrc = GCHandle.Alloc(cppData, GCHandleType.Pinned)
        Dim imagePtr = Anyname_RunCPP(cPtr, handleSrc.AddrOfPinnedObject(), src.Rows, src.Cols, src.Channels)
        handleSrc.Free()

        dst2 = New cvb.Mat(src.Rows, src.Cols, If(src.Channels = 3, cvb.MatType.CV_8UC3, cvb.MatType.CV_8UC1), imagePtr).clone
    End Sub
    Public Sub Close() 
        Anyname_Close(cPtr)
    End Sub
End Class

Module Anyname_CPP_Module
    <DllImport(("CPP_Managed.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_Open() As IntPtr
    End Function
    <DllImport(("CPP_Managed.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Sub Anyname_Close(cPtr As IntPtr)
    End Sub
    <DllImport(("CPP_Managed.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_RunCPP(cPtr As IntPtr, dataPtr As IntPtr, rows As Integer, cols As Integer, channels As Integer) As IntPtr
    End Function
End Module
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>