// this file is automatically generated in a pre-build step.  Any manual modifications will be lost.
using VB_Classes;
using CS_Classes;
namespace CS_Classes
{
	public class CSAlgorithmList
	{
		public CS_Parent createCSAlgorithm( string algorithmName, VB_Classes.VBtask task)
		{
			if (algorithmName == "CS_AddWeighted_Basics") return new CS_AddWeighted_Basics(task);
			if (algorithmName == "CS_AddWeighted_Edges") return new CS_AddWeighted_Edges(task);
			if (algorithmName == "CS_AddWeighted_ImageAccumulate") return new CS_AddWeighted_ImageAccumulate(task);
			if (algorithmName == "CS_AddWeighted_InfraRed") return new CS_AddWeighted_InfraRed(task);
			if (algorithmName == "CS_AlphaChannel_Basics") return new CS_AlphaChannel_Basics(task);
			if (algorithmName == "CS_Annealing_Basics_CPP") return new CS_Annealing_Basics_CPP(task);
			if (algorithmName == "CS_Annealing_MultiThreaded_CPP") return new CS_Annealing_MultiThreaded_CPP(task);
			if (algorithmName == "CS_ApproxPoly_Basics") return new CS_ApproxPoly_Basics(task);
			if (algorithmName == "CS_ApproxPoly_FindandDraw") return new CS_ApproxPoly_FindandDraw(task);
			if (algorithmName == "CS_ApproxPoly_Hull") return new CS_ApproxPoly_Hull(task);
			if (algorithmName == "CS_Area_FindNonZero") return new CS_Area_FindNonZero(task);
			if (algorithmName == "CS_Area_MinMotionRect") return new CS_Area_MinMotionRect(task);
			if (algorithmName == "CS_Area_MinRect") return new CS_Area_MinRect(task);
			if (algorithmName == "CS_Area_MinTriangle_CPP") return new CS_Area_MinTriangle_CPP(task);
			if (algorithmName == "CS_Area_SoloPoints") return new CS_Area_SoloPoints(task);
			if (algorithmName == "CS_AsciiArt_Basics") return new CS_AsciiArt_Basics(task);
			if (algorithmName == "CS_AsciiArt_Color") return new CS_AsciiArt_Color(task);
			if (algorithmName == "CS_AsciiArt_Diff") return new CS_AsciiArt_Diff(task);
			if (algorithmName == "CS_BackProject_Basics") return new CS_BackProject_Basics(task);
			if (algorithmName == "CS_BackProject_BasicsKeyboard") return new CS_BackProject_BasicsKeyboard(task);
			if (algorithmName == "CS_BackProject_Depth") return new CS_BackProject_Depth(task);
			if (algorithmName == "CS_BackProject_Display") return new CS_BackProject_Display(task);
			if (algorithmName == "CS_BackProject_FeatureLess") return new CS_BackProject_FeatureLess(task);
			if (algorithmName == "CS_BackProject_Full") return new CS_BackProject_Full(task);
			if (algorithmName == "CS_BackProject_FullEqualized") return new CS_BackProject_FullEqualized(task);
			if (algorithmName == "CS_BackProject_FullLines") return new CS_BackProject_FullLines(task);
			if (algorithmName == "CS_BackProject_Horizontal") return new CS_BackProject_Horizontal(task);
			if (algorithmName == "CS_BackProject_Hue") return new CS_BackProject_Hue(task);
			if (algorithmName == "CS_BackProject_Image") return new CS_BackProject_Image(task);
			if (algorithmName == "CS_BackProject_LineSide") return new CS_BackProject_LineSide(task);
			if (algorithmName == "CS_BackProject_LineTop") return new CS_BackProject_LineTop(task);
			if (algorithmName == "CS_BackProject_MaskLines") return new CS_BackProject_MaskLines(task);
			if (algorithmName == "CS_BackProject_Masks") return new CS_BackProject_Masks(task);
			if (algorithmName == "CS_BackProject_MeterByMeter") return new CS_BackProject_MeterByMeter(task);
			if (algorithmName == "CS_BackProject_Mouse") return new CS_BackProject_Mouse(task);
			if (algorithmName == "CS_BackProject_PointCloud") return new CS_BackProject_PointCloud(task);
			if (algorithmName == "CS_BackProject_Reduction") return new CS_BackProject_Reduction(task);
			if (algorithmName == "CS_BackProject_Side") return new CS_BackProject_Side(task);
			if (algorithmName == "CS_BackProject_SoloSide") return new CS_BackProject_SoloSide(task);
			if (algorithmName == "CS_BackProject_SoloTop") return new CS_BackProject_SoloTop(task);
			if (algorithmName == "CS_BackProject_Top") return new CS_BackProject_Top(task);
			if (algorithmName == "CS_BackProject_Unstable") return new CS_BackProject_Unstable(task);
			if (algorithmName == "CS_BackProject_Vertical") return new CS_BackProject_Vertical(task);
			if (algorithmName == "CS_BackProject2D_Basics") return new CS_BackProject2D_Basics(task);
			if (algorithmName == "CS_BackProject2D_Compare") return new CS_BackProject2D_Compare(task);
			if (algorithmName == "CS_BackProject2D_Filter") return new CS_BackProject2D_Filter(task);
			if (algorithmName == "CS_BackProject2D_FilterBoth") return new CS_BackProject2D_FilterBoth(task);
			if (algorithmName == "CS_BackProject2D_FilterSide") return new CS_BackProject2D_FilterSide(task);
			if (algorithmName == "CS_BackProject2D_FilterTop") return new CS_BackProject2D_FilterTop(task);
			if (algorithmName == "CS_BackProject2D_Full") return new CS_BackProject2D_Full(task);
			if (algorithmName == "CS_BackProject2D_Side") return new CS_BackProject2D_Side(task);
			if (algorithmName == "CS_BackProject2D_Top") return new CS_BackProject2D_Top(task);
			if (algorithmName == "CS_Benford_Basics") return new CS_Benford_Basics(task);
			if (algorithmName == "CS_Benford_Depth") return new CS_Benford_Depth(task);
			if (algorithmName == "CS_Benford_JPEG") return new CS_Benford_JPEG(task);
			if (algorithmName == "CS_Benford_JPEG99") return new CS_Benford_JPEG99(task);
			if (algorithmName == "CS_Benford_NormalizedImage") return new CS_Benford_NormalizedImage(task);
			if (algorithmName == "CS_Benford_NormalizedImage99") return new CS_Benford_NormalizedImage99(task);
			if (algorithmName == "CS_Benford_PNG") return new CS_Benford_PNG(task);
			if (algorithmName == "CS_Benford_Primes") return new CS_Benford_Primes(task);
			if (algorithmName == "CS_Bezier_Basics") return new CS_Bezier_Basics(task);
			if (algorithmName == "CS_Bezier_Example") return new CS_Bezier_Example(task);
			if (algorithmName == "CS_BGRPattern_Basics") return new CS_BGRPattern_Basics(task);
			if (algorithmName == "CS_BGSubtract_Basics") return new CS_BGSubtract_Basics(task);
			if (algorithmName == "CS_BGSubtract_Basics_QT") return new CS_BGSubtract_Basics_QT(task);
			if (algorithmName == "CS_BGSubtract_DepthOrColorMotion") return new CS_BGSubtract_DepthOrColorMotion(task);
			if (algorithmName == "CS_BGSubtract_GMG_KNN") return new CS_BGSubtract_GMG_KNN(task);
			if (algorithmName == "CS_BGSubtract_MOG") return new CS_BGSubtract_MOG(task);
			if (algorithmName == "CS_BGSubtract_MOG_Retina") return new CS_BGSubtract_MOG_Retina(task);
			if (algorithmName == "CS_BGSubtract_MOG_RGBDepth") return new CS_BGSubtract_MOG_RGBDepth(task);
			if (algorithmName == "CS_BGSubtract_MOG2") return new CS_BGSubtract_MOG2(task);
			if (algorithmName == "CS_BGSubtract_MOG2_QT") return new CS_BGSubtract_MOG2_QT(task);
			if (algorithmName == "CS_BGSubtract_MotionDetect") return new CS_BGSubtract_MotionDetect(task);
			if (algorithmName == "CS_BGSubtract_Reduction") return new CS_BGSubtract_Reduction(task);
			if (algorithmName == "CS_BGSubtract_Synthetic") return new CS_BGSubtract_Synthetic(task);
			if (algorithmName == "CS_BGSubtract_Synthetic_CPP") return new CS_BGSubtract_Synthetic_CPP(task);
			if (algorithmName == "CS_BGSubtract_Video") return new CS_BGSubtract_Video(task);
			if (algorithmName == "CS_Bin2Way_Basics") return new CS_Bin2Way_Basics(task);
			if (algorithmName == "CS_Bin2Way_KMeans") return new CS_Bin2Way_KMeans(task);
			if (algorithmName == "CS_Bin2Way_RecurseOnce") return new CS_Bin2Way_RecurseOnce(task);
			if (algorithmName == "CS_Bin2Way_RedCloud") return new CS_Bin2Way_RedCloud(task);
			if (algorithmName == "CS_Bin2Way_RedCloudDarkest") return new CS_Bin2Way_RedCloudDarkest(task);
			if (algorithmName == "CS_Bin2Way_RedCloudLightest") return new CS_Bin2Way_RedCloudLightest(task);
			if (algorithmName == "CS_Bin3Way_Basics") return new CS_Bin3Way_Basics(task);
			if (algorithmName == "CS_Bin3Way_Color") return new CS_Bin3Way_Color(task);
			if (algorithmName == "CS_Bin3Way_KMeans") return new CS_Bin3Way_KMeans(task);
			if (algorithmName == "CS_Bin3Way_RedCloud") return new CS_Bin3Way_RedCloud(task);
			if (algorithmName == "CS_Bin3Way_RedCloud1") return new CS_Bin3Way_RedCloud1(task);
			if (algorithmName == "CS_Bin3Way_RedCloudDarkest") return new CS_Bin3Way_RedCloudDarkest(task);
			if (algorithmName == "CS_Bin3Way_RedCloudLightest") return new CS_Bin3Way_RedCloudLightest(task);
			if (algorithmName == "CS_Bin3Way_RedCloudOther") return new CS_Bin3Way_RedCloudOther(task);
			if (algorithmName == "CS_Bin4Way_Basics") return new CS_Bin4Way_Basics(task);
			if (algorithmName == "CS_Bin4Way_Canny") return new CS_Bin4Way_Canny(task);
			if (algorithmName == "CS_Bin4Way_RedCloud") return new CS_Bin4Way_RedCloud(task);
			if (algorithmName == "CS_Bin4Way_Regions") return new CS_Bin4Way_Regions(task);
			if (algorithmName == "CS_Bin4Way_Regions1") return new CS_Bin4Way_Regions1(task);
			if (algorithmName == "CS_Bin4Way_RegionsLeftRight") return new CS_Bin4Way_RegionsLeftRight(task);
			if (algorithmName == "CS_Bin4Way_Sobel") return new CS_Bin4Way_Sobel(task);
			if (algorithmName == "CS_Bin4Way_SplitGaps") return new CS_Bin4Way_SplitGaps(task);
			if (algorithmName == "CS_Bin4Way_SplitMean") return new CS_Bin4Way_SplitMean(task);
			if (algorithmName == "CS_Bin4Way_SplitValley") return new CS_Bin4Way_SplitValley(task);
			if (algorithmName == "CS_Bin4Way_Unstable1") return new CS_Bin4Way_Unstable1(task);
			if (algorithmName == "CS_Bin4Way_UnstableEdges") return new CS_Bin4Way_UnstableEdges(task);
			if (algorithmName == "CS_Bin4Way_UnstablePixels") return new CS_Bin4Way_UnstablePixels(task);
			if (algorithmName == "CS_Bin4Way_UnstablePixels1") return new CS_Bin4Way_UnstablePixels1(task);
			if (algorithmName == "CS_Binarize_Basics") return new CS_Binarize_Basics(task);
			if (algorithmName == "CS_Binarize_DepthTiers") return new CS_Binarize_DepthTiers(task);
			if (algorithmName == "CS_Binarize_FourPixelFlips") return new CS_Binarize_FourPixelFlips(task);
			if (algorithmName == "CS_Binarize_KMeansMasks") return new CS_Binarize_KMeansMasks(task);
			if (algorithmName == "CS_Binarize_KMeansRGB") return new CS_Binarize_KMeansRGB(task);
			if (algorithmName == "CS_Binarize_Niblack_Sauvola") return new CS_Binarize_Niblack_Sauvola(task);
			if (algorithmName == "CS_Binarize_OTSU") return new CS_Binarize_OTSU(task);
			if (algorithmName == "CS_Binarize_Simple") return new CS_Binarize_Simple(task);
			if (algorithmName == "CS_Binarize_Wolf_Nick") return new CS_Binarize_Wolf_Nick(task);
			if (algorithmName == "CS_BitmapToMat") return new CS_BitmapToMat(task);
			if (algorithmName == "CS_Blob_Basics") return new CS_Blob_Basics(task);
			if (algorithmName == "CS_Blob_Input") return new CS_Blob_Input(task);
			if (algorithmName == "CS_Blob_RenderBlobs") return new CS_Blob_RenderBlobs(task);
			if (algorithmName == "CS_BlockMatching_Basics") return new CS_BlockMatching_Basics(task);
			if (algorithmName == "CS_Blur_Basics") return new CS_Blur_Basics(task);
			if (algorithmName == "CS_Blur_Bilateral") return new CS_Blur_Bilateral(task);
			if (algorithmName == "CS_Blur_Depth") return new CS_Blur_Depth(task);
			if (algorithmName == "CS_Blur_Detection") return new CS_Blur_Detection(task);
			if (algorithmName == "CS_Blur_Gaussian") return new CS_Blur_Gaussian(task);
			if (algorithmName == "CS_Blur_Homogeneous") return new CS_Blur_Homogeneous(task);
			if (algorithmName == "CS_Blur_Median") return new CS_Blur_Median(task);
			if (algorithmName == "CS_Blur_PlusHistogram") return new CS_Blur_PlusHistogram(task);
			if (algorithmName == "CS_Blur_TopoMap") return new CS_Blur_TopoMap(task);
			if (algorithmName == "CS_BlurMotion_Basics") return new CS_BlurMotion_Basics(task);
			if (algorithmName == "CS_BlurMotion_Deblur") return new CS_BlurMotion_Deblur(task);
			if (algorithmName == "CS_Boundary_Basics") return new CS_Boundary_Basics(task);
			if (algorithmName == "CS_Boundary_Overlap") return new CS_Boundary_Overlap(task);
			if (algorithmName == "CS_Boundary_Rectangles") return new CS_Boundary_Rectangles(task);
			if (algorithmName == "CS_Boundary_RemovedRects") return new CS_Boundary_RemovedRects(task);
			if (algorithmName == "CS_Boundary_Tiers") return new CS_Boundary_Tiers(task);
			if (algorithmName == "CS_Brightness_Basics") return new CS_Brightness_Basics(task);
			if (algorithmName == "CS_Brightness_HSV") return new CS_Brightness_HSV(task);
			if (algorithmName == "CS_BRISK_Basics") return new CS_BRISK_Basics(task);
			if (algorithmName == "CS_CameraMotion_Basics") return new CS_CameraMotion_Basics(task);
			if (algorithmName == "CS_CameraMotion_SceneMotion") return new CS_CameraMotion_SceneMotion(task);
			if (algorithmName == "CS_CameraMotion_WithRotation") return new CS_CameraMotion_WithRotation(task);
			if (algorithmName == "CS_CamShift_Basics") return new CS_CamShift_Basics(task);
			if (algorithmName == "CS_CamShift_RedHue") return new CS_CamShift_RedHue(task);
			if (algorithmName == "CS_Cartoonify_Basics") return new CS_Cartoonify_Basics(task);
			if (algorithmName == "CS_CComp_Basics") return new CS_CComp_Basics(task);
			if (algorithmName == "CS_CComp_Both") return new CS_CComp_Both(task);
			if (algorithmName == "CS_CComp_Hulls") return new CS_CComp_Hulls(task);
			if (algorithmName == "CS_CComp_Shapes") return new CS_CComp_Shapes(task);
			if (algorithmName == "CS_CComp_Stats") return new CS_CComp_Stats(task);
			if (algorithmName == "CS_Cell_Basics") return new CS_Cell_Basics(task);
			if (algorithmName == "CS_Cell_BasicsPlot") return new CS_Cell_BasicsPlot(task);
			if (algorithmName == "CS_Cell_Binarize") return new CS_Cell_Binarize(task);
			if (algorithmName == "CS_Cell_Distance") return new CS_Cell_Distance(task);
			if (algorithmName == "CS_Cell_Floodfill") return new CS_Cell_Floodfill(task);
			if (algorithmName == "CS_Cell_Generate") return new CS_Cell_Generate(task);
			if (algorithmName == "CS_Cell_PixelCountCompare") return new CS_Cell_PixelCountCompare(task);
			if (algorithmName == "CS_Cell_Stable") return new CS_Cell_Stable(task);
			if (algorithmName == "CS_Cell_ValidateColorCells") return new CS_Cell_ValidateColorCells(task);
			if (algorithmName == "CS_CellularAutomata_All256") return new CS_CellularAutomata_All256(task);
			if (algorithmName == "CS_CellularAutomata_Basics") return new CS_CellularAutomata_Basics(task);
			if (algorithmName == "CS_CellularAutomata_Life") return new CS_CellularAutomata_Life(task);
			if (algorithmName == "CS_CellularAutomata_LifeColor") return new CS_CellularAutomata_LifeColor(task);
			if (algorithmName == "CS_CellularAutomata_LifePopulation") return new CS_CellularAutomata_LifePopulation(task);
			if (algorithmName == "CS_CellularAutomata_MultiPoint") return new CS_CellularAutomata_MultiPoint(task);
			if (algorithmName == "CS_Classifier_Basics") return new CS_Classifier_Basics(task);
			if (algorithmName == "CS_Classifier_Bayesian") return new CS_Classifier_Bayesian(task);
			if (algorithmName == "CS_Classifier_BayesianTest") return new CS_Classifier_BayesianTest(task);
			if (algorithmName == "CS_Clone_Basics") return new CS_Clone_Basics(task);
			if (algorithmName == "CS_Clone_ColorChange") return new CS_Clone_ColorChange(task);
			if (algorithmName == "CS_Clone_Eagle") return new CS_Clone_Eagle(task);
			if (algorithmName == "CS_Clone_IlluminationChange") return new CS_Clone_IlluminationChange(task);
			if (algorithmName == "CS_Clone_Seamless") return new CS_Clone_Seamless(task);
			if (algorithmName == "CS_Clone_TextureFlattening") return new CS_Clone_TextureFlattening(task);
			if (algorithmName == "CS_Cluster_Basics") return new CS_Cluster_Basics(task);
			if (algorithmName == "CS_Cluster_Hulls") return new CS_Cluster_Hulls(task);
			if (algorithmName == "CS_Coherence_Basics") return new CS_Coherence_Basics(task);
			if (algorithmName == "CS_Coherence_Depth") return new CS_Coherence_Depth(task);
			if (algorithmName == "CS_Color_Basics") return new CS_Color_Basics(task);
			if (algorithmName == "CS_Color8U_Basics") return new CS_Color8U_Basics(task);
			if (algorithmName == "CS_Color8U_BlackAndWhite") return new CS_Color8U_BlackAndWhite(task);
			if (algorithmName == "CS_Color8U_Common") return new CS_Color8U_Common(task);
			if (algorithmName == "CS_Color8U_Complementary") return new CS_Color8U_Complementary(task);
			if (algorithmName == "CS_Color8U_ComplementaryTest") return new CS_Color8U_ComplementaryTest(task);
			if (algorithmName == "CS_Color8U_Denoise") return new CS_Color8U_Denoise(task);
			if (algorithmName == "CS_Color8U_Depth") return new CS_Color8U_Depth(task);
			if (algorithmName == "CS_Color8U_Grayscale") return new CS_Color8U_Grayscale(task);
			if (algorithmName == "CS_Color8U_Hue") return new CS_Color8U_Hue(task);
			if (algorithmName == "CS_Color8U_InRange") return new CS_Color8U_InRange(task);
			if (algorithmName == "CS_Color8U_KMeans") return new CS_Color8U_KMeans(task);
			if (algorithmName == "CS_Color8U_MotionFiltered") return new CS_Color8U_MotionFiltered(task);
			if (algorithmName == "CS_Color8U_RedHue") return new CS_Color8U_RedHue(task);
			if (algorithmName == "CS_Color8U_Smoothing") return new CS_Color8U_Smoothing(task);
			if (algorithmName == "CS_Color8U_TopX") return new CS_Color8U_TopX(task);
			if (algorithmName == "CS_Complexity_Basics") return new CS_Complexity_Basics(task);
			if (algorithmName == "CS_Complexity_Dots") return new CS_Complexity_Dots(task);
			if (algorithmName == "CS_Complexity_PlotOpenCV") return new CS_Complexity_PlotOpenCV(task);
			if (algorithmName == "CS_Concat_4way") return new CS_Concat_4way(task);
			if (algorithmName == "CS_Concat_Basics") return new CS_Concat_Basics(task);
			if (algorithmName == "CS_Contour_Basics") return new CS_Contour_Basics(task);
			if (algorithmName == "CS_Contour_Compare") return new CS_Contour_Compare(task);
			if (algorithmName == "CS_Contour_DepthTiers") return new CS_Contour_DepthTiers(task);
			if (algorithmName == "CS_Contour_Edges") return new CS_Contour_Edges(task);
			if (algorithmName == "CS_Contour_Foreground") return new CS_Contour_Foreground(task);
			if (algorithmName == "CS_Contour_FromPoints") return new CS_Contour_FromPoints(task);
			if (algorithmName == "CS_Contour_General") return new CS_Contour_General(task);
			if (algorithmName == "CS_Contour_GeneralWithOptions") return new CS_Contour_GeneralWithOptions(task);
			if (algorithmName == "CS_Contour_Gray") return new CS_Contour_Gray(task);
			if (algorithmName == "CS_Contour_Largest") return new CS_Contour_Largest(task);
			if (algorithmName == "CS_Contour_Outline") return new CS_Contour_Outline(task);
			if (algorithmName == "CS_Contour_RedCloudCorners") return new CS_Contour_RedCloudCorners(task);
			if (algorithmName == "CS_Contour_RotatedRects") return new CS_Contour_RotatedRects(task);
			if (algorithmName == "CS_Contour_SelfIntersect") return new CS_Contour_SelfIntersect(task);
			if (algorithmName == "CS_Contour_SidePoints") return new CS_Contour_SidePoints(task);
			if (algorithmName == "CS_Contour_Sorted") return new CS_Contour_Sorted(task);
			if (algorithmName == "CS_Contour_WholeImage") return new CS_Contour_WholeImage(task);
			if (algorithmName == "CS_Contrast_Basics") return new CS_Contrast_Basics(task);
			if (algorithmName == "CS_Contrast_POW") return new CS_Contrast_POW(task);
			if (algorithmName == "CS_Convex_Basics") return new CS_Convex_Basics(task);
			if (algorithmName == "CS_Convex_Defects") return new CS_Convex_Defects(task);
			if (algorithmName == "CS_Convex_RedCloud") return new CS_Convex_RedCloud(task);
			if (algorithmName == "CS_Convex_RedCloudDefects") return new CS_Convex_RedCloudDefects(task);
			if (algorithmName == "CS_Corners_Basics") return new CS_Corners_Basics(task);
			if (algorithmName == "CS_Corners_BasicsCentroid") return new CS_Corners_BasicsCentroid(task);
			if (algorithmName == "CS_Corners_BasicsCentroids") return new CS_Corners_BasicsCentroids(task);
			if (algorithmName == "CS_Corners_BasicsStablePoints") return new CS_Corners_BasicsStablePoints(task);
			if (algorithmName == "CS_Corners_Harris") return new CS_Corners_Harris(task);
			if (algorithmName == "CS_Corners_Harris_CPP") return new CS_Corners_Harris_CPP(task);
			if (algorithmName == "CS_Corners_HarrisDetector") return new CS_Corners_HarrisDetector(task);
			if (algorithmName == "CS_Corners_PreCornerDetect") return new CS_Corners_PreCornerDetect(task);
			if (algorithmName == "CS_Corners_RedCloud") return new CS_Corners_RedCloud(task);
			if (algorithmName == "CS_Corners_ShiTomasi_CPP") return new CS_Corners_ShiTomasi_CPP(task);
			if (algorithmName == "CS_Corners_SubPix") return new CS_Corners_SubPix(task);
			if (algorithmName == "CS_Correlation_Basics") return new CS_Correlation_Basics(task);
			if (algorithmName == "CS_Covariance_Basics") return new CS_Covariance_Basics(task);
			if (algorithmName == "CS_Covariance_Images") return new CS_Covariance_Images(task);
			if (algorithmName == "CS_Covariance_Test") return new CS_Covariance_Test(task);
			if (algorithmName == "CS_Crypto_Hash") return new CS_Crypto_Hash(task);
			if (algorithmName == "CS_CSV_Basics") return new CS_CSV_Basics(task);
			if (algorithmName == "CS_DCT_Basics") return new CS_DCT_Basics(task);
			if (algorithmName == "CS_DCT_Depth") return new CS_DCT_Depth(task);
			if (algorithmName == "CS_DCT_FeatureLess") return new CS_DCT_FeatureLess(task);
			if (algorithmName == "CS_DCT_RGB") return new CS_DCT_RGB(task);
			if (algorithmName == "CS_DCT_Surfaces_debug") return new CS_DCT_Surfaces_debug(task);
			if (algorithmName == "CS_Delaunay_Basics") return new CS_Delaunay_Basics(task);
			if (algorithmName == "CS_Delaunay_ConsistentColor") return new CS_Delaunay_ConsistentColor(task);
			if (algorithmName == "CS_Delaunay_Contours") return new CS_Delaunay_Contours(task);
			if (algorithmName == "CS_Delaunay_Generations") return new CS_Delaunay_Generations(task);
			if (algorithmName == "CS_Delaunay_GenerationsNoKNN") return new CS_Delaunay_GenerationsNoKNN(task);
			if (algorithmName == "CS_Delaunay_SubDiv") return new CS_Delaunay_SubDiv(task);
			if (algorithmName == "CS_Delaunay_Subdiv2D") return new CS_Delaunay_Subdiv2D(task);
			if (algorithmName == "CS_Denoise_Basics_CPP") return new CS_Denoise_Basics_CPP(task);
			if (algorithmName == "CS_Denoise_Pixels") return new CS_Denoise_Pixels(task);
			if (algorithmName == "CS_Depth_Averaging") return new CS_Depth_Averaging(task);
			if (algorithmName == "CS_Depth_Basics") return new CS_Depth_Basics(task);
			if (algorithmName == "CS_Depth_BGSubtract") return new CS_Depth_BGSubtract(task);
			if (algorithmName == "CS_Depth_Colorizer_CPP") return new CS_Depth_Colorizer_CPP(task);
			if (algorithmName == "CS_Depth_Contour") return new CS_Depth_Contour(task);
			if (algorithmName == "CS_Depth_Dilate") return new CS_Depth_Dilate(task);
			if (algorithmName == "CS_Depth_Display") return new CS_Depth_Display(task);
			if (algorithmName == "CS_Depth_FirstLastDistance") return new CS_Depth_FirstLastDistance(task);
			if (algorithmName == "CS_Depth_Flatland") return new CS_Depth_Flatland(task);
			if (algorithmName == "CS_Depth_Foreground") return new CS_Depth_Foreground(task);
			if (algorithmName == "CS_Depth_ForegroundBlob") return new CS_Depth_ForegroundBlob(task);
			if (algorithmName == "CS_Depth_ForegroundHead") return new CS_Depth_ForegroundHead(task);
			if (algorithmName == "CS_Depth_ForegroundOverTime") return new CS_Depth_ForegroundOverTime(task);
			if (algorithmName == "CS_Depth_Grid") return new CS_Depth_Grid(task);
			if (algorithmName == "CS_Depth_Holes") return new CS_Depth_Holes(task);
			if (algorithmName == "CS_Depth_HolesOverTime") return new CS_Depth_HolesOverTime(task);
			if (algorithmName == "CS_Depth_HolesRect") return new CS_Depth_HolesRect(task);
			if (algorithmName == "CS_Depth_InRange") return new CS_Depth_InRange(task);
			if (algorithmName == "CS_Depth_LocalMinMax_MT") return new CS_Depth_LocalMinMax_MT(task);
			if (algorithmName == "CS_Depth_MaxMask") return new CS_Depth_MaxMask(task);
			if (algorithmName == "CS_Depth_MeanStdev_MT") return new CS_Depth_MeanStdev_MT(task);
			if (algorithmName == "CS_Depth_MeanStdevPlot") return new CS_Depth_MeanStdevPlot(task);
			if (algorithmName == "CS_Depth_Median") return new CS_Depth_Median(task);
			if (algorithmName == "CS_Depth_MinMaxNone") return new CS_Depth_MinMaxNone(task);
			if (algorithmName == "CS_Depth_Outline") return new CS_Depth_Outline(task);
			if (algorithmName == "CS_Depth_Palette") return new CS_Depth_Palette(task);
			if (algorithmName == "CS_Depth_PunchBlob") return new CS_Depth_PunchBlob(task);
			if (algorithmName == "CS_Depth_PunchBlobNew") return new CS_Depth_PunchBlobNew(task);
			if (algorithmName == "CS_Depth_PunchDecreasing") return new CS_Depth_PunchDecreasing(task);
			if (algorithmName == "CS_Depth_PunchIncreasing") return new CS_Depth_PunchIncreasing(task);
			if (algorithmName == "CS_Depth_Regions") return new CS_Depth_Regions(task);
			if (algorithmName == "CS_Depth_RGBShadow") return new CS_Depth_RGBShadow(task);
			if (algorithmName == "CS_Depth_Smoothing") return new CS_Depth_Smoothing(task);
			if (algorithmName == "CS_Depth_SmoothingMat") return new CS_Depth_SmoothingMat(task);
			if (algorithmName == "CS_Depth_StableAverage") return new CS_Depth_StableAverage(task);
			if (algorithmName == "CS_Depth_StableMax") return new CS_Depth_StableMax(task);
			if (algorithmName == "CS_Depth_StableMin") return new CS_Depth_StableMin(task);
			if (algorithmName == "CS_Depth_StableMinMax") return new CS_Depth_StableMinMax(task);
			if (algorithmName == "CS_Depth_TierCount") return new CS_Depth_TierCount(task);
			if (algorithmName == "CS_Depth_TiersZ") return new CS_Depth_TiersZ(task);
			if (algorithmName == "CS_Depth_Uncertainty") return new CS_Depth_Uncertainty(task);
			if (algorithmName == "CS_Depth_World") return new CS_Depth_World(task);
			if (algorithmName == "CS_Depth_WorldXYMT") return new CS_Depth_WorldXYMT(task);
			if (algorithmName == "CS_Depth_WorldXYZ") return new CS_Depth_WorldXYZ(task);
			if (algorithmName == "CS_Derivative_Basics") return new CS_Derivative_Basics(task);
			if (algorithmName == "CS_Derivative_Classes") return new CS_Derivative_Classes(task);
			if (algorithmName == "CS_Derivative_Laplacian") return new CS_Derivative_Laplacian(task);
			if (algorithmName == "CS_Derivative_Sobel") return new CS_Derivative_Sobel(task);
			if (algorithmName == "CS_DFT_Basics") return new CS_DFT_Basics(task);
			if (algorithmName == "CS_DFT_ButterworthDepth") return new CS_DFT_ButterworthDepth(task);
			if (algorithmName == "CS_DFT_Inverse") return new CS_DFT_Inverse(task);
			if (algorithmName == "CS_DFT_Shapes") return new CS_DFT_Shapes(task);
			if (algorithmName == "CS_Diff_Basics") return new CS_Diff_Basics(task);
			if (algorithmName == "CS_Diff_Color") return new CS_Diff_Color(task);
			if (algorithmName == "CS_Diff_Depth32f") return new CS_Diff_Depth32f(task);
			if (algorithmName == "CS_Diff_Depth32S") return new CS_Diff_Depth32S(task);
			if (algorithmName == "CS_Diff_DepthAccum") return new CS_Diff_DepthAccum(task);
			if (algorithmName == "CS_Diff_Heartbeat") return new CS_Diff_Heartbeat(task);
			if (algorithmName == "CS_Diff_Lines") return new CS_Diff_Lines(task);
			if (algorithmName == "CS_Diff_RGBAccum") return new CS_Diff_RGBAccum(task);
			if (algorithmName == "CS_Diff_UnstableDepthAndColor") return new CS_Diff_UnstableDepthAndColor(task);
			if (algorithmName == "CS_Dilate_Basics") return new CS_Dilate_Basics(task);
			if (algorithmName == "CS_Dilate_Erode") return new CS_Dilate_Erode(task);
			if (algorithmName == "CS_Dilate_OpenClose") return new CS_Dilate_OpenClose(task);
			if (algorithmName == "CS_DisparityFunction_Basics") return new CS_DisparityFunction_Basics(task);
			if (algorithmName == "CS_Distance_Background") return new CS_Distance_Background(task);
			if (algorithmName == "CS_Distance_Basics") return new CS_Distance_Basics(task);
			if (algorithmName == "CS_Distance_BinaryImage") return new CS_Distance_BinaryImage(task);
			if (algorithmName == "CS_Distance_Foreground") return new CS_Distance_Foreground(task);
			if (algorithmName == "CS_Distance_Labels") return new CS_Distance_Labels(task);
			if (algorithmName == "CS_Distance_Point3D") return new CS_Distance_Point3D(task);
			if (algorithmName == "CS_Distance_Point4D") return new CS_Distance_Point4D(task);
			if (algorithmName == "CS_Distance_RedCloud") return new CS_Distance_RedCloud(task);
			if (algorithmName == "CS_Dither_Basics") return new CS_Dither_Basics(task);
			if (algorithmName == "CS_DNN_Basics") return new CS_DNN_Basics(task);
			if (algorithmName == "CS_DNN_Caffe") return new CS_DNN_Caffe(task);
			if (algorithmName == "CS_DNN_SuperRes") return new CS_DNN_SuperRes(task);
			if (algorithmName == "CS_DNN_Test") return new CS_DNN_Test(task);
			if (algorithmName == "CS_Draw_Arc") return new CS_Draw_Arc(task);
			if (algorithmName == "CS_Draw_Circles") return new CS_Draw_Circles(task);
			if (algorithmName == "CS_Draw_ClipLine") return new CS_Draw_ClipLine(task);
			if (algorithmName == "CS_Draw_Ellipses") return new CS_Draw_Ellipses(task);
			if (algorithmName == "CS_Draw_Frustrum") return new CS_Draw_Frustrum(task);
			if (algorithmName == "CS_Draw_Line") return new CS_Draw_Line(task);
			if (algorithmName == "CS_Draw_Lines") return new CS_Draw_Lines(task);
			if (algorithmName == "CS_Draw_LineTest") return new CS_Draw_LineTest(task);
			if (algorithmName == "CS_Draw_Noise") return new CS_Draw_Noise(task);
			if (algorithmName == "CS_Draw_Polygon") return new CS_Draw_Polygon(task);
			if (algorithmName == "CS_Draw_Shapes") return new CS_Draw_Shapes(task);
			if (algorithmName == "CS_Draw_SymmetricalShapes") return new CS_Draw_SymmetricalShapes(task);
			if (algorithmName == "CS_Duster_Basics") return new CS_Duster_Basics(task);
			if (algorithmName == "CS_Duster_BasicsY") return new CS_Duster_BasicsY(task);
			if (algorithmName == "CS_Duster_MaskZ") return new CS_Duster_MaskZ(task);
			if (algorithmName == "CS_Duster_RedCloud") return new CS_Duster_RedCloud(task);
			if (algorithmName == "CS_Edge_All") return new CS_Edge_All(task);
			if (algorithmName == "CS_Edge_DCTfrequency") return new CS_Edge_DCTfrequency(task);
			if (algorithmName == "CS_Edge_DCTinput") return new CS_Edge_DCTinput(task);
			if (algorithmName == "CS_Edge_DepthAndColor") return new CS_Edge_DepthAndColor(task);
			if (algorithmName == "CS_Edge_Deriche_CPP") return new CS_Edge_Deriche_CPP(task);
			if (algorithmName == "CS_Edge_Motion") return new CS_Edge_Motion(task);
			if (algorithmName == "CS_Edge_NoDepth") return new CS_Edge_NoDepth(task);
			if (algorithmName == "CS_Edge_Preserving") return new CS_Edge_Preserving(task);
			if (algorithmName == "CS_Edge_RandomForest_CPP") return new CS_Edge_RandomForest_CPP(task);
			if (algorithmName == "CS_Edge_Scharr") return new CS_Edge_Scharr(task);
			if (algorithmName == "CS_Edge_Sobel") return new CS_Edge_Sobel(task);
			if (algorithmName == "CS_EdgeDraw_Basics") return new CS_EdgeDraw_Basics(task);
			if (algorithmName == "CS_EdgeDraw_Segments") return new CS_EdgeDraw_Segments(task);
			if (algorithmName == "CS_Eigen_Basics") return new CS_Eigen_Basics(task);
			if (algorithmName == "CS_Eigen_Fitline") return new CS_Eigen_Fitline(task);
			if (algorithmName == "CS_Eigen_FitLineInput") return new CS_Eigen_FitLineInput(task);
			if (algorithmName == "CS_EMax_Basics") return new CS_EMax_Basics(task);
			if (algorithmName == "CS_EMax_Centers") return new CS_EMax_Centers(task);
			if (algorithmName == "CS_EMax_InputClusters") return new CS_EMax_InputClusters(task);
			if (algorithmName == "CS_EMax_PointTracker") return new CS_EMax_PointTracker(task);
			if (algorithmName == "CS_EMax_RandomClusters") return new CS_EMax_RandomClusters(task);
			if (algorithmName == "CS_EMax_VB_Failing") return new CS_EMax_VB_Failing(task);
			if (algorithmName == "CS_Encode_Basics") return new CS_Encode_Basics(task);
			if (algorithmName == "CS_Encode_Scaling") return new CS_Encode_Scaling(task);
			if (algorithmName == "CS_Entropy_Basics") return new CS_Entropy_Basics(task);
			if (algorithmName == "CS_Entropy_BinaryImage") return new CS_Entropy_BinaryImage(task);
			if (algorithmName == "CS_Entropy_FAST") return new CS_Entropy_FAST(task);
			if (algorithmName == "CS_Entropy_Highest") return new CS_Entropy_Highest(task);
			if (algorithmName == "CS_Entropy_Rectangle") return new CS_Entropy_Rectangle(task);
			if (algorithmName == "CS_Entropy_SubDivisions") return new CS_Entropy_SubDivisions(task);
			if (algorithmName == "CS_Erode_Basics") return new CS_Erode_Basics(task);
			if (algorithmName == "CS_Erode_CloudXY") return new CS_Erode_CloudXY(task);
			if (algorithmName == "CS_Erode_DepthSeed") return new CS_Erode_DepthSeed(task);
			if (algorithmName == "CS_Erode_Dilate") return new CS_Erode_Dilate(task);
			if (algorithmName == "CS_Etch_ASketch") return new CS_Etch_ASketch(task);
			if (algorithmName == "CS_Extrinsics_Basics") return new CS_Extrinsics_Basics(task);
			if (algorithmName == "CS_Extrinsics_Display") return new CS_Extrinsics_Display(task);
			if (algorithmName == "CS_Face_Haar_Alt") return new CS_Face_Haar_Alt(task);
			if (algorithmName == "CS_Face_Haar_LBP") return new CS_Face_Haar_LBP(task);
			if (algorithmName == "CS_Feature_AKaze") return new CS_Feature_AKaze(task);
			if (algorithmName == "CS_Feature_Basics") return new CS_Feature_Basics(task);
			if (algorithmName == "CS_Feature_BasicsNoFrills") return new CS_Feature_BasicsNoFrills(task);
			if (algorithmName == "CS_Feature_Compare") return new CS_Feature_Compare(task);
			if (algorithmName == "CS_Feature_Delaunay") return new CS_Feature_Delaunay(task);
			if (algorithmName == "CS_Feature_Gather") return new CS_Feature_Gather(task);
			if (algorithmName == "CS_Feature_Generations") return new CS_Feature_Generations(task);
			if (algorithmName == "CS_Feature_GridPopulation") return new CS_Feature_GridPopulation(task);
			if (algorithmName == "CS_Feature_History") return new CS_Feature_History(task);
			if (algorithmName == "CS_Feature_Kaze") return new CS_Feature_Kaze(task);
			if (algorithmName == "CS_Feature_KNN") return new CS_Feature_KNN(task);
			if (algorithmName == "CS_Feature_LeftRight") return new CS_Feature_LeftRight(task);
			if (algorithmName == "CS_Feature_LucasKanade") return new CS_Feature_LucasKanade(task);
			if (algorithmName == "CS_Feature_MultiPass") return new CS_Feature_MultiPass(task);
			if (algorithmName == "CS_Feature_NearestCell") return new CS_Feature_NearestCell(task);
			if (algorithmName == "CS_Feature_Points") return new CS_Feature_Points(task);
			if (algorithmName == "CS_Feature_PointTracker") return new CS_Feature_PointTracker(task);
			if (algorithmName == "CS_Feature_Reduction") return new CS_Feature_Reduction(task);
			if (algorithmName == "CS_Feature_Sample") return new CS_Feature_Sample(task);
			if (algorithmName == "CS_Feature_ShiTomasi") return new CS_Feature_ShiTomasi(task);
			if (algorithmName == "CS_Feature_Sift") return new CS_Feature_Sift(task);
			if (algorithmName == "CS_Feature_SiftSlices") return new CS_Feature_SiftSlices(task);
			if (algorithmName == "CS_Feature_SURF") return new CS_Feature_SURF(task);
			if (algorithmName == "CS_Feature_SURF_Draw") return new CS_Feature_SURF_Draw(task);
			if (algorithmName == "CS_Feature_SURFMatch") return new CS_Feature_SURFMatch(task);
			if (algorithmName == "CS_Feature_Trace") return new CS_Feature_Trace(task);
			if (algorithmName == "CS_Feature_TraceDelaunay") return new CS_Feature_TraceDelaunay(task);
			if (algorithmName == "CS_FeatureFlow_Basics") return new CS_FeatureFlow_Basics(task);
			if (algorithmName == "CS_FeatureFlow_Dense") return new CS_FeatureFlow_Dense(task);
			if (algorithmName == "CS_FeatureFlow_LeftRight") return new CS_FeatureFlow_LeftRight(task);
			if (algorithmName == "CS_FeatureFlow_LeftRight1") return new CS_FeatureFlow_LeftRight1(task);
			if (algorithmName == "CS_FeatureFlow_LeftRightHist") return new CS_FeatureFlow_LeftRightHist(task);
			if (algorithmName == "CS_FeatureFlow_LucasKanade") return new CS_FeatureFlow_LucasKanade(task);
			if (algorithmName == "CS_FeatureLeftRight_Basics") return new CS_FeatureLeftRight_Basics(task);
			if (algorithmName == "CS_FeatureLeftRight_Grid") return new CS_FeatureLeftRight_Grid(task);
			if (algorithmName == "CS_FeatureLeftRight_Input") return new CS_FeatureLeftRight_Input(task);
			if (algorithmName == "CS_FeatureLeftRight_LeftRightPrep") return new CS_FeatureLeftRight_LeftRightPrep(task);
			if (algorithmName == "CS_FeatureLess_Basics") return new CS_FeatureLess_Basics(task);
			if (algorithmName == "CS_FeatureLess_Canny") return new CS_FeatureLess_Canny(task);
			if (algorithmName == "CS_FeatureLess_DCT") return new CS_FeatureLess_DCT(task);
			if (algorithmName == "CS_FeatureLess_Groups") return new CS_FeatureLess_Groups(task);
			if (algorithmName == "CS_FeatureLess_Histogram") return new CS_FeatureLess_Histogram(task);
			if (algorithmName == "CS_FeatureLess_History") return new CS_FeatureLess_History(task);
			if (algorithmName == "CS_FeatureLess_LeftRight") return new CS_FeatureLess_LeftRight(task);
			if (algorithmName == "CS_FeatureLess_RedCloud") return new CS_FeatureLess_RedCloud(task);
			if (algorithmName == "CS_FeatureLess_Sobel") return new CS_FeatureLess_Sobel(task);
			if (algorithmName == "CS_FeatureLess_Unique3Pixels") return new CS_FeatureLess_Unique3Pixels(task);
			if (algorithmName == "CS_FeatureLess_UniquePixels") return new CS_FeatureLess_UniquePixels(task);
			if (algorithmName == "CS_FeatureLine_Basics") return new CS_FeatureLine_Basics(task);
			if (algorithmName == "CS_FeatureLine_DetailsAll") return new CS_FeatureLine_DetailsAll(task);
			if (algorithmName == "CS_FeatureLine_Finder") return new CS_FeatureLine_Finder(task);
			if (algorithmName == "CS_FeatureLine_Longest") return new CS_FeatureLine_Longest(task);
			if (algorithmName == "CS_FeatureLine_LongestKNN") return new CS_FeatureLine_LongestKNN(task);
			if (algorithmName == "CS_FeatureLine_LongestV_Tutorial1") return new CS_FeatureLine_LongestV_Tutorial1(task);
			if (algorithmName == "CS_FeatureLine_LongestV_Tutorial2") return new CS_FeatureLine_LongestV_Tutorial2(task);
			if (algorithmName == "CS_FeatureLine_LongestVerticalKNN") return new CS_FeatureLine_LongestVerticalKNN(task);
			if (algorithmName == "CS_FeatureLine_Tutorial1") return new CS_FeatureLine_Tutorial1(task);
			if (algorithmName == "CS_FeatureLine_Tutorial2") return new CS_FeatureLine_Tutorial2(task);
			if (algorithmName == "CS_FeatureLine_VerticalLongLine") return new CS_FeatureLine_VerticalLongLine(task);
			if (algorithmName == "CS_FeatureLine_VerticalVerify") return new CS_FeatureLine_VerticalVerify(task);
			if (algorithmName == "CS_FeatureLine_VH") return new CS_FeatureLine_VH(task);
			if (algorithmName == "CS_FeaturePoly_Basics") return new CS_FeaturePoly_Basics(task);
			if (algorithmName == "CS_FeaturePoly_BasicsOriginal") return new CS_FeaturePoly_BasicsOriginal(task);
			if (algorithmName == "CS_FeaturePoly_Center") return new CS_FeaturePoly_Center(task);
			if (algorithmName == "CS_FeaturePoly_Core") return new CS_FeaturePoly_Core(task);
			if (algorithmName == "CS_FeaturePoly_EdgeRemoval") return new CS_FeaturePoly_EdgeRemoval(task);
			if (algorithmName == "CS_FeaturePoly_Image") return new CS_FeaturePoly_Image(task);
			if (algorithmName == "CS_FeaturePoly_ImageMask") return new CS_FeaturePoly_ImageMask(task);
			if (algorithmName == "CS_FeaturePoly_ImageNew") return new CS_FeaturePoly_ImageNew(task);
			if (algorithmName == "CS_FeaturePoly_LeftRight") return new CS_FeaturePoly_LeftRight(task);
			if (algorithmName == "CS_FeaturePoly_Perpendiculars") return new CS_FeaturePoly_Perpendiculars(task);
			if (algorithmName == "CS_FeaturePoly_PerpendicularsImage") return new CS_FeaturePoly_PerpendicularsImage(task);
			if (algorithmName == "CS_FeaturePoly_PerpendicularsTest") return new CS_FeaturePoly_PerpendicularsTest(task);
			if (algorithmName == "CS_FeaturePoly_Plot") return new CS_FeaturePoly_Plot(task);
			if (algorithmName == "CS_FeaturePoly_PlotWeighted") return new CS_FeaturePoly_PlotWeighted(task);
			if (algorithmName == "CS_FeaturePoly_PointCloud") return new CS_FeaturePoly_PointCloud(task);
			if (algorithmName == "CS_FeaturePoly_ResyncCheck") return new CS_FeaturePoly_ResyncCheck(task);
			if (algorithmName == "CS_FeaturePoly_RotatePoints") return new CS_FeaturePoly_RotatePoints(task);
			if (algorithmName == "CS_FeaturePoly_Sides") return new CS_FeaturePoly_Sides(task);
			if (algorithmName == "CS_FeaturePoly_Stablizer") return new CS_FeaturePoly_Stablizer(task);
			if (algorithmName == "CS_FeaturePoly_StartPoints") return new CS_FeaturePoly_StartPoints(task);
			if (algorithmName == "CS_FeaturePoly_TopFeatures") return new CS_FeaturePoly_TopFeatures(task);
			if (algorithmName == "CS_FeaturePoly_Triangle") return new CS_FeaturePoly_Triangle(task);
			if (algorithmName == "CS_FeaturePoly_WarpAffineImage") return new CS_FeaturePoly_WarpAffineImage(task);
			if (algorithmName == "CS_FeaturePoly_WarpAffinePoly") return new CS_FeaturePoly_WarpAffinePoly(task);
			if (algorithmName == "CS_FeatureROI_Basics") return new CS_FeatureROI_Basics(task);
			if (algorithmName == "CS_FeatureROI_Canny") return new CS_FeatureROI_Canny(task);
			if (algorithmName == "CS_FeatureROI_Color") return new CS_FeatureROI_Color(task);
			if (algorithmName == "CS_FeatureROI_ColorSplit") return new CS_FeatureROI_ColorSplit(task);
			if (algorithmName == "CS_FeatureROI_Correlation") return new CS_FeatureROI_Correlation(task);
			if (algorithmName == "CS_FeatureROI_LowStdev") return new CS_FeatureROI_LowStdev(task);
			if (algorithmName == "CS_FeatureROI_LowStdevCorrelation") return new CS_FeatureROI_LowStdevCorrelation(task);
			if (algorithmName == "CS_FeatureROI_LR") return new CS_FeatureROI_LR(task);
			if (algorithmName == "CS_FeatureROI_LRAll") return new CS_FeatureROI_LRAll(task);
			if (algorithmName == "CS_FeatureROI_LRClick") return new CS_FeatureROI_LRClick(task);
			if (algorithmName == "CS_FeatureROI_Sorted") return new CS_FeatureROI_Sorted(task);
			if (algorithmName == "CS_Fibonacci_Basics") return new CS_Fibonacci_Basics(task);
			if (algorithmName == "CS_Fibonacci_Yield") return new CS_Fibonacci_Yield(task);
			if (algorithmName == "CS_Filter_Laplacian") return new CS_Filter_Laplacian(task);
			if (algorithmName == "CS_Filter_Maximum") return new CS_Filter_Maximum(task);
			if (algorithmName == "CS_Filter_Mean") return new CS_Filter_Mean(task);
			if (algorithmName == "CS_Filter_Median") return new CS_Filter_Median(task);
			if (algorithmName == "CS_Filter_Minimum") return new CS_Filter_Minimum(task);
			if (algorithmName == "CS_Filter_Normalized2D") return new CS_Filter_Normalized2D(task);
			if (algorithmName == "CS_Filter_NormalizedKernel") return new CS_Filter_NormalizedKernel(task);
			if (algorithmName == "CS_Filter_SepFilter2D") return new CS_Filter_SepFilter2D(task);
			if (algorithmName == "CS_FitEllipse_AMS_CPP") return new CS_FitEllipse_AMS_CPP(task);
			if (algorithmName == "CS_FitEllipse_Basics") return new CS_FitEllipse_Basics(task);
			if (algorithmName == "CS_FitEllipse_Direct_CPP") return new CS_FitEllipse_Direct_CPP(task);
			if (algorithmName == "CS_FitEllipse_RedCloud") return new CS_FitEllipse_RedCloud(task);
			if (algorithmName == "CS_FitLine_Basics") return new CS_FitLine_Basics(task);
			if (algorithmName == "CS_FitLine_Basics3D") return new CS_FitLine_Basics3D(task);
			if (algorithmName == "CS_FLANN_Basics") return new CS_FLANN_Basics(task);
			if (algorithmName == "CS_FLANN_Test") return new CS_FLANN_Test(task);
			if (algorithmName == "CS_Flood_Basics") return new CS_Flood_Basics(task);
			if (algorithmName == "CS_Flood_BasicsMask") return new CS_Flood_BasicsMask(task);
			if (algorithmName == "CS_Flood_CellStatsPlot") return new CS_Flood_CellStatsPlot(task);
			if (algorithmName == "CS_Flood_ContainedCells") return new CS_Flood_ContainedCells(task);
			if (algorithmName == "CS_Flood_LeftRight") return new CS_Flood_LeftRight(task);
			if (algorithmName == "CS_Flood_MaxDistPoints") return new CS_Flood_MaxDistPoints(task);
			if (algorithmName == "CS_Flood_Motion") return new CS_Flood_Motion(task);
			if (algorithmName == "CS_Flood_Motion1") return new CS_Flood_Motion1(task);
			if (algorithmName == "CS_Flood_Tiers") return new CS_Flood_Tiers(task);
			if (algorithmName == "CS_Font_FlowText") return new CS_Font_FlowText(task);
			if (algorithmName == "CS_Font_FlowTextOld") return new CS_Font_FlowTextOld(task);
			if (algorithmName == "CS_Font_OpenCV") return new CS_Font_OpenCV(task);
			if (algorithmName == "CS_Foreground_Basics") return new CS_Foreground_Basics(task);
			if (algorithmName == "CS_Foreground_CellsBack") return new CS_Foreground_CellsBack(task);
			if (algorithmName == "CS_Foreground_CellsFore") return new CS_Foreground_CellsFore(task);
			if (algorithmName == "CS_Foreground_Contours") return new CS_Foreground_Contours(task);
			if (algorithmName == "CS_Foreground_Hist3D") return new CS_Foreground_Hist3D(task);
			if (algorithmName == "CS_Foreground_KMeans2") return new CS_Foreground_KMeans2(task);
			if (algorithmName == "CS_Foreground_RedCloud") return new CS_Foreground_RedCloud(task);
			if (algorithmName == "CS_Fractal_Dimension") return new CS_Fractal_Dimension(task);
			if (algorithmName == "CS_Fractal_Julia") return new CS_Fractal_Julia(task);
			if (algorithmName == "CS_Fractal_Mandelbrot") return new CS_Fractal_Mandelbrot(task);
			if (algorithmName == "CS_Fractal_MandelbrotZoom") return new CS_Fractal_MandelbrotZoom(task);
			if (algorithmName == "CS_Fractal_MandelbrotZoomColor") return new CS_Fractal_MandelbrotZoomColor(task);
			if (algorithmName == "CS_FrameRate_Basics") return new CS_FrameRate_Basics(task);
			if (algorithmName == "CS_FrameRate_BasicsGray") return new CS_FrameRate_BasicsGray(task);
			if (algorithmName == "CS_FREAK_Basics") return new CS_FREAK_Basics(task);
			if (algorithmName == "CS_Fuzzy_Basics") return new CS_Fuzzy_Basics(task);
			if (algorithmName == "CS_Fuzzy_ContoursDepth") return new CS_Fuzzy_ContoursDepth(task);
			if (algorithmName == "CS_Fuzzy_Filter") return new CS_Fuzzy_Filter(task);
			if (algorithmName == "CS_Fuzzy_NeighborProof") return new CS_Fuzzy_NeighborProof(task);
			if (algorithmName == "CS_Fuzzy_TrackerDepth") return new CS_Fuzzy_TrackerDepth(task);
			if (algorithmName == "CS_Fuzzy_TrackerDepthClick") return new CS_Fuzzy_TrackerDepthClick(task);
			if (algorithmName == "CS_Gabor_Basics") return new CS_Gabor_Basics(task);
			if (algorithmName == "CS_GrabCut_Basics") return new CS_GrabCut_Basics(task);
			if (algorithmName == "CS_GrabCut_FineTune") return new CS_GrabCut_FineTune(task);
			if (algorithmName == "CS_GrabCut_ImageMask") return new CS_GrabCut_ImageMask(task);
			if (algorithmName == "CS_GrabCut_ImageRect") return new CS_GrabCut_ImageRect(task);
			if (algorithmName == "CS_Gradient_Basics") return new CS_Gradient_Basics(task);
			if (algorithmName == "CS_Gradient_CartToPolar") return new CS_Gradient_CartToPolar(task);
			if (algorithmName == "CS_Gradient_Color") return new CS_Gradient_Color(task);
			if (algorithmName == "CS_Gradient_Depth") return new CS_Gradient_Depth(task);
			if (algorithmName == "CS_Gravity_Basics") return new CS_Gravity_Basics(task);
			if (algorithmName == "CS_Gravity_BasicsOriginal") return new CS_Gravity_BasicsOriginal(task);
			if (algorithmName == "CS_Gravity_Horizon") return new CS_Gravity_Horizon(task);
			if (algorithmName == "CS_Gravity_HorizonCompare") return new CS_Gravity_HorizonCompare(task);
			if (algorithmName == "CS_GrayToColor_Palette") return new CS_GrayToColor_Palette(task);
			if (algorithmName == "CS_Grid_Basics") return new CS_Grid_Basics(task);
			if (algorithmName == "CS_Grid_BasicsTest") return new CS_Grid_BasicsTest(task);
			if (algorithmName == "CS_Grid_FPS") return new CS_Grid_FPS(task);
			if (algorithmName == "CS_Grid_List") return new CS_Grid_List(task);
			if (algorithmName == "CS_Grid_MinMaxDepth") return new CS_Grid_MinMaxDepth(task);
			if (algorithmName == "CS_Grid_Neighbors") return new CS_Grid_Neighbors(task);
			if (algorithmName == "CS_Grid_QuarterRes") return new CS_Grid_QuarterRes(task);
			if (algorithmName == "CS_Grid_Rectangles") return new CS_Grid_Rectangles(task);
			if (algorithmName == "CS_Grid_ShowMap") return new CS_Grid_ShowMap(task);
			if (algorithmName == "CS_Grid_Special") return new CS_Grid_Special(task);
			if (algorithmName == "CS_Grid_TrackCenter") return new CS_Grid_TrackCenter(task);
			if (algorithmName == "CS_Guess_Depth_CPP") return new CS_Guess_Depth_CPP(task);
			if (algorithmName == "CS_Guess_ImageEdges_CPP") return new CS_Guess_ImageEdges_CPP(task);
			if (algorithmName == "CS_GuidedBP_Basics") return new CS_GuidedBP_Basics(task);
			if (algorithmName == "CS_GuidedBP_Depth") return new CS_GuidedBP_Depth(task);
			if (algorithmName == "CS_GuidedBP_HotPoints") return new CS_GuidedBP_HotPoints(task);
			if (algorithmName == "CS_GuidedBP_HotPointsKNN") return new CS_GuidedBP_HotPointsKNN(task);
			if (algorithmName == "CS_GuidedBP_Lookup") return new CS_GuidedBP_Lookup(task);
			if (algorithmName == "CS_GuidedBP_PlanesPlot") return new CS_GuidedBP_PlanesPlot(task);
			if (algorithmName == "CS_GuidedBP_Points") return new CS_GuidedBP_Points(task);
			if (algorithmName == "CS_HeatMap_Basics") return new CS_HeatMap_Basics(task);
			if (algorithmName == "CS_HeatMap_Cell") return new CS_HeatMap_Cell(task);
			if (algorithmName == "CS_HeatMap_Grid") return new CS_HeatMap_Grid(task);
			if (algorithmName == "CS_HeatMap_GuidedBP") return new CS_HeatMap_GuidedBP(task);
			if (algorithmName == "CS_HeatMap_Hot") return new CS_HeatMap_Hot(task);
			if (algorithmName == "CS_HeatMap_HotNot") return new CS_HeatMap_HotNot(task);
			if (algorithmName == "CS_Hist_Basics") return new CS_Hist_Basics(task);
			if (algorithmName == "CS_Hist_Byte_CPP") return new CS_Hist_Byte_CPP(task);
			if (algorithmName == "CS_Hist_Cell") return new CS_Hist_Cell(task);
			if (algorithmName == "CS_Hist_Color") return new CS_Hist_Color(task);
			if (algorithmName == "CS_Hist_ColorsAndGray") return new CS_Hist_ColorsAndGray(task);
			if (algorithmName == "CS_Hist_CompareEMD_hsv") return new CS_Hist_CompareEMD_hsv(task);
			if (algorithmName == "CS_Hist_CompareGray") return new CS_Hist_CompareGray(task);
			if (algorithmName == "CS_Hist_CompareNumber") return new CS_Hist_CompareNumber(task);
			if (algorithmName == "CS_Hist_ComparePlot") return new CS_Hist_ComparePlot(task);
			if (algorithmName == "CS_Hist_Depth") return new CS_Hist_Depth(task);
			if (algorithmName == "CS_Hist_EqualizeColor") return new CS_Hist_EqualizeColor(task);
			if (algorithmName == "CS_Hist_EqualizeGray") return new CS_Hist_EqualizeGray(task);
			if (algorithmName == "CS_Hist_FlatSurfaces") return new CS_Hist_FlatSurfaces(task);
			if (algorithmName == "CS_Hist_Frustrum") return new CS_Hist_Frustrum(task);
			if (algorithmName == "CS_Hist_Gotcha") return new CS_Hist_Gotcha(task);
			if (algorithmName == "CS_Hist_Gotcha2D") return new CS_Hist_Gotcha2D(task);
			if (algorithmName == "CS_Hist_GotchaFixed_CPP") return new CS_Hist_GotchaFixed_CPP(task);
			if (algorithmName == "CS_Hist_Graph") return new CS_Hist_Graph(task);
			if (algorithmName == "CS_Hist_Grayscale") return new CS_Hist_Grayscale(task);
			if (algorithmName == "CS_Hist_Kalman") return new CS_Hist_Kalman(task);
			if (algorithmName == "CS_Hist_KalmanAuto") return new CS_Hist_KalmanAuto(task);
			if (algorithmName == "CS_Hist_Lab") return new CS_Hist_Lab(task);
			if (algorithmName == "CS_Hist_NormalizeGray") return new CS_Hist_NormalizeGray(task);
			if (algorithmName == "CS_Hist_PeakFinder") return new CS_Hist_PeakFinder(task);
			if (algorithmName == "CS_Hist_PeakMax") return new CS_Hist_PeakMax(task);
			if (algorithmName == "CS_Hist_Peaks") return new CS_Hist_Peaks(task);
			if (algorithmName == "CS_Hist_PeaksDepth") return new CS_Hist_PeaksDepth(task);
			if (algorithmName == "CS_Hist_PeaksRGB") return new CS_Hist_PeaksRGB(task);
			if (algorithmName == "CS_Hist_PointCloud") return new CS_Hist_PointCloud(task);
			if (algorithmName == "CS_Hist_PointCloudXYZ") return new CS_Hist_PointCloudXYZ(task);
			if (algorithmName == "CS_Hist_ShapeSide") return new CS_Hist_ShapeSide(task);
			if (algorithmName == "CS_Hist_ShapeTop") return new CS_Hist_ShapeTop(task);
			if (algorithmName == "CS_Hist_Simple") return new CS_Hist_Simple(task);
			if (algorithmName == "CS_Hist_Xdimension") return new CS_Hist_Xdimension(task);
			if (algorithmName == "CS_Hist_Ydimension") return new CS_Hist_Ydimension(task);
			if (algorithmName == "CS_Hist_Zdimension") return new CS_Hist_Zdimension(task);
			if (algorithmName == "CS_Hist2D_Basics") return new CS_Hist2D_Basics(task);
			if (algorithmName == "CS_Hist2D_BGR") return new CS_Hist2D_BGR(task);
			if (algorithmName == "CS_Hist2D_Cloud") return new CS_Hist2D_Cloud(task);
			if (algorithmName == "CS_Hist2D_Depth") return new CS_Hist2D_Depth(task);
			if (algorithmName == "CS_Hist2D_HSV") return new CS_Hist2D_HSV(task);
			if (algorithmName == "CS_Hist2D_PlotHistogram1D") return new CS_Hist2D_PlotHistogram1D(task);
			if (algorithmName == "CS_Hist2D_Zoom") return new CS_Hist2D_Zoom(task);
			if (algorithmName == "CS_Hist3D_Basics") return new CS_Hist3D_Basics(task);
			if (algorithmName == "CS_Hist3D_BuildHistogram") return new CS_Hist3D_BuildHistogram(task);
			if (algorithmName == "CS_Hist3D_DepthWithMask") return new CS_Hist3D_DepthWithMask(task);
			if (algorithmName == "CS_Hist3D_Pixel") return new CS_Hist3D_Pixel(task);
			if (algorithmName == "CS_Hist3D_PixelCells") return new CS_Hist3D_PixelCells(task);
			if (algorithmName == "CS_Hist3D_PixelClassify") return new CS_Hist3D_PixelClassify(task);
			if (algorithmName == "CS_Hist3D_PixelDiffMask") return new CS_Hist3D_PixelDiffMask(task);
			if (algorithmName == "CS_Hist3D_RedCloud") return new CS_Hist3D_RedCloud(task);
			if (algorithmName == "CS_Hist3D_RedCloudGrid") return new CS_Hist3D_RedCloudGrid(task);
			if (algorithmName == "CS_Hist3D_RedColor") return new CS_Hist3D_RedColor(task);
			if (algorithmName == "CS_Hist3Dcloud_Basics") return new CS_Hist3Dcloud_Basics(task);
			if (algorithmName == "CS_Hist3Dcloud_BP_Filter") return new CS_Hist3Dcloud_BP_Filter(task);
			if (algorithmName == "CS_Hist3Dcloud_DepthSplit") return new CS_Hist3Dcloud_DepthSplit(task);
			if (algorithmName == "CS_Hist3Dcloud_Highlights") return new CS_Hist3Dcloud_Highlights(task);
			if (algorithmName == "CS_Hist3Dcloud_PlotHist1D") return new CS_Hist3Dcloud_PlotHist1D(task);
			if (algorithmName == "CS_Hist3Dcolor_Basics") return new CS_Hist3Dcolor_Basics(task);
			if (algorithmName == "CS_Hist3Dcolor_Basics_CPP") return new CS_Hist3Dcolor_Basics_CPP(task);
			if (algorithmName == "CS_Hist3Dcolor_Diff") return new CS_Hist3Dcolor_Diff(task);
			if (algorithmName == "CS_Hist3Dcolor_PlotHist1D") return new CS_Hist3Dcolor_PlotHist1D(task);
			if (algorithmName == "CS_Hist3Dcolor_Reduction") return new CS_Hist3Dcolor_Reduction(task);
			if (algorithmName == "CS_Hist3Dcolor_Select") return new CS_Hist3Dcolor_Select(task);
			if (algorithmName == "CS_Hist3Dcolor_TopXColors") return new CS_Hist3Dcolor_TopXColors(task);
			if (algorithmName == "CS_Hist3Dcolor_UniqueRGBPixels") return new CS_Hist3Dcolor_UniqueRGBPixels(task);
			if (algorithmName == "CS_Hist3Dcolor_Vector") return new CS_Hist3Dcolor_Vector(task);
			if (algorithmName == "CS_Hist3Dcolor_ZeroGroups") return new CS_Hist3Dcolor_ZeroGroups(task);
			if (algorithmName == "CS_History_Basics") return new CS_History_Basics(task);
			if (algorithmName == "CS_History_BasicsDiff") return new CS_History_BasicsDiff(task);
			if (algorithmName == "CS_History_BasicsNoSaturation") return new CS_History_BasicsNoSaturation(task);
			if (algorithmName == "CS_History_Cloud") return new CS_History_Cloud(task);
			if (algorithmName == "CS_History_MotionRect") return new CS_History_MotionRect(task);
			if (algorithmName == "CS_HistPeak2D_Basics") return new CS_HistPeak2D_Basics(task);
			if (algorithmName == "CS_HistPeak2D_BGR") return new CS_HistPeak2D_BGR(task);
			if (algorithmName == "CS_HistPeak2D_Edges") return new CS_HistPeak2D_Edges(task);
			if (algorithmName == "CS_HistPeak2D_HotSide") return new CS_HistPeak2D_HotSide(task);
			if (algorithmName == "CS_HistPeak2D_HotTop") return new CS_HistPeak2D_HotTop(task);
			if (algorithmName == "CS_HistPeak2D_HSV") return new CS_HistPeak2D_HSV(task);
			if (algorithmName == "CS_HistPeak2D_NotHotTop") return new CS_HistPeak2D_NotHotTop(task);
			if (algorithmName == "CS_HistPeak2D_RGB") return new CS_HistPeak2D_RGB(task);
			if (algorithmName == "CS_HistPeak2D_TopAndSide") return new CS_HistPeak2D_TopAndSide(task);
			if (algorithmName == "CS_HistValley_Basics") return new CS_HistValley_Basics(task);
			if (algorithmName == "CS_HistValley_Colors") return new CS_HistValley_Colors(task);
			if (algorithmName == "CS_HistValley_Depth") return new CS_HistValley_Depth(task);
			if (algorithmName == "CS_HistValley_Depth1") return new CS_HistValley_Depth1(task);
			if (algorithmName == "CS_HistValley_Diff") return new CS_HistValley_Diff(task);
			if (algorithmName == "CS_HistValley_EdgeDraw") return new CS_HistValley_EdgeDraw(task);
			if (algorithmName == "CS_HistValley_FromPeaks") return new CS_HistValley_FromPeaks(task);
			if (algorithmName == "CS_HistValley_GrayKalman") return new CS_HistValley_GrayKalman(task);
			if (algorithmName == "CS_HistValley_GrayScale1") return new CS_HistValley_GrayScale1(task);
			if (algorithmName == "CS_HistValley_OptionsAuto") return new CS_HistValley_OptionsAuto(task);
			if (algorithmName == "CS_HistValley_Peaks") return new CS_HistValley_Peaks(task);
			if (algorithmName == "CS_HistValley_Simple") return new CS_HistValley_Simple(task);
			if (algorithmName == "CS_HistValley_Test") return new CS_HistValley_Test(task);
			if (algorithmName == "CS_HistValley_Tiers") return new CS_HistValley_Tiers(task);
			if (algorithmName == "CS_HMM_Example_CPP") return new CS_HMM_Example_CPP(task);
			if (algorithmName == "CS_Line_Basics") return new CS_Line_Basics(task);
			if (algorithmName == "CS_Mat_4Click") return new CS_Mat_4Click(task);
			if (algorithmName == "CS_Mat_4to1") return new CS_Mat_4to1(task);
			if (algorithmName == "CS_MatrixInverse") return new CS_MatrixInverse(task);
			if (algorithmName == "CS_OEX_Sobel_Demo") return new CS_OEX_Sobel_Demo(task);
			if (algorithmName == "CS_OilPaint_Cartoon") return new CS_OilPaint_Cartoon(task);
			if (algorithmName == "CS_OilPaint_Manual") return new CS_OilPaint_Manual(task);
			if (algorithmName == "CS_Pixel_Unstable") return new CS_Pixel_Unstable(task);
			if (algorithmName == "CS_Random_Basics") return new CS_Random_Basics(task);
			if (algorithmName == "CS_Sieve_Basics") return new CS_Sieve_Basics(task);
			if (algorithmName == "CS_SLR_Basics") return new CS_SLR_Basics(task);
			if (algorithmName == "CS_SLR_DepthHist") return new CS_SLR_DepthHist(task);
			if (algorithmName == "CS_SLR_Image") return new CS_SLR_Image(task);
			if (algorithmName == "CS_SLR_TrendCompare") return new CS_SLR_TrendCompare(task);
			if (algorithmName == "CS_Voronoi_Basics") return new CS_Voronoi_Basics(task);
			if (algorithmName == "CS_Voronoi_Compare") return new CS_Voronoi_Compare(task);
			if (algorithmName == "CS_Voronoi_CPP") return new CS_Voronoi_CPP(task);
			return new CS_AddWeighted_Basics(task);
		}
	}
}
