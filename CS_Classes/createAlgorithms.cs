// this file is automatically generated in a pre-build step.  Any manual modifications will be lost.
using VB_Classes;
using CS_Classes;
namespace CS_Classes
{
	public class CSAlgorithmList
	{
		public CS_Parent createCSAlgorithm( string algorithmName, VB_Classes.VBtask task)
		{
			if (algorithmName == "AddWeighted_Basics_CS") return new AddWeighted_Basics_CS(task);
			if (algorithmName == "AddWeighted_Edges_CS") return new AddWeighted_Edges_CS(task);
			if (algorithmName == "AddWeighted_ImageAccumulate_CS") return new AddWeighted_ImageAccumulate_CS(task);
			if (algorithmName == "AddWeighted_InfraRed_CS") return new AddWeighted_InfraRed_CS(task);
			if (algorithmName == "AlphaChannel_Basics_CS") return new AlphaChannel_Basics_CS(task);
			if (algorithmName == "Annealing_Basics_CPP_CS") return new Annealing_Basics_CPP_CS(task);
			if (algorithmName == "Annealing_MT_CPP_CS") return new Annealing_MT_CPP_CS(task);
			if (algorithmName == "ApproxPoly_Basics_CS") return new ApproxPoly_Basics_CS(task);
			if (algorithmName == "ApproxPoly_FindandDraw_CS") return new ApproxPoly_FindandDraw_CS(task);
			if (algorithmName == "ApproxPoly_Hull_CS") return new ApproxPoly_Hull_CS(task);
			if (algorithmName == "Area_FindNonZero_CS") return new Area_FindNonZero_CS(task);
			if (algorithmName == "Area_MinMotionRect_CS") return new Area_MinMotionRect_CS(task);
			if (algorithmName == "Area_MinRect_CS") return new Area_MinRect_CS(task);
			if (algorithmName == "Area_MinTriangle_CPP_CS") return new Area_MinTriangle_CPP_CS(task);
			if (algorithmName == "Area_SoloPoints_CS") return new Area_SoloPoints_CS(task);
			if (algorithmName == "AsciiArt_Basics_CS") return new AsciiArt_Basics_CS(task);
			if (algorithmName == "AsciiArt_Color_CS") return new AsciiArt_Color_CS(task);
			if (algorithmName == "AsciiArt_Diff_CS") return new AsciiArt_Diff_CS(task);
			if (algorithmName == "BackProject_Basics_CS") return new BackProject_Basics_CS(task);
			if (algorithmName == "BackProject_BasicsKeyboard_CS") return new BackProject_BasicsKeyboard_CS(task);
			if (algorithmName == "BackProject_Depth_CS") return new BackProject_Depth_CS(task);
			if (algorithmName == "BackProject_Display_CS") return new BackProject_Display_CS(task);
			if (algorithmName == "BackProject_FeatureLess_CS") return new BackProject_FeatureLess_CS(task);
			if (algorithmName == "BackProject_Full_CS") return new BackProject_Full_CS(task);
			if (algorithmName == "BackProject_FullEqualized_CS") return new BackProject_FullEqualized_CS(task);
			if (algorithmName == "BackProject_FullLines_CS") return new BackProject_FullLines_CS(task);
			if (algorithmName == "BackProject_Horizontal_CS") return new BackProject_Horizontal_CS(task);
			if (algorithmName == "BackProject_Hue_CS") return new BackProject_Hue_CS(task);
			if (algorithmName == "BackProject_Image_CS") return new BackProject_Image_CS(task);
			if (algorithmName == "BackProject_LineSide_CS") return new BackProject_LineSide_CS(task);
			if (algorithmName == "BackProject_LineTop_CS") return new BackProject_LineTop_CS(task);
			if (algorithmName == "BackProject_MaskLines_CS") return new BackProject_MaskLines_CS(task);
			if (algorithmName == "BackProject_Masks_CS") return new BackProject_Masks_CS(task);
			if (algorithmName == "BackProject_MeterByMeter_CS") return new BackProject_MeterByMeter_CS(task);
			if (algorithmName == "BackProject_Mouse_CS") return new BackProject_Mouse_CS(task);
			if (algorithmName == "BackProject_PointCloud_CS") return new BackProject_PointCloud_CS(task);
			if (algorithmName == "BackProject_Reduction_CS") return new BackProject_Reduction_CS(task);
			if (algorithmName == "BackProject_Side_CS") return new BackProject_Side_CS(task);
			if (algorithmName == "BackProject_SoloSide_CS") return new BackProject_SoloSide_CS(task);
			if (algorithmName == "BackProject_SoloTop_CS") return new BackProject_SoloTop_CS(task);
			if (algorithmName == "BackProject_Top_CS") return new BackProject_Top_CS(task);
			if (algorithmName == "BackProject_Unstable_CS") return new BackProject_Unstable_CS(task);
			if (algorithmName == "BackProject_Vertical_CS") return new BackProject_Vertical_CS(task);
			if (algorithmName == "BackProject2D_Basics_CS") return new BackProject2D_Basics_CS(task);
			if (algorithmName == "BackProject2D_BasicsOld_CS") return new BackProject2D_BasicsOld_CS(task);
			if (algorithmName == "BackProject2D_Compare_CS") return new BackProject2D_Compare_CS(task);
			if (algorithmName == "BackProject2D_Filter_CS") return new BackProject2D_Filter_CS(task);
			if (algorithmName == "BackProject2D_FilterBoth_CS") return new BackProject2D_FilterBoth_CS(task);
			if (algorithmName == "BackProject2D_FilterSide_CS") return new BackProject2D_FilterSide_CS(task);
			if (algorithmName == "BackProject2D_FilterTop_CS") return new BackProject2D_FilterTop_CS(task);
			if (algorithmName == "BackProject2D_Full_CS") return new BackProject2D_Full_CS(task);
			if (algorithmName == "BackProject2D_RowCol_CS") return new BackProject2D_RowCol_CS(task);
			if (algorithmName == "BackProject2D_Side_CS") return new BackProject2D_Side_CS(task);
			if (algorithmName == "BackProject2D_Top_CS") return new BackProject2D_Top_CS(task);
			if (algorithmName == "Benford_Basics_CS") return new Benford_Basics_CS(task);
			if (algorithmName == "Benford_Depth_CS") return new Benford_Depth_CS(task);
			if (algorithmName == "Benford_JPEG_CS") return new Benford_JPEG_CS(task);
			if (algorithmName == "Benford_JPEG99_CS") return new Benford_JPEG99_CS(task);
			if (algorithmName == "Benford_NormalizedImage_CS") return new Benford_NormalizedImage_CS(task);
			if (algorithmName == "Benford_NormalizedImage99_CS") return new Benford_NormalizedImage99_CS(task);
			if (algorithmName == "Benford_PNG_CS") return new Benford_PNG_CS(task);
			if (algorithmName == "Benford_Primes_CS") return new Benford_Primes_CS(task);
			if (algorithmName == "Bezier_Basics_CS") return new Bezier_Basics_CS(task);
			if (algorithmName == "Bezier_Example_CS") return new Bezier_Example_CS(task);
			if (algorithmName == "BGRPattern_Basics_CS") return new BGRPattern_Basics_CS(task);
			if (algorithmName == "BGSubtract_Basics_CS") return new BGSubtract_Basics_CS(task);
			if (algorithmName == "BGSubtract_Basics_QT_CS") return new BGSubtract_Basics_QT_CS(task);
			if (algorithmName == "BGSubtract_DepthOrColorMotion_CS") return new BGSubtract_DepthOrColorMotion_CS(task);
			if (algorithmName == "BGSubtract_GMG_KNN_CS") return new BGSubtract_GMG_KNN_CS(task);
			if (algorithmName == "BGSubtract_MOG_CS") return new BGSubtract_MOG_CS(task);
			if (algorithmName == "BGSubtract_MOG_Retina_CS") return new BGSubtract_MOG_Retina_CS(task);
			if (algorithmName == "BGSubtract_MOG_RGBDepth_CS") return new BGSubtract_MOG_RGBDepth_CS(task);
			if (algorithmName == "BGSubtract_MOG2_CS") return new BGSubtract_MOG2_CS(task);
			if (algorithmName == "BGSubtract_MOG2_QT_CS") return new BGSubtract_MOG2_QT_CS(task);
			if (algorithmName == "BGSubtract_MotionDetect_CS") return new BGSubtract_MotionDetect_CS(task);
			if (algorithmName == "BGSubtract_Reduction_CS") return new BGSubtract_Reduction_CS(task);
			if (algorithmName == "BGSubtract_Synthetic_CS") return new BGSubtract_Synthetic_CS(task);
			if (algorithmName == "BGSubtract_Video_CS") return new BGSubtract_Video_CS(task);
			if (algorithmName == "Bin2Way_Basics_CS") return new Bin2Way_Basics_CS(task);
			if (algorithmName == "Bin2Way_KMeans_CS") return new Bin2Way_KMeans_CS(task);
			if (algorithmName == "Bin2Way_RecurseOnce_CS") return new Bin2Way_RecurseOnce_CS(task);
			if (algorithmName == "Bin2Way_RedCloud_CS") return new Bin2Way_RedCloud_CS(task);
			if (algorithmName == "Bin2Way_RedCloudDarkest_CS") return new Bin2Way_RedCloudDarkest_CS(task);
			if (algorithmName == "Bin2Way_RedCloudLightest_CS") return new Bin2Way_RedCloudLightest_CS(task);
			if (algorithmName == "Bin3Way_Basics_CS") return new Bin3Way_Basics_CS(task);
			if (algorithmName == "Bin3Way_Color_CS") return new Bin3Way_Color_CS(task);
			if (algorithmName == "Bin3Way_KMeans_CS") return new Bin3Way_KMeans_CS(task);
			if (algorithmName == "Bin3Way_RedCloud_CS") return new Bin3Way_RedCloud_CS(task);
			if (algorithmName == "Bin3Way_RedCloud1_CS") return new Bin3Way_RedCloud1_CS(task);
			if (algorithmName == "Bin3Way_RedCloudDarkest_CS") return new Bin3Way_RedCloudDarkest_CS(task);
			if (algorithmName == "Bin3Way_RedCloudLightest_CS") return new Bin3Way_RedCloudLightest_CS(task);
			if (algorithmName == "Bin3Way_RedCloudOther_CS") return new Bin3Way_RedCloudOther_CS(task);
			if (algorithmName == "Bin4Way_Basics_CS") return new Bin4Way_Basics_CS(task);
			if (algorithmName == "Bin4Way_BasicsColors_CS") return new Bin4Way_BasicsColors_CS(task);
			if (algorithmName == "Bin4Way_BasicsRed_CS") return new Bin4Way_BasicsRed_CS(task);
			if (algorithmName == "Bin4Way_Canny_CS") return new Bin4Way_Canny_CS(task);
			if (algorithmName == "Bin4Way_RedCloud_CS") return new Bin4Way_RedCloud_CS(task);
			if (algorithmName == "Bin4Way_Regions_CS") return new Bin4Way_Regions_CS(task);
			if (algorithmName == "Bin4Way_Regions1_CS") return new Bin4Way_Regions1_CS(task);
			if (algorithmName == "Bin4Way_RegionsLeftRight_CS") return new Bin4Way_RegionsLeftRight_CS(task);
			if (algorithmName == "Bin4Way_Sobel_CS") return new Bin4Way_Sobel_CS(task);
			if (algorithmName == "Bin4Way_SplitGaps_CS") return new Bin4Way_SplitGaps_CS(task);
			if (algorithmName == "Bin4Way_SplitMean_CS") return new Bin4Way_SplitMean_CS(task);
			if (algorithmName == "Bin4Way_SplitMean1_CS") return new Bin4Way_SplitMean1_CS(task);
			if (algorithmName == "Bin4Way_SplitMean2_CS") return new Bin4Way_SplitMean2_CS(task);
			if (algorithmName == "Bin4Way_SplitValley_CS") return new Bin4Way_SplitValley_CS(task);
			if (algorithmName == "Bin4Way_Unstable_CS") return new Bin4Way_Unstable_CS(task);
			if (algorithmName == "Bin4Way_Unstable1_CS") return new Bin4Way_Unstable1_CS(task);
			if (algorithmName == "Bin4Way_UnstableEdges_CS") return new Bin4Way_UnstableEdges_CS(task);
			if (algorithmName == "Bin4Way_UnstablePixels_CS") return new Bin4Way_UnstablePixels_CS(task);
			if (algorithmName == "Bin4Way_UnstablePixels1_CS") return new Bin4Way_UnstablePixels1_CS(task);
			if (algorithmName == "Binarize_Basics_CS") return new Binarize_Basics_CS(task);
			if (algorithmName == "Binarize_DepthTiers_CS") return new Binarize_DepthTiers_CS(task);
			if (algorithmName == "Binarize_FourPixelFlips_CS") return new Binarize_FourPixelFlips_CS(task);
			if (algorithmName == "Binarize_KMeansMasks_CS") return new Binarize_KMeansMasks_CS(task);
			if (algorithmName == "Binarize_KMeansRGB_CS") return new Binarize_KMeansRGB_CS(task);
			if (algorithmName == "Binarize_Niblack_Sauvola_CS") return new Binarize_Niblack_Sauvola_CS(task);
			if (algorithmName == "Binarize_OTSU_CS") return new Binarize_OTSU_CS(task);
			if (algorithmName == "Binarize_Simple_CS") return new Binarize_Simple_CS(task);
			if (algorithmName == "Binarize_Wolf_Nick_CS") return new Binarize_Wolf_Nick_CS(task);
			if (algorithmName == "Bitmap_ToMat_CS") return new Bitmap_ToMat_CS(task);
			if (algorithmName == "Blob_Basics_CS") return new Blob_Basics_CS(task);
			if (algorithmName == "Blob_Input_CS") return new Blob_Input_CS(task);
			if (algorithmName == "Blob_RenderBlobs_CS") return new Blob_RenderBlobs_CS(task);
			if (algorithmName == "BlockMatching_Basics_CS") return new BlockMatching_Basics_CS(task);
			if (algorithmName == "Blur_Basics_CS") return new Blur_Basics_CS(task);
			if (algorithmName == "Blur_Bilateral_CS") return new Blur_Bilateral_CS(task);
			if (algorithmName == "Blur_Depth_CS") return new Blur_Depth_CS(task);
			if (algorithmName == "Blur_Detection_CS") return new Blur_Detection_CS(task);
			if (algorithmName == "Blur_Gaussian_CS") return new Blur_Gaussian_CS(task);
			if (algorithmName == "Blur_Homogeneous_CS") return new Blur_Homogeneous_CS(task);
			if (algorithmName == "Blur_Median_CS") return new Blur_Median_CS(task);
			if (algorithmName == "Blur_PlusHistogram_CS") return new Blur_PlusHistogram_CS(task);
			if (algorithmName == "Blur_TopoMap_CS") return new Blur_TopoMap_CS(task);
			if (algorithmName == "BlurMotion_Basics_CS") return new BlurMotion_Basics_CS(task);
			if (algorithmName == "BlurMotion_Deblur_CS") return new BlurMotion_Deblur_CS(task);
			if (algorithmName == "Boundary_Basics_CS") return new Boundary_Basics_CS(task);
			if (algorithmName == "Boundary_Overlap_CS") return new Boundary_Overlap_CS(task);
			if (algorithmName == "Boundary_Rectangles_CS") return new Boundary_Rectangles_CS(task);
			if (algorithmName == "Boundary_RemovedRects_CS") return new Boundary_RemovedRects_CS(task);
			if (algorithmName == "Boundary_Tiers_CS") return new Boundary_Tiers_CS(task);
			if (algorithmName == "Brightness_Basics_CS") return new Brightness_Basics_CS(task);
			if (algorithmName == "Brightness_HSV_CS") return new Brightness_HSV_CS(task);
			if (algorithmName == "BRISK_Basics_CS") return new BRISK_Basics_CS(task);
			if (algorithmName == "CameraMotion_Basics_CS") return new CameraMotion_Basics_CS(task);
			if (algorithmName == "CameraMotion_SceneMotion_CS") return new CameraMotion_SceneMotion_CS(task);
			if (algorithmName == "CameraMotion_WithRotation_CS") return new CameraMotion_WithRotation_CS(task);
			if (algorithmName == "CamShift_Basics_CS") return new CamShift_Basics_CS(task);
			if (algorithmName == "CamShift_RedHue_CS") return new CamShift_RedHue_CS(task);
			if (algorithmName == "Cartoonify_Basics_CS") return new Cartoonify_Basics_CS(task);
			if (algorithmName == "CComp_Basics_CS") return new CComp_Basics_CS(task);
			if (algorithmName == "CComp_Both_CS") return new CComp_Both_CS(task);
			if (algorithmName == "CComp_Hulls_CS") return new CComp_Hulls_CS(task);
			if (algorithmName == "CComp_Shapes_CS") return new CComp_Shapes_CS(task);
			if (algorithmName == "CComp_Stats_CS") return new CComp_Stats_CS(task);
			if (algorithmName == "Cell_Basics_CS") return new Cell_Basics_CS(task);
			if (algorithmName == "Cell_BasicsPlot_CS") return new Cell_BasicsPlot_CS(task);
			if (algorithmName == "Cell_Binarize_CS") return new Cell_Binarize_CS(task);
			if (algorithmName == "Cell_Distance_CS") return new Cell_Distance_CS(task);
			if (algorithmName == "Cell_Floodfill_CS") return new Cell_Floodfill_CS(task);
			if (algorithmName == "Cell_Generate_CS") return new Cell_Generate_CS(task);
			if (algorithmName == "Cell_PixelCountCompare_CS") return new Cell_PixelCountCompare_CS(task);
			if (algorithmName == "Cell_Stable_CS") return new Cell_Stable_CS(task);
			if (algorithmName == "Cell_ValidateColorCells_CS") return new Cell_ValidateColorCells_CS(task);
			if (algorithmName == "CellularAutomata_All256_CS") return new CellularAutomata_All256_CS(task);
			if (algorithmName == "CellularAutomata_Basics_CS") return new CellularAutomata_Basics_CS(task);
			if (algorithmName == "CellularAutomata_Life_CS") return new CellularAutomata_Life_CS(task);
			if (algorithmName == "CellularAutomata_LifeColor_CS") return new CellularAutomata_LifeColor_CS(task);
			if (algorithmName == "CellularAutomata_LifePopulation_CS") return new CellularAutomata_LifePopulation_CS(task);
			if (algorithmName == "CellularAutomata_MultiPoint_CS") return new CellularAutomata_MultiPoint_CS(task);
			if (algorithmName == "Classifier_Basics_CS") return new Classifier_Basics_CS(task);
			if (algorithmName == "Classifier_Bayesian_CS") return new Classifier_Bayesian_CS(task);
			if (algorithmName == "Classifier_BayesianTest_CS") return new Classifier_BayesianTest_CS(task);
			if (algorithmName == "Clone_Basics_CS") return new Clone_Basics_CS(task);
			if (algorithmName == "Clone_ColorChange_CS") return new Clone_ColorChange_CS(task);
			if (algorithmName == "Clone_Eagle_CS") return new Clone_Eagle_CS(task);
			if (algorithmName == "Clone_IlluminationChange_CS") return new Clone_IlluminationChange_CS(task);
			if (algorithmName == "Clone_Seamless_CS") return new Clone_Seamless_CS(task);
			if (algorithmName == "Clone_TextureFlattening_CS") return new Clone_TextureFlattening_CS(task);
			if (algorithmName == "Cluster_Basics_CS") return new Cluster_Basics_CS(task);
			if (algorithmName == "Cluster_Hulls_CS") return new Cluster_Hulls_CS(task);
			if (algorithmName == "Cluster_RedCloud_CS") return new Cluster_RedCloud_CS(task);
			if (algorithmName == "Coherence_Basics_CS") return new Coherence_Basics_CS(task);
			if (algorithmName == "Coherence_Depth_CS") return new Coherence_Depth_CS(task);
			if (algorithmName == "Color_Basics_CS") return new Color_Basics_CS(task);
			if (algorithmName == "Color8U_Basics_CS") return new Color8U_Basics_CS(task);
			if (algorithmName == "Color8U_BlackAndWhite_CS") return new Color8U_BlackAndWhite_CS(task);
			if (algorithmName == "Color8U_Common_CS") return new Color8U_Common_CS(task);
			if (algorithmName == "Color8U_Complementary_CS") return new Color8U_Complementary_CS(task);
			if (algorithmName == "Color8U_ComplementaryTest_CS") return new Color8U_ComplementaryTest_CS(task);
			if (algorithmName == "Color8U_Denoise_CS") return new Color8U_Denoise_CS(task);
			if (algorithmName == "Color8U_Depth_CS") return new Color8U_Depth_CS(task);
			if (algorithmName == "Color8U_Grayscale_CS") return new Color8U_Grayscale_CS(task);
			if (algorithmName == "Color8U_Hue_CS") return new Color8U_Hue_CS(task);
			if (algorithmName == "Color8U_InRange_CS") return new Color8U_InRange_CS(task);
			if (algorithmName == "Color8U_KMeans_CS") return new Color8U_KMeans_CS(task);
			if (algorithmName == "Color8U_MotionFiltered_CS") return new Color8U_MotionFiltered_CS(task);
			if (algorithmName == "Color8U_RedHue_CS") return new Color8U_RedHue_CS(task);
			if (algorithmName == "Color8U_Smoothing_CS") return new Color8U_Smoothing_CS(task);
			if (algorithmName == "Color8U_TopX_CS") return new Color8U_TopX_CS(task);
			if (algorithmName == "Complexity_Basics_CS") return new Complexity_Basics_CS(task);
			if (algorithmName == "Complexity_Dots_CS") return new Complexity_Dots_CS(task);
			if (algorithmName == "Complexity_PlotOpenCV_CS") return new Complexity_PlotOpenCV_CS(task);
			if (algorithmName == "Concat_4way_CS") return new Concat_4way_CS(task);
			if (algorithmName == "Concat_Basics_CS") return new Concat_Basics_CS(task);
			if (algorithmName == "Contour_Basics_CS") return new Contour_Basics_CS(task);
			if (algorithmName == "Contour_Compare_CS") return new Contour_Compare_CS(task);
			if (algorithmName == "Contour_CompareToFeatureless_CS") return new Contour_CompareToFeatureless_CS(task);
			if (algorithmName == "Contour_DepthTiers_CS") return new Contour_DepthTiers_CS(task);
			if (algorithmName == "Contour_Edges_CS") return new Contour_Edges_CS(task);
			if (algorithmName == "Contour_Foreground_CS") return new Contour_Foreground_CS(task);
			if (algorithmName == "Contour_FromPoints_CS") return new Contour_FromPoints_CS(task);
			if (algorithmName == "Contour_General_CS") return new Contour_General_CS(task);
			if (algorithmName == "Contour_GeneralWithOptions_CS") return new Contour_GeneralWithOptions_CS(task);
			if (algorithmName == "Contour_Gray_CS") return new Contour_Gray_CS(task);
			if (algorithmName == "Contour_Largest_CS") return new Contour_Largest_CS(task);
			if (algorithmName == "Contour_Outline_CS") return new Contour_Outline_CS(task);
			if (algorithmName == "Contour_RC_AddContour_CS") return new Contour_RC_AddContour_CS(task);
			if (algorithmName == "Contour_RedCloud_CS") return new Contour_RedCloud_CS(task);
			if (algorithmName == "Contour_RedCloudCorners_CS") return new Contour_RedCloudCorners_CS(task);
			if (algorithmName == "Contour_RedCloudEdges_CS") return new Contour_RedCloudEdges_CS(task);
			if (algorithmName == "Contour_RotatedRects_CS") return new Contour_RotatedRects_CS(task);
			if (algorithmName == "Contour_SelfIntersect_CS") return new Contour_SelfIntersect_CS(task);
			if (algorithmName == "Contour_SidePoints_CS") return new Contour_SidePoints_CS(task);
			if (algorithmName == "Contour_Smoothing_CS") return new Contour_Smoothing_CS(task);
			if (algorithmName == "Contour_Sorted_CS") return new Contour_Sorted_CS(task);
			if (algorithmName == "Contour_WholeImage_CS") return new Contour_WholeImage_CS(task);
			if (algorithmName == "Contrast_Basics_CS") return new Contrast_Basics_CS(task);
			if (algorithmName == "Contrast_POW_CS") return new Contrast_POW_CS(task);
			if (algorithmName == "Convex_Basics_CS") return new Convex_Basics_CS(task);
			if (algorithmName == "Convex_Defects_CS") return new Convex_Defects_CS(task);
			if (algorithmName == "Convex_RedCloud_CS") return new Convex_RedCloud_CS(task);
			if (algorithmName == "Convex_RedCloudDefects_CS") return new Convex_RedCloudDefects_CS(task);
			if (algorithmName == "Corners_Basics_CS") return new Corners_Basics_CS(task);
			if (algorithmName == "Corners_BasicsCentroid_CS") return new Corners_BasicsCentroid_CS(task);
			if (algorithmName == "Corners_BasicsCentroids_CS") return new Corners_BasicsCentroids_CS(task);
			if (algorithmName == "Corners_BasicsStablePoints_CS") return new Corners_BasicsStablePoints_CS(task);
			if (algorithmName == "Corners_Harris_CPP_CS") return new Corners_Harris_CPP_CS(task);
			if (algorithmName == "Corners_Harris_CS") return new Corners_Harris_CS(task);
			if (algorithmName == "Corners_HarrisDetector_CPP_CS") return new Corners_HarrisDetector_CPP_CS(task);
			if (algorithmName == "Corners_PreCornerDetect_CS") return new Corners_PreCornerDetect_CS(task);
			if (algorithmName == "Corners_RedCloud_CS") return new Corners_RedCloud_CS(task);
			if (algorithmName == "Corners_ShiTomasi_CPP_CS") return new Corners_ShiTomasi_CPP_CS(task);
			if (algorithmName == "Corners_SubPix_CS") return new Corners_SubPix_CS(task);
			if (algorithmName == "Correlation_Basics_CS") return new Correlation_Basics_CS(task);
			if (algorithmName == "Covariance_Basics_CS") return new Covariance_Basics_CS(task);
			if (algorithmName == "Covariance_Images_CS") return new Covariance_Images_CS(task);
			if (algorithmName == "Covariance_Test_CS") return new Covariance_Test_CS(task);
			if (algorithmName == "Crypto_Hash_CS") return new Crypto_Hash_CS(task);
			if (algorithmName == "CSV_Basics_CS") return new CSV_Basics_CS(task);
			if (algorithmName == "DCT_Basics_CS") return new DCT_Basics_CS(task);
			if (algorithmName == "DCT_Depth_CS") return new DCT_Depth_CS(task);
			if (algorithmName == "DCT_FeatureLess_CS") return new DCT_FeatureLess_CS(task);
			if (algorithmName == "DCT_RGB_CS") return new DCT_RGB_CS(task);
			if (algorithmName == "DCT_Surfaces_debug_CS") return new DCT_Surfaces_debug_CS(task);
			if (algorithmName == "Delaunay_Basics_CS") return new Delaunay_Basics_CS(task);
			if (algorithmName == "Delaunay_ConsistentColor_CS") return new Delaunay_ConsistentColor_CS(task);
			if (algorithmName == "Delaunay_Contours_CS") return new Delaunay_Contours_CS(task);
			if (algorithmName == "Delaunay_Generations_CS") return new Delaunay_Generations_CS(task);
			if (algorithmName == "Delaunay_GenerationsNoKNN_CS") return new Delaunay_GenerationsNoKNN_CS(task);
			if (algorithmName == "Delaunay_SubDiv_CS") return new Delaunay_SubDiv_CS(task);
			if (algorithmName == "Delaunay_Subdiv2D_CS") return new Delaunay_Subdiv2D_CS(task);
			if (algorithmName == "Denoise_Basics_CPP_CS") return new Denoise_Basics_CPP_CS(task);
			if (algorithmName == "Denoise_Pixels_CPP_CS") return new Denoise_Pixels_CPP_CS(task);
			if (algorithmName == "Density_Basics_CS") return new Density_Basics_CS(task);
			if (algorithmName == "Density_Count_CPP_CS") return new Density_Count_CPP_CS(task);
			if (algorithmName == "Density_Mask_CS") return new Density_Mask_CS(task);
			if (algorithmName == "Density_Phase_CS") return new Density_Phase_CS(task);
			if (algorithmName == "Depth_Averaging_CS") return new Depth_Averaging_CS(task);
			if (algorithmName == "Depth_Basics_CS") return new Depth_Basics_CS(task);
			if (algorithmName == "Depth_BGSubtract_CS") return new Depth_BGSubtract_CS(task);
			if (algorithmName == "Depth_Colorizer_CPP_CS") return new Depth_Colorizer_CPP_CS(task);
			if (algorithmName == "Depth_ColorMap_CS") return new Depth_ColorMap_CS(task);
			if (algorithmName == "Depth_Contour_CS") return new Depth_Contour_CS(task);
			if (algorithmName == "Depth_Dilate_CS") return new Depth_Dilate_CS(task);
			if (algorithmName == "Depth_Display_CS") return new Depth_Display_CS(task);
			if (algorithmName == "Depth_FirstLastDistance_CS") return new Depth_FirstLastDistance_CS(task);
			if (algorithmName == "Depth_Flatland_CS") return new Depth_Flatland_CS(task);
			if (algorithmName == "Depth_Foreground_CS") return new Depth_Foreground_CS(task);
			if (algorithmName == "Depth_ForegroundBlob_CS") return new Depth_ForegroundBlob_CS(task);
			if (algorithmName == "Depth_ForegroundHead_CS") return new Depth_ForegroundHead_CS(task);
			if (algorithmName == "Depth_ForegroundOverTime_CS") return new Depth_ForegroundOverTime_CS(task);
			if (algorithmName == "Depth_Grid_CS") return new Depth_Grid_CS(task);
			if (algorithmName == "Depth_Holes_CS") return new Depth_Holes_CS(task);
			if (algorithmName == "Depth_HolesOverTime_CS") return new Depth_HolesOverTime_CS(task);
			if (algorithmName == "Depth_HolesRect_CS") return new Depth_HolesRect_CS(task);
			if (algorithmName == "Depth_InRange_CS") return new Depth_InRange_CS(task);
			if (algorithmName == "Depth_LocalMinMax_MT_CS") return new Depth_LocalMinMax_MT_CS(task);
			if (algorithmName == "Depth_MaxMask_CS") return new Depth_MaxMask_CS(task);
			if (algorithmName == "Depth_MeanStdev_MT_CS") return new Depth_MeanStdev_MT_CS(task);
			if (algorithmName == "Depth_MeanStdevPlot_CS") return new Depth_MeanStdevPlot_CS(task);
			if (algorithmName == "Depth_Median_CS") return new Depth_Median_CS(task);
			if (algorithmName == "Depth_MinMaxNone_CS") return new Depth_MinMaxNone_CS(task);
			if (algorithmName == "Depth_MinMaxToVoronoi_CS") return new Depth_MinMaxToVoronoi_CS(task);
			if (algorithmName == "Depth_NotMissing_CS") return new Depth_NotMissing_CS(task);
			if (algorithmName == "Depth_Outline_CS") return new Depth_Outline_CS(task);
			if (algorithmName == "Depth_Palette_CS") return new Depth_Palette_CS(task);
			if (algorithmName == "Depth_PunchBlob_CS") return new Depth_PunchBlob_CS(task);
			if (algorithmName == "Depth_PunchBlobNew_CS") return new Depth_PunchBlobNew_CS(task);
			if (algorithmName == "Depth_PunchDecreasing_CS") return new Depth_PunchDecreasing_CS(task);
			if (algorithmName == "Depth_PunchIncreasing_CS") return new Depth_PunchIncreasing_CS(task);
			if (algorithmName == "Depth_Regions_CS") return new Depth_Regions_CS(task);
			if (algorithmName == "Depth_RGBShadow_CS") return new Depth_RGBShadow_CS(task);
			if (algorithmName == "Depth_Smoothing_CS") return new Depth_Smoothing_CS(task);
			if (algorithmName == "Depth_SmoothingMat_CS") return new Depth_SmoothingMat_CS(task);
			if (algorithmName == "Depth_StableAverage_CS") return new Depth_StableAverage_CS(task);
			if (algorithmName == "Depth_StableMax_CS") return new Depth_StableMax_CS(task);
			if (algorithmName == "Depth_StableMin_CS") return new Depth_StableMin_CS(task);
			if (algorithmName == "Depth_StableMinMax_CS") return new Depth_StableMinMax_CS(task);
			if (algorithmName == "Depth_TierCount_CS") return new Depth_TierCount_CS(task);
			if (algorithmName == "Depth_TiersZ_CS") return new Depth_TiersZ_CS(task);
			if (algorithmName == "Depth_Uncertainty_CS") return new Depth_Uncertainty_CS(task);
			if (algorithmName == "Depth_World_CS") return new Depth_World_CS(task);
			if (algorithmName == "Depth_WorldXYMT_CS") return new Depth_WorldXYMT_CS(task);
			if (algorithmName == "Depth_WorldXYZ_CS") return new Depth_WorldXYZ_CS(task);
			if (algorithmName == "Derivative_Basics_CS") return new Derivative_Basics_CS(task);
			if (algorithmName == "Derivative_Classes_CS") return new Derivative_Classes_CS(task);
			if (algorithmName == "Derivative_Laplacian_CS") return new Derivative_Laplacian_CS(task);
			if (algorithmName == "Derivative_Sobel_CS") return new Derivative_Sobel_CS(task);
			if (algorithmName == "DFT_Basics_CS") return new DFT_Basics_CS(task);
			if (algorithmName == "DFT_ButterworthDepth_CS") return new DFT_ButterworthDepth_CS(task);
			if (algorithmName == "DFT_Inverse_CS") return new DFT_Inverse_CS(task);
			if (algorithmName == "DFT_Shapes_CS") return new DFT_Shapes_CS(task);
			if (algorithmName == "Diff_Basics_CS") return new Diff_Basics_CS(task);
			if (algorithmName == "Diff_Color_CS") return new Diff_Color_CS(task);
			if (algorithmName == "Diff_Depth32f_CS") return new Diff_Depth32f_CS(task);
			if (algorithmName == "Diff_Depth32S_CS") return new Diff_Depth32S_CS(task);
			if (algorithmName == "Diff_DepthAccum_CS") return new Diff_DepthAccum_CS(task);
			if (algorithmName == "Diff_Heartbeat_CS") return new Diff_Heartbeat_CS(task);
			if (algorithmName == "Diff_Lines_CS") return new Diff_Lines_CS(task);
			if (algorithmName == "Diff_RGBAccum_CS") return new Diff_RGBAccum_CS(task);
			if (algorithmName == "Diff_UnstableDepthAndColor_CS") return new Diff_UnstableDepthAndColor_CS(task);
			if (algorithmName == "Dilate_Basics_CS") return new Dilate_Basics_CS(task);
			if (algorithmName == "Dilate_Erode_CS") return new Dilate_Erode_CS(task);
			if (algorithmName == "Dilate_OpenClose_CS") return new Dilate_OpenClose_CS(task);
			if (algorithmName == "DisparityFunction_Basics_CS") return new DisparityFunction_Basics_CS(task);
			if (algorithmName == "Distance_Background_CS") return new Distance_Background_CS(task);
			if (algorithmName == "Distance_Basics_CS") return new Distance_Basics_CS(task);
			if (algorithmName == "Distance_BinaryImage_CS") return new Distance_BinaryImage_CS(task);
			if (algorithmName == "Distance_Foreground_CS") return new Distance_Foreground_CS(task);
			if (algorithmName == "Distance_Labels_CS") return new Distance_Labels_CS(task);
			if (algorithmName == "Distance_Point3D_CS") return new Distance_Point3D_CS(task);
			if (algorithmName == "Distance_Point4D_CS") return new Distance_Point4D_CS(task);
			if (algorithmName == "Distance_RedCloud_CS") return new Distance_RedCloud_CS(task);
			if (algorithmName == "Dither_Basics_CS") return new Dither_Basics_CS(task);
			if (algorithmName == "DNN_Basics_CS") return new DNN_Basics_CS(task);
			if (algorithmName == "DNN_Caffe_CS") return new DNN_Caffe_CS(task);
			if (algorithmName == "DNN_SuperRes_CS") return new DNN_SuperRes_CS(task);
			if (algorithmName == "DNN_Test_CS") return new DNN_Test_CS(task);
			if (algorithmName == "Draw_Arc_CS") return new Draw_Arc_CS(task);
			if (algorithmName == "Draw_Circles_CS") return new Draw_Circles_CS(task);
			if (algorithmName == "Draw_ClipLine_CS") return new Draw_ClipLine_CS(task);
			if (algorithmName == "Draw_Ellipses_CS") return new Draw_Ellipses_CS(task);
			if (algorithmName == "Draw_Frustrum_CS") return new Draw_Frustrum_CS(task);
			if (algorithmName == "Draw_Line_CS") return new Draw_Line_CS(task);
			if (algorithmName == "Draw_Lines_CS") return new Draw_Lines_CS(task);
			if (algorithmName == "Draw_LineTest_CS") return new Draw_LineTest_CS(task);
			if (algorithmName == "Draw_Noise_CS") return new Draw_Noise_CS(task);
			if (algorithmName == "Draw_Polygon_CS") return new Draw_Polygon_CS(task);
			if (algorithmName == "Draw_Shapes_CS") return new Draw_Shapes_CS(task);
			if (algorithmName == "Draw_SymmetricalShapes_CS") return new Draw_SymmetricalShapes_CS(task);
			if (algorithmName == "Duster_Basics_CS") return new Duster_Basics_CS(task);
			if (algorithmName == "Duster_BasicsY_CS") return new Duster_BasicsY_CS(task);
			if (algorithmName == "Duster_MaskZ_CS") return new Duster_MaskZ_CS(task);
			if (algorithmName == "Duster_RedCloud_CS") return new Duster_RedCloud_CS(task);
			if (algorithmName == "Edge_All_CS") return new Edge_All_CS(task);
			if (algorithmName == "Edge_BackProjection_CS") return new Edge_BackProjection_CS(task);
			if (algorithmName == "Edge_BinarizedBrightness_CS") return new Edge_BinarizedBrightness_CS(task);
			if (algorithmName == "Edge_BinarizedReduction_CS") return new Edge_BinarizedReduction_CS(task);
			if (algorithmName == "Edge_Canny_CS") return new Edge_Canny_CS(task);
			if (algorithmName == "Edge_CannyCombined_CS") return new Edge_CannyCombined_CS(task);
			if (algorithmName == "Edge_CannyHistory_CS") return new Edge_CannyHistory_CS(task);
			if (algorithmName == "Edge_CannyLeftRight_CS") return new Edge_CannyLeftRight_CS(task);
			if (algorithmName == "Edge_CannyMin_CS") return new Edge_CannyMin_CS(task);
			if (algorithmName == "Edge_ColorGap_CPP_CS") return new Edge_ColorGap_CPP_CS(task);
			if (algorithmName == "Edge_ColorGap_CS") return new Edge_ColorGap_CS(task);
			if (algorithmName == "Edge_Consistent_CS") return new Edge_Consistent_CS(task);
			if (algorithmName == "Edge_DCTfrequency_CS") return new Edge_DCTfrequency_CS(task);
			if (algorithmName == "Edge_DCTinput_CS") return new Edge_DCTinput_CS(task);
			if (algorithmName == "Edge_DepthAndColor_CS") return new Edge_DepthAndColor_CS(task);
			if (algorithmName == "Edge_DepthGap_CPP_CS") return new Edge_DepthGap_CPP_CS(task);
			if (algorithmName == "Edge_DepthGap_Native_CS") return new Edge_DepthGap_Native_CS(task);
			if (algorithmName == "Edge_Deriche_CPP_CS") return new Edge_Deriche_CPP_CS(task);
			if (algorithmName == "Edge_HSV_CS") return new Edge_HSV_CS(task);
			if (algorithmName == "Edge_Laplacian_CS") return new Edge_Laplacian_CS(task);
			if (algorithmName == "Edge_Matching_CS") return new Edge_Matching_CS(task);
			if (algorithmName == "Edge_Motion_CS") return new Edge_Motion_CS(task);
			if (algorithmName == "Edge_MotionFrames_CS") return new Edge_MotionFrames_CS(task);
			if (algorithmName == "Edge_MotionOverlay_CS") return new Edge_MotionOverlay_CS(task);
			if (algorithmName == "Edge_NoDepth_CS") return new Edge_NoDepth_CS(task);
			if (algorithmName == "Edge_Preserving_CS") return new Edge_Preserving_CS(task);
			if (algorithmName == "Edge_RandomForest_CPP_CS") return new Edge_RandomForest_CPP_CS(task);
			if (algorithmName == "Edge_Reduction_CS") return new Edge_Reduction_CS(task);
			if (algorithmName == "Edge_Regions_CS") return new Edge_Regions_CS(task);
			if (algorithmName == "Edge_ResizeAdd_CS") return new Edge_ResizeAdd_CS(task);
			if (algorithmName == "Edge_RGB_CS") return new Edge_RGB_CS(task);
			if (algorithmName == "Edge_Scharr_CS") return new Edge_Scharr_CS(task);
			if (algorithmName == "Edge_Sobel_CS") return new Edge_Sobel_CS(task);
			if (algorithmName == "Edge_SobelCustom_CS") return new Edge_SobelCustom_CS(task);
			if (algorithmName == "Edge_SobelCustomH_CS") return new Edge_SobelCustomH_CS(task);
			if (algorithmName == "Edge_SobelCustomLeftRight_CS") return new Edge_SobelCustomLeftRight_CS(task);
			if (algorithmName == "Edge_SobelCustomV_CS") return new Edge_SobelCustomV_CS(task);
			if (algorithmName == "Edge_SobelHorizontal_CS") return new Edge_SobelHorizontal_CS(task);
			if (algorithmName == "Edge_SobelLR_CS") return new Edge_SobelLR_CS(task);
			if (algorithmName == "Edge_SobelLRBinarized_CS") return new Edge_SobelLRBinarized_CS(task);
			if (algorithmName == "EdgeDraw_Basics_CPP_CS") return new EdgeDraw_Basics_CPP_CS(task);
			if (algorithmName == "EdgeDraw_Segments_CPP_CS") return new EdgeDraw_Segments_CPP_CS(task);
			if (algorithmName == "Eigen_Basics_CS") return new Eigen_Basics_CS(task);
			if (algorithmName == "Eigen_Fitline_CS") return new Eigen_Fitline_CS(task);
			if (algorithmName == "Eigen_FitLineInput_CS") return new Eigen_FitLineInput_CS(task);
			if (algorithmName == "EMax_Basics_CPP_CS") return new EMax_Basics_CPP_CS(task);
			if (algorithmName == "EMax_Centers_CS") return new EMax_Centers_CS(task);
			if (algorithmName == "EMax_InputClusters_CS") return new EMax_InputClusters_CS(task);
			if (algorithmName == "EMax_PointTracker_CS") return new EMax_PointTracker_CS(task);
			if (algorithmName == "EMax_RandomClusters_CS") return new EMax_RandomClusters_CS(task);
			if (algorithmName == "EMax_VB_Failing_CS") return new EMax_VB_Failing_CS(task);
			if (algorithmName == "Encode_Basics_CS") return new Encode_Basics_CS(task);
			if (algorithmName == "Encode_Scaling_CS") return new Encode_Scaling_CS(task);
			if (algorithmName == "Entropy_Basics_CS") return new Entropy_Basics_CS(task);
			if (algorithmName == "Entropy_BinaryImage_CS") return new Entropy_BinaryImage_CS(task);
			if (algorithmName == "Entropy_FAST_CS") return new Entropy_FAST_CS(task);
			if (algorithmName == "Entropy_Highest_CS") return new Entropy_Highest_CS(task);
			if (algorithmName == "Entropy_Rectangle_CS") return new Entropy_Rectangle_CS(task);
			if (algorithmName == "Entropy_SubDivisions_CS") return new Entropy_SubDivisions_CS(task);
			if (algorithmName == "Erode_Basics_CS") return new Erode_Basics_CS(task);
			if (algorithmName == "Erode_CloudXY_CS") return new Erode_CloudXY_CS(task);
			if (algorithmName == "Erode_DepthSeed_CS") return new Erode_DepthSeed_CS(task);
			if (algorithmName == "Erode_Dilate_CS") return new Erode_Dilate_CS(task);
			if (algorithmName == "Etch_ASketch_CS") return new Etch_ASketch_CS(task);
			if (algorithmName == "Extrinsics_Basics_CS") return new Extrinsics_Basics_CS(task);
			if (algorithmName == "Extrinsics_Display_CS") return new Extrinsics_Display_CS(task);
			if (algorithmName == "Face_Haar_Alt_CS") return new Face_Haar_Alt_CS(task);
			if (algorithmName == "Face_Haar_LBP_CS") return new Face_Haar_LBP_CS(task);
			if (algorithmName == "Feature_AKaze_CS") return new Feature_AKaze_CS(task);
			if (algorithmName == "Feature_Basics_CS") return new Feature_Basics_CS(task);
			if (algorithmName == "Feature_BasicsNoFrills_CS") return new Feature_BasicsNoFrills_CS(task);
			if (algorithmName == "Feature_Compare_CS") return new Feature_Compare_CS(task);
			if (algorithmName == "Feature_Delaunay_CS") return new Feature_Delaunay_CS(task);
			if (algorithmName == "Feature_Gather_CPP_CS") return new Feature_Gather_CPP_CS(task);
			if (algorithmName == "Feature_Generations_CS") return new Feature_Generations_CS(task);
			if (algorithmName == "Feature_GridPopulation_CS") return new Feature_GridPopulation_CS(task);
			if (algorithmName == "Feature_History_CS") return new Feature_History_CS(task);
			if (algorithmName == "Feature_Kaze_CS") return new Feature_Kaze_CS(task);
			if (algorithmName == "Feature_KNN_CS") return new Feature_KNN_CS(task);
			if (algorithmName == "Feature_LeftRight_CS") return new Feature_LeftRight_CS(task);
			if (algorithmName == "Feature_LucasKanade_CS") return new Feature_LucasKanade_CS(task);
			if (algorithmName == "Feature_MultiPass_CS") return new Feature_MultiPass_CS(task);
			if (algorithmName == "Feature_NearestCell_CS") return new Feature_NearestCell_CS(task);
			if (algorithmName == "Feature_Points_CS") return new Feature_Points_CS(task);
			if (algorithmName == "Feature_PointTracker_CS") return new Feature_PointTracker_CS(task);
			if (algorithmName == "Feature_Reduction_CS") return new Feature_Reduction_CS(task);
			if (algorithmName == "Feature_Sample_CS") return new Feature_Sample_CS(task);
			if (algorithmName == "Feature_ShiTomasi_CS") return new Feature_ShiTomasi_CS(task);
			if (algorithmName == "Feature_Sift_CS") return new Feature_Sift_CS(task);
			if (algorithmName == "Feature_SiftLeftRight_CS") return new Feature_SiftLeftRight_CS(task);
			if (algorithmName == "Feature_SiftSlices_CS") return new Feature_SiftSlices_CS(task);
			if (algorithmName == "Feature_SURF_CS") return new Feature_SURF_CS(task);
			if (algorithmName == "Feature_SURF_Draw_CS") return new Feature_SURF_Draw_CS(task);
			if (algorithmName == "Feature_SURFMatch_CS") return new Feature_SURFMatch_CS(task);
			if (algorithmName == "Feature_Trace_CS") return new Feature_Trace_CS(task);
			if (algorithmName == "Feature_TraceDelaunay_CS") return new Feature_TraceDelaunay_CS(task);
			if (algorithmName == "FeatureFlow_Basics_CS") return new FeatureFlow_Basics_CS(task);
			if (algorithmName == "FeatureFlow_Dense_CS") return new FeatureFlow_Dense_CS(task);
			if (algorithmName == "FeatureFlow_LeftRight_CS") return new FeatureFlow_LeftRight_CS(task);
			if (algorithmName == "FeatureFlow_LeftRight1_CS") return new FeatureFlow_LeftRight1_CS(task);
			if (algorithmName == "FeatureFlow_LeftRightHist_CS") return new FeatureFlow_LeftRightHist_CS(task);
			if (algorithmName == "FeatureFlow_LucasKanade_CS") return new FeatureFlow_LucasKanade_CS(task);
			if (algorithmName == "FeatureLeftRight_Basics_CS") return new FeatureLeftRight_Basics_CS(task);
			if (algorithmName == "FeatureLeftRight_Grid_CS") return new FeatureLeftRight_Grid_CS(task);
			if (algorithmName == "FeatureLeftRight_Input_CS") return new FeatureLeftRight_Input_CS(task);
			if (algorithmName == "FeatureLeftRight_LeftRightPrep_CS") return new FeatureLeftRight_LeftRightPrep_CS(task);
			if (algorithmName == "FeatureLess_Basics_CS") return new FeatureLess_Basics_CS(task);
			if (algorithmName == "FeatureLess_Canny_CS") return new FeatureLess_Canny_CS(task);
			if (algorithmName == "FeatureLess_DCT_CS") return new FeatureLess_DCT_CS(task);
			if (algorithmName == "FeatureLess_Groups_CS") return new FeatureLess_Groups_CS(task);
			if (algorithmName == "FeatureLess_Histogram_CS") return new FeatureLess_Histogram_CS(task);
			if (algorithmName == "FeatureLess_History_CS") return new FeatureLess_History_CS(task);
			if (algorithmName == "FeatureLess_LeftRight_CS") return new FeatureLess_LeftRight_CS(task);
			if (algorithmName == "FeatureLess_RedCloud_CS") return new FeatureLess_RedCloud_CS(task);
			if (algorithmName == "FeatureLess_Sobel_CS") return new FeatureLess_Sobel_CS(task);
			if (algorithmName == "FeatureLess_Unique3Pixels_CS") return new FeatureLess_Unique3Pixels_CS(task);
			if (algorithmName == "FeatureLess_UniquePixels_CS") return new FeatureLess_UniquePixels_CS(task);
			if (algorithmName == "FeatureLine_Basics_CS") return new FeatureLine_Basics_CS(task);
			if (algorithmName == "FeatureLine_DetailsAll_CS") return new FeatureLine_DetailsAll_CS(task);
			if (algorithmName == "FeatureLine_Finder_CS") return new FeatureLine_Finder_CS(task);
			if (algorithmName == "FeatureLine_Longest_CS") return new FeatureLine_Longest_CS(task);
			if (algorithmName == "FeatureLine_LongestKNN_CS") return new FeatureLine_LongestKNN_CS(task);
			if (algorithmName == "FeatureLine_LongestV_Tutorial1_CS") return new FeatureLine_LongestV_Tutorial1_CS(task);
			if (algorithmName == "FeatureLine_LongestV_Tutorial2_CS") return new FeatureLine_LongestV_Tutorial2_CS(task);
			if (algorithmName == "FeatureLine_LongestVerticalKNN_CS") return new FeatureLine_LongestVerticalKNN_CS(task);
			if (algorithmName == "FeatureLine_Tutorial1_CS") return new FeatureLine_Tutorial1_CS(task);
			if (algorithmName == "FeatureLine_Tutorial2_CS") return new FeatureLine_Tutorial2_CS(task);
			if (algorithmName == "FeatureLine_VerticalLongLine_CS") return new FeatureLine_VerticalLongLine_CS(task);
			if (algorithmName == "FeatureLine_VerticalVerify_CS") return new FeatureLine_VerticalVerify_CS(task);
			if (algorithmName == "FeatureLine_VH_CS") return new FeatureLine_VH_CS(task);
			if (algorithmName == "FeaturePoly_Basics_CS") return new FeaturePoly_Basics_CS(task);
			if (algorithmName == "FeaturePoly_BasicsOriginal_CS") return new FeaturePoly_BasicsOriginal_CS(task);
			if (algorithmName == "FeaturePoly_Center_CS") return new FeaturePoly_Center_CS(task);
			if (algorithmName == "FeaturePoly_Core_CS") return new FeaturePoly_Core_CS(task);
			if (algorithmName == "FeaturePoly_EdgeRemoval_CS") return new FeaturePoly_EdgeRemoval_CS(task);
			if (algorithmName == "FeaturePoly_Image_CS") return new FeaturePoly_Image_CS(task);
			if (algorithmName == "FeaturePoly_ImageMask_CS") return new FeaturePoly_ImageMask_CS(task);
			if (algorithmName == "FeaturePoly_ImageNew_CS") return new FeaturePoly_ImageNew_CS(task);
			if (algorithmName == "FeaturePoly_LeftRight_CS") return new FeaturePoly_LeftRight_CS(task);
			if (algorithmName == "FeaturePoly_Perpendiculars_CS") return new FeaturePoly_Perpendiculars_CS(task);
			if (algorithmName == "FeaturePoly_PerpendicularsImage_CS") return new FeaturePoly_PerpendicularsImage_CS(task);
			if (algorithmName == "FeaturePoly_PerpendicularsTest_CS") return new FeaturePoly_PerpendicularsTest_CS(task);
			if (algorithmName == "FeaturePoly_Plot_CS") return new FeaturePoly_Plot_CS(task);
			if (algorithmName == "FeaturePoly_PlotWeighted_CS") return new FeaturePoly_PlotWeighted_CS(task);
			if (algorithmName == "FeaturePoly_PointCloud_CS") return new FeaturePoly_PointCloud_CS(task);
			if (algorithmName == "FeaturePoly_ResyncCheck_CS") return new FeaturePoly_ResyncCheck_CS(task);
			if (algorithmName == "FeaturePoly_RotatePoints_CS") return new FeaturePoly_RotatePoints_CS(task);
			if (algorithmName == "FeaturePoly_Sides_CS") return new FeaturePoly_Sides_CS(task);
			if (algorithmName == "FeaturePoly_Stablizer_CS") return new FeaturePoly_Stablizer_CS(task);
			if (algorithmName == "FeaturePoly_StartPoints_CS") return new FeaturePoly_StartPoints_CS(task);
			if (algorithmName == "FeaturePoly_TopFeatures_CS") return new FeaturePoly_TopFeatures_CS(task);
			if (algorithmName == "FeaturePoly_Triangle_CS") return new FeaturePoly_Triangle_CS(task);
			if (algorithmName == "FeaturePoly_WarpAffineImage_CS") return new FeaturePoly_WarpAffineImage_CS(task);
			if (algorithmName == "FeaturePoly_WarpAffinePoly_CS") return new FeaturePoly_WarpAffinePoly_CS(task);
			if (algorithmName == "FeatureROI_Basics_CS") return new FeatureROI_Basics_CS(task);
			if (algorithmName == "FeatureROI_Canny_CS") return new FeatureROI_Canny_CS(task);
			if (algorithmName == "FeatureROI_Color_CS") return new FeatureROI_Color_CS(task);
			if (algorithmName == "FeatureROI_ColorSplit_CS") return new FeatureROI_ColorSplit_CS(task);
			if (algorithmName == "FeatureROI_Correlation_CS") return new FeatureROI_Correlation_CS(task);
			if (algorithmName == "FeatureROI_LowStdev_CS") return new FeatureROI_LowStdev_CS(task);
			if (algorithmName == "FeatureROI_LowStdevCorrelation_CS") return new FeatureROI_LowStdevCorrelation_CS(task);
			if (algorithmName == "FeatureROI_LR_CS") return new FeatureROI_LR_CS(task);
			if (algorithmName == "FeatureROI_LRAll_CS") return new FeatureROI_LRAll_CS(task);
			if (algorithmName == "FeatureROI_LRClick_CS") return new FeatureROI_LRClick_CS(task);
			if (algorithmName == "FeatureROI_Sorted_CS") return new FeatureROI_Sorted_CS(task);
			if (algorithmName == "Fibonacci_Basics_CS") return new Fibonacci_Basics_CS(task);
			if (algorithmName == "Fibonacci_Yield_CS") return new Fibonacci_Yield_CS(task);
			if (algorithmName == "Filter_Laplacian_CS") return new Filter_Laplacian_CS(task);
			if (algorithmName == "Filter_Maximum_CS") return new Filter_Maximum_CS(task);
			if (algorithmName == "Filter_Mean_CS") return new Filter_Mean_CS(task);
			if (algorithmName == "Filter_Median_CS") return new Filter_Median_CS(task);
			if (algorithmName == "Filter_Minimum_CS") return new Filter_Minimum_CS(task);
			if (algorithmName == "Filter_Normalized2D_CS") return new Filter_Normalized2D_CS(task);
			if (algorithmName == "Filter_NormalizedKernel_CS") return new Filter_NormalizedKernel_CS(task);
			if (algorithmName == "Filter_SepFilter2D_CS") return new Filter_SepFilter2D_CS(task);
			if (algorithmName == "FitEllipse_AMS_CPP_CS") return new FitEllipse_AMS_CPP_CS(task);
			if (algorithmName == "FitEllipse_Basics_CS") return new FitEllipse_Basics_CS(task);
			if (algorithmName == "FitEllipse_Direct_CPP_CS") return new FitEllipse_Direct_CPP_CS(task);
			if (algorithmName == "FitEllipse_RedCloud_CS") return new FitEllipse_RedCloud_CS(task);
			if (algorithmName == "FitLine_Basics_CS") return new FitLine_Basics_CS(task);
			if (algorithmName == "FitLine_Basics3D_CS") return new FitLine_Basics3D_CS(task);
			if (algorithmName == "FLANN_Basics_CS") return new FLANN_Basics_CS(task);
			if (algorithmName == "FLANN_Test_CS") return new FLANN_Test_CS(task);
			if (algorithmName == "Flip_Basics_CS") return new Flip_Basics_CS(task);
			if (algorithmName == "Flood_Basics_CS") return new Flood_Basics_CS(task);
			if (algorithmName == "Flood_BasicsMask_CS") return new Flood_BasicsMask_CS(task);
			if (algorithmName == "Flood_CellStatsPlot_CS") return new Flood_CellStatsPlot_CS(task);
			if (algorithmName == "Flood_ContainedCells_CS") return new Flood_ContainedCells_CS(task);
			if (algorithmName == "Flood_LeftRight_CS") return new Flood_LeftRight_CS(task);
			if (algorithmName == "Flood_MaxDistPoints_CS") return new Flood_MaxDistPoints_CS(task);
			if (algorithmName == "Flood_Motion_CS") return new Flood_Motion_CS(task);
			if (algorithmName == "Flood_Motion1_CS") return new Flood_Motion1_CS(task);
			if (algorithmName == "Flood_Tiers_CS") return new Flood_Tiers_CS(task);
			if (algorithmName == "Font_FlowText_CS") return new Font_FlowText_CS(task);
			if (algorithmName == "Font_FlowTextOld_CS") return new Font_FlowTextOld_CS(task);
			if (algorithmName == "Font_OpenCV_CS") return new Font_OpenCV_CS(task);
			if (algorithmName == "Foreground_Basics_CS") return new Foreground_Basics_CS(task);
			if (algorithmName == "Foreground_CellsBack_CS") return new Foreground_CellsBack_CS(task);
			if (algorithmName == "Foreground_CellsFore_CS") return new Foreground_CellsFore_CS(task);
			if (algorithmName == "Foreground_Contours_CS") return new Foreground_Contours_CS(task);
			if (algorithmName == "Foreground_Hist3D_CS") return new Foreground_Hist3D_CS(task);
			if (algorithmName == "Foreground_KMeans2_CS") return new Foreground_KMeans2_CS(task);
			if (algorithmName == "Foreground_RedCloud_CS") return new Foreground_RedCloud_CS(task);
			if (algorithmName == "Fractal_Dimension_CS") return new Fractal_Dimension_CS(task);
			if (algorithmName == "Fractal_Julia_CS") return new Fractal_Julia_CS(task);
			if (algorithmName == "Fractal_Mandelbrot_CS") return new Fractal_Mandelbrot_CS(task);
			if (algorithmName == "Fractal_MandelbrotZoom_CS") return new Fractal_MandelbrotZoom_CS(task);
			if (algorithmName == "Fractal_MandelbrotZoomColor_CS") return new Fractal_MandelbrotZoomColor_CS(task);
			if (algorithmName == "FrameRate_Basics_CS") return new FrameRate_Basics_CS(task);
			if (algorithmName == "FrameRate_BasicsGray_CS") return new FrameRate_BasicsGray_CS(task);
			if (algorithmName == "FREAK_Basics_CS") return new FREAK_Basics_CS(task);
			if (algorithmName == "Fuzzy_Basics_CPP_CS") return new Fuzzy_Basics_CPP_CS(task);
			if (algorithmName == "Fuzzy_ContoursDepth_CS") return new Fuzzy_ContoursDepth_CS(task);
			if (algorithmName == "Fuzzy_Filter_CS") return new Fuzzy_Filter_CS(task);
			if (algorithmName == "Fuzzy_NeighborProof_CS") return new Fuzzy_NeighborProof_CS(task);
			if (algorithmName == "Fuzzy_TrackerDepth_CS") return new Fuzzy_TrackerDepth_CS(task);
			if (algorithmName == "Fuzzy_TrackerDepthClick_CS") return new Fuzzy_TrackerDepthClick_CS(task);
			if (algorithmName == "Gabor_Basics_CS") return new Gabor_Basics_CS(task);
			if (algorithmName == "GrabCut_Basics_CS") return new GrabCut_Basics_CS(task);
			if (algorithmName == "GrabCut_FineTune_CS") return new GrabCut_FineTune_CS(task);
			if (algorithmName == "GrabCut_ImageMask_CS") return new GrabCut_ImageMask_CS(task);
			if (algorithmName == "GrabCut_ImageRect_CS") return new GrabCut_ImageRect_CS(task);
			if (algorithmName == "Gradient_Basics_CS") return new Gradient_Basics_CS(task);
			if (algorithmName == "Gradient_CartToPolar_CS") return new Gradient_CartToPolar_CS(task);
			if (algorithmName == "Gradient_Color_CS") return new Gradient_Color_CS(task);
			if (algorithmName == "Gradient_Depth_CS") return new Gradient_Depth_CS(task);
			if (algorithmName == "Gravity_Basics_CS") return new Gravity_Basics_CS(task);
			if (algorithmName == "Gravity_BasicsOriginal_CS") return new Gravity_BasicsOriginal_CS(task);
			if (algorithmName == "Gravity_Horizon_CS") return new Gravity_Horizon_CS(task);
			if (algorithmName == "Gravity_HorizonCompare_CS") return new Gravity_HorizonCompare_CS(task);
			if (algorithmName == "GrayToColor_Palette_CS") return new GrayToColor_Palette_CS(task);
			if (algorithmName == "Grid_Basics_CS") return new Grid_Basics_CS(task);
			if (algorithmName == "Grid_BasicsTest_CS") return new Grid_BasicsTest_CS(task);
			if (algorithmName == "Grid_FPS_CS") return new Grid_FPS_CS(task);
			if (algorithmName == "Grid_List_CS") return new Grid_List_CS(task);
			if (algorithmName == "Grid_MinMaxDepth_CS") return new Grid_MinMaxDepth_CS(task);
			if (algorithmName == "Grid_Neighbors_CS") return new Grid_Neighbors_CS(task);
			if (algorithmName == "Grid_QuarterRes_CS") return new Grid_QuarterRes_CS(task);
			if (algorithmName == "Grid_Rectangles_CS") return new Grid_Rectangles_CS(task);
			if (algorithmName == "Grid_ShowMap_CS") return new Grid_ShowMap_CS(task);
			if (algorithmName == "Grid_Special_CS") return new Grid_Special_CS(task);
			if (algorithmName == "Grid_TrackCenter_CS") return new Grid_TrackCenter_CS(task);
			if (algorithmName == "Guess_Depth_CPP_CS") return new Guess_Depth_CPP_CS(task);
			if (algorithmName == "Guess_ImageEdges_CPP_CS") return new Guess_ImageEdges_CPP_CS(task);
			if (algorithmName == "GuidedBP_Basics_CS") return new GuidedBP_Basics_CS(task);
			if (algorithmName == "GuidedBP_Depth_CS") return new GuidedBP_Depth_CS(task);
			if (algorithmName == "GuidedBP_HotPoints_CS") return new GuidedBP_HotPoints_CS(task);
			if (algorithmName == "GuidedBP_HotPointsKNN_CS") return new GuidedBP_HotPointsKNN_CS(task);
			if (algorithmName == "GuidedBP_Lookup_CS") return new GuidedBP_Lookup_CS(task);
			if (algorithmName == "GuidedBP_PlanesPlot_CS") return new GuidedBP_PlanesPlot_CS(task);
			if (algorithmName == "GuidedBP_Points_CS") return new GuidedBP_Points_CS(task);
			if (algorithmName == "HeatMap_Basics_CS") return new HeatMap_Basics_CS(task);
			if (algorithmName == "HeatMap_Cell_CS") return new HeatMap_Cell_CS(task);
			if (algorithmName == "HeatMap_Grid_CS") return new HeatMap_Grid_CS(task);
			if (algorithmName == "HeatMap_GuidedBP_CS") return new HeatMap_GuidedBP_CS(task);
			if (algorithmName == "HeatMap_Hot_CS") return new HeatMap_Hot_CS(task);
			if (algorithmName == "HeatMap_HotNot_CS") return new HeatMap_HotNot_CS(task);
			if (algorithmName == "Hist_Basics_CS") return new Hist_Basics_CS(task);
			if (algorithmName == "Hist_Byte_CPP_CS") return new Hist_Byte_CPP_CS(task);
			if (algorithmName == "Hist_Cell_CS") return new Hist_Cell_CS(task);
			if (algorithmName == "Hist_Color_CS") return new Hist_Color_CS(task);
			if (algorithmName == "Hist_ColorsAndGray_CS") return new Hist_ColorsAndGray_CS(task);
			if (algorithmName == "Hist_CompareEMD_hsv_CS") return new Hist_CompareEMD_hsv_CS(task);
			if (algorithmName == "Hist_CompareGray_CS") return new Hist_CompareGray_CS(task);
			if (algorithmName == "Hist_CompareNumber_CS") return new Hist_CompareNumber_CS(task);
			if (algorithmName == "Hist_ComparePlot_CS") return new Hist_ComparePlot_CS(task);
			if (algorithmName == "Hist_Depth_CS") return new Hist_Depth_CS(task);
			if (algorithmName == "Hist_EqualizeColor_CS") return new Hist_EqualizeColor_CS(task);
			if (algorithmName == "Hist_EqualizeGray_CS") return new Hist_EqualizeGray_CS(task);
			if (algorithmName == "Hist_FlatSurfaces_CS") return new Hist_FlatSurfaces_CS(task);
			if (algorithmName == "Hist_Frustrum_CS") return new Hist_Frustrum_CS(task);
			if (algorithmName == "Hist_Gotcha_CS") return new Hist_Gotcha_CS(task);
			if (algorithmName == "Hist_Gotcha2D_CS") return new Hist_Gotcha2D_CS(task);
			if (algorithmName == "Hist_GotchaFixed_CPP_CS") return new Hist_GotchaFixed_CPP_CS(task);
			if (algorithmName == "Hist_Graph_CS") return new Hist_Graph_CS(task);
			if (algorithmName == "Hist_Grayscale_CS") return new Hist_Grayscale_CS(task);
			if (algorithmName == "Hist_Kalman_CS") return new Hist_Kalman_CS(task);
			if (algorithmName == "Hist_KalmanAuto_CS") return new Hist_KalmanAuto_CS(task);
			if (algorithmName == "Hist_Lab_CS") return new Hist_Lab_CS(task);
			if (algorithmName == "Hist_NormalizeGray_CS") return new Hist_NormalizeGray_CS(task);
			if (algorithmName == "Hist_PeakFinder_CS") return new Hist_PeakFinder_CS(task);
			if (algorithmName == "Hist_PeakMax_CS") return new Hist_PeakMax_CS(task);
			if (algorithmName == "Hist_Peaks_CS") return new Hist_Peaks_CS(task);
			if (algorithmName == "Hist_PeaksDepth_CS") return new Hist_PeaksDepth_CS(task);
			if (algorithmName == "Hist_PeaksRGB_CS") return new Hist_PeaksRGB_CS(task);
			if (algorithmName == "Hist_PointCloud_CS") return new Hist_PointCloud_CS(task);
			if (algorithmName == "Hist_PointCloudXYZ_CS") return new Hist_PointCloudXYZ_CS(task);
			if (algorithmName == "Hist_ShapeSide_CS") return new Hist_ShapeSide_CS(task);
			if (algorithmName == "Hist_ShapeTop_CS") return new Hist_ShapeTop_CS(task);
			if (algorithmName == "Hist_Simple_CS") return new Hist_Simple_CS(task);
			if (algorithmName == "Hist_Xdimension_CS") return new Hist_Xdimension_CS(task);
			if (algorithmName == "Hist_Ydimension_CS") return new Hist_Ydimension_CS(task);
			if (algorithmName == "Hist_Zdimension_CS") return new Hist_Zdimension_CS(task);
			if (algorithmName == "Hist2D_Basics_CS") return new Hist2D_Basics_CS(task);
			if (algorithmName == "Hist2D_BGR_CS") return new Hist2D_BGR_CS(task);
			if (algorithmName == "Hist2D_Cloud_CS") return new Hist2D_Cloud_CS(task);
			if (algorithmName == "Hist2D_Depth_CS") return new Hist2D_Depth_CS(task);
			if (algorithmName == "Hist2D_HSV_CS") return new Hist2D_HSV_CS(task);
			if (algorithmName == "Hist2D_PlotHistogram1D_CS") return new Hist2D_PlotHistogram1D_CS(task);
			if (algorithmName == "Hist2D_Zoom_CS") return new Hist2D_Zoom_CS(task);
			if (algorithmName == "Hist3D_Basics_CS") return new Hist3D_Basics_CS(task);
			if (algorithmName == "Hist3D_BuildHistogram_CS") return new Hist3D_BuildHistogram_CS(task);
			if (algorithmName == "Hist3D_DepthWithMask_CS") return new Hist3D_DepthWithMask_CS(task);
			if (algorithmName == "Hist3D_Pixel_CS") return new Hist3D_Pixel_CS(task);
			if (algorithmName == "Hist3D_PixelCells_CS") return new Hist3D_PixelCells_CS(task);
			if (algorithmName == "Hist3D_PixelClassify_CS") return new Hist3D_PixelClassify_CS(task);
			if (algorithmName == "Hist3D_PixelDiffMask_CS") return new Hist3D_PixelDiffMask_CS(task);
			if (algorithmName == "Hist3D_RedCloud_CS") return new Hist3D_RedCloud_CS(task);
			if (algorithmName == "Hist3D_RedCloudGrid_CS") return new Hist3D_RedCloudGrid_CS(task);
			if (algorithmName == "Hist3D_RedColor_CS") return new Hist3D_RedColor_CS(task);
			if (algorithmName == "Hist3Dcloud_Basics_CS") return new Hist3Dcloud_Basics_CS(task);
			if (algorithmName == "Hist3Dcloud_BP_Filter_CPP_CS") return new Hist3Dcloud_BP_Filter_CPP_CS(task);
			if (algorithmName == "Hist3Dcloud_DepthSplit_CS") return new Hist3Dcloud_DepthSplit_CS(task);
			if (algorithmName == "Hist3Dcloud_Highlights_CPP_CS") return new Hist3Dcloud_Highlights_CPP_CS(task);
			if (algorithmName == "Hist3Dcloud_PlotHist1D_CS") return new Hist3Dcloud_PlotHist1D_CS(task);
			if (algorithmName == "Hist3Dcolor_Basics_CPP_CS") return new Hist3Dcolor_Basics_CPP_CS(task);
			if (algorithmName == "Hist3Dcolor_Basics_CS") return new Hist3Dcolor_Basics_CS(task);
			if (algorithmName == "Hist3Dcolor_Diff_CS") return new Hist3Dcolor_Diff_CS(task);
			if (algorithmName == "Hist3Dcolor_PlotHist1D_CS") return new Hist3Dcolor_PlotHist1D_CS(task);
			if (algorithmName == "Hist3Dcolor_Reduction_CS") return new Hist3Dcolor_Reduction_CS(task);
			if (algorithmName == "Hist3Dcolor_Select_CS") return new Hist3Dcolor_Select_CS(task);
			if (algorithmName == "Hist3Dcolor_TopXColors_CS") return new Hist3Dcolor_TopXColors_CS(task);
			if (algorithmName == "Hist3Dcolor_UniqueRGBPixels_CS") return new Hist3Dcolor_UniqueRGBPixels_CS(task);
			if (algorithmName == "Hist3Dcolor_Vector_CS") return new Hist3Dcolor_Vector_CS(task);
			if (algorithmName == "Hist3Dcolor_ZeroGroups_CS") return new Hist3Dcolor_ZeroGroups_CS(task);
			if (algorithmName == "History_Basics_CS") return new History_Basics_CS(task);
			if (algorithmName == "History_BasicsDiff_CS") return new History_BasicsDiff_CS(task);
			if (algorithmName == "History_BasicsNoSaturation_CS") return new History_BasicsNoSaturation_CS(task);
			if (algorithmName == "History_Cloud_CS") return new History_Cloud_CS(task);
			if (algorithmName == "History_MotionRect_CS") return new History_MotionRect_CS(task);
			if (algorithmName == "HistPeak2D_Basics_CS") return new HistPeak2D_Basics_CS(task);
			if (algorithmName == "HistPeak2D_BGR_CS") return new HistPeak2D_BGR_CS(task);
			if (algorithmName == "HistPeak2D_Edges_CS") return new HistPeak2D_Edges_CS(task);
			if (algorithmName == "HistPeak2D_HotSide_CS") return new HistPeak2D_HotSide_CS(task);
			if (algorithmName == "HistPeak2D_HotTop_CS") return new HistPeak2D_HotTop_CS(task);
			if (algorithmName == "HistPeak2D_HSV_CS") return new HistPeak2D_HSV_CS(task);
			if (algorithmName == "HistPeak2D_NotHotTop_CS") return new HistPeak2D_NotHotTop_CS(task);
			if (algorithmName == "HistPeak2D_RGB_CS") return new HistPeak2D_RGB_CS(task);
			if (algorithmName == "HistPeak2D_TopAndSide_CS") return new HistPeak2D_TopAndSide_CS(task);
			if (algorithmName == "HistValley_Basics_CS") return new HistValley_Basics_CS(task);
			if (algorithmName == "HistValley_Colors_CS") return new HistValley_Colors_CS(task);
			if (algorithmName == "HistValley_Depth_CS") return new HistValley_Depth_CS(task);
			if (algorithmName == "HistValley_Depth1_CS") return new HistValley_Depth1_CS(task);
			if (algorithmName == "HistValley_Diff_CS") return new HistValley_Diff_CS(task);
			if (algorithmName == "HistValley_EdgeDraw_CS") return new HistValley_EdgeDraw_CS(task);
			if (algorithmName == "HistValley_FromPeaks_CS") return new HistValley_FromPeaks_CS(task);
			if (algorithmName == "HistValley_GrayKalman_CS") return new HistValley_GrayKalman_CS(task);
			if (algorithmName == "HistValley_GrayScale1_CS") return new HistValley_GrayScale1_CS(task);
			if (algorithmName == "HistValley_OptionsAuto_CS") return new HistValley_OptionsAuto_CS(task);
			if (algorithmName == "HistValley_Peaks_CS") return new HistValley_Peaks_CS(task);
			if (algorithmName == "HistValley_Simple_CS") return new HistValley_Simple_CS(task);
			if (algorithmName == "HistValley_Test_CS") return new HistValley_Test_CS(task);
			if (algorithmName == "HistValley_Tiers_CS") return new HistValley_Tiers_CS(task);
			if (algorithmName == "HMM_Example_CPP_CS") return new HMM_Example_CPP_CS(task);
			if (algorithmName == "HOG_Basics_CS") return new HOG_Basics_CS(task);
			if (algorithmName == "Homography_Basics_CS") return new Homography_Basics_CS(task);
			if (algorithmName == "Homography_FPoly_CS") return new Homography_FPoly_CS(task);
			if (algorithmName == "Horizon_Basics_CS") return new Horizon_Basics_CS(task);
			if (algorithmName == "Horizon_BasicsAlt_CS") return new Horizon_BasicsAlt_CS(task);
			if (algorithmName == "Horizon_ExternalTest_CS") return new Horizon_ExternalTest_CS(task);
			if (algorithmName == "Horizon_FindNonZero_CS") return new Horizon_FindNonZero_CS(task);
			if (algorithmName == "Horizon_FindNonZeroOld_CS") return new Horizon_FindNonZeroOld_CS(task);
			if (algorithmName == "Horizon_Perpendicular_CS") return new Horizon_Perpendicular_CS(task);
			if (algorithmName == "Horizon_Regress_CS") return new Horizon_Regress_CS(task);
			if (algorithmName == "Horizon_UnstableResults_CS") return new Horizon_UnstableResults_CS(task);
			if (algorithmName == "Horizon_Validate_CS") return new Horizon_Validate_CS(task);
			if (algorithmName == "Hough_Basics_CS") return new Hough_Basics_CS(task);
			if (algorithmName == "Hough_Circles_CS") return new Hough_Circles_CS(task);
			if (algorithmName == "Hough_Featureless_CS") return new Hough_Featureless_CS(task);
			if (algorithmName == "Hough_FeatureLessTopX_CS") return new Hough_FeatureLessTopX_CS(task);
			if (algorithmName == "Hough_LaneFinder_CS") return new Hough_LaneFinder_CS(task);
			if (algorithmName == "Hough_Lines_MT_CS") return new Hough_Lines_MT_CS(task);
			if (algorithmName == "Hough_Sudoku_CS") return new Hough_Sudoku_CS(task);
			if (algorithmName == "Hull_Basics_CS") return new Hull_Basics_CS(task);
			if (algorithmName == "Hull_Contour_CS") return new Hull_Contour_CS(task);
			if (algorithmName == "Image_Basics_CS") return new Image_Basics_CS(task);
			if (algorithmName == "Image_CellStats_CS") return new Image_CellStats_CS(task);
			if (algorithmName == "Image_MSER_CS") return new Image_MSER_CS(task);
			if (algorithmName == "Image_RedCloudColor_CS") return new Image_RedCloudColor_CS(task);
			if (algorithmName == "Image_Series_CS") return new Image_Series_CS(task);
			if (algorithmName == "ImShow_Basics_CS") return new ImShow_Basics_CS(task);
			if (algorithmName == "ImShow_CV32FC3_CS") return new ImShow_CV32FC3_CS(task);
			if (algorithmName == "ImShow_WaitKey_CS") return new ImShow_WaitKey_CS(task);
			if (algorithmName == "IMU_AllMethods_CS") return new IMU_AllMethods_CS(task);
			if (algorithmName == "IMU_Average_CS") return new IMU_Average_CS(task);
			if (algorithmName == "IMU_Basics_CS") return new IMU_Basics_CS(task);
			if (algorithmName == "IMU_BasicsKalman_CS") return new IMU_BasicsKalman_CS(task);
			if (algorithmName == "IMU_BasicsWithOptions_CS") return new IMU_BasicsWithOptions_CS(task);
			if (algorithmName == "IMU_GMatrix_CS") return new IMU_GMatrix_CS(task);
			if (algorithmName == "IMU_GMatrixWithOptions_CS") return new IMU_GMatrixWithOptions_CS(task);
			if (algorithmName == "IMU_IscameraStable_CS") return new IMU_IscameraStable_CS(task);
			if (algorithmName == "IMU_Kalman_CS") return new IMU_Kalman_CS(task);
			if (algorithmName == "IMU_Lines_CS") return new IMU_Lines_CS(task);
			if (algorithmName == "IMU_Plot_CS") return new IMU_Plot_CS(task);
			if (algorithmName == "IMU_PlotAcceleration_CS") return new IMU_PlotAcceleration_CS(task);
			if (algorithmName == "IMU_PlotAngularVelocity_CS") return new IMU_PlotAngularVelocity_CS(task);
			if (algorithmName == "IMU_PlotCompareIMU_CS") return new IMU_PlotCompareIMU_CS(task);
			if (algorithmName == "IMU_PlotGravityAngles_CS") return new IMU_PlotGravityAngles_CS(task);
			if (algorithmName == "IMU_PlotHostFrameScalar_CS") return new IMU_PlotHostFrameScalar_CS(task);
			if (algorithmName == "IMU_PlotHostFrameTimes_CS") return new IMU_PlotHostFrameTimes_CS(task);
			if (algorithmName == "IMU_PlotIMUFrameTime_CS") return new IMU_PlotIMUFrameTime_CS(task);
			if (algorithmName == "IMU_PlotTotalDelay_CS") return new IMU_PlotTotalDelay_CS(task);
			if (algorithmName == "IMU_Stabilize_CS") return new IMU_Stabilize_CS(task);
			if (algorithmName == "IMU_VelocityPlot_CS") return new IMU_VelocityPlot_CS(task);
			if (algorithmName == "IMU_VerticalAngles_CS") return new IMU_VerticalAngles_CS(task);
			if (algorithmName == "IMU_VerticalVerify_CS") return new IMU_VerticalVerify_CS(task);
			if (algorithmName == "InPaint_Basics_CS") return new InPaint_Basics_CS(task);
			if (algorithmName == "InPaint_Depth_CS") return new InPaint_Depth_CS(task);
			if (algorithmName == "InPaint_Noise_CS") return new InPaint_Noise_CS(task);
			if (algorithmName == "Interpolate_Basics_CS") return new Interpolate_Basics_CS(task);
			if (algorithmName == "Interpolate_Difference_CS") return new Interpolate_Difference_CS(task);
			if (algorithmName == "Interpolate_Kalman_CS") return new Interpolate_Kalman_CS(task);
			if (algorithmName == "Interpolate_Lines_CS") return new Interpolate_Lines_CS(task);
			if (algorithmName == "Interpolate_QuarterBeat_CS") return new Interpolate_QuarterBeat_CS(task);
			if (algorithmName == "Kalman_Basics_CS") return new Kalman_Basics_CS(task);
			if (algorithmName == "Kalman_Compare_CS") return new Kalman_Compare_CS(task);
			if (algorithmName == "Kalman_CSharp_Basics_CS") return new Kalman_CSharp_Basics_CS(task);
			if (algorithmName == "Kalman_CVMat_CS") return new Kalman_CVMat_CS(task);
			if (algorithmName == "Kalman_Depth32f_CS") return new Kalman_Depth32f_CS(task);
			if (algorithmName == "Kalman_DepthSmall_CS") return new Kalman_DepthSmall_CS(task);
			if (algorithmName == "Kalman_ImageSmall_CS") return new Kalman_ImageSmall_CS(task);
			if (algorithmName == "Kalman_MousePredict_CS") return new Kalman_MousePredict_CS(task);
			if (algorithmName == "Kalman_RotatingPoint_CS") return new Kalman_RotatingPoint_CS(task);
			if (algorithmName == "Kalman_Single_CS") return new Kalman_Single_CS(task);
			if (algorithmName == "KLT_Basics_CS") return new KLT_Basics_CS(task);
			if (algorithmName == "KLT_OpticalFlow_CS") return new KLT_OpticalFlow_CS(task);
			if (algorithmName == "KMeans_Basics_CS") return new KMeans_Basics_CS(task);
			if (algorithmName == "KMeans_CompareMulti_CS") return new KMeans_CompareMulti_CS(task);
			if (algorithmName == "KMeans_CustomData_CS") return new KMeans_CustomData_CS(task);
			if (algorithmName == "KMeans_Depth_CS") return new KMeans_Depth_CS(task);
			if (algorithmName == "KMeans_DepthPlusGray_CS") return new KMeans_DepthPlusGray_CS(task);
			if (algorithmName == "KMeans_Dimensions_CS") return new KMeans_Dimensions_CS(task);
			if (algorithmName == "KMeans_Edges_CS") return new KMeans_Edges_CS(task);
			if (algorithmName == "KMeans_Fuzzy_CS") return new KMeans_Fuzzy_CS(task);
			if (algorithmName == "KMeans_Image_CS") return new KMeans_Image_CS(task);
			if (algorithmName == "KMeans_k2_to_k8_CS") return new KMeans_k2_to_k8_CS(task);
			if (algorithmName == "KMeans_MultiChannel_CS") return new KMeans_MultiChannel_CS(task);
			if (algorithmName == "KMeans_MultiGaussian_CS") return new KMeans_MultiGaussian_CS(task);
			if (algorithmName == "KMeans_SimKColor_CS") return new KMeans_SimKColor_CS(task);
			if (algorithmName == "KMeans_SimKDepth_CS") return new KMeans_SimKDepth_CS(task);
			if (algorithmName == "KMeans_Simple_CPP_CS") return new KMeans_Simple_CPP_CS(task);
			if (algorithmName == "KMeans_TierCount_CS") return new KMeans_TierCount_CS(task);
			if (algorithmName == "KMeans_Valleys_CS") return new KMeans_Valleys_CS(task);
			if (algorithmName == "KNN_Basics_CS") return new KNN_Basics_CS(task);
			if (algorithmName == "KNN_BasicsOld_CS") return new KNN_BasicsOld_CS(task);
			if (algorithmName == "KNN_ClosestLine_CS") return new KNN_ClosestLine_CS(task);
			if (algorithmName == "KNN_ClosestTracker_CS") return new KNN_ClosestTracker_CS(task);
			if (algorithmName == "KNN_ClosestVertical_CS") return new KNN_ClosestVertical_CS(task);
			if (algorithmName == "KNN_Core_CS") return new KNN_Core_CS(task);
			if (algorithmName == "KNN_Core2DTest_CS") return new KNN_Core2DTest_CS(task);
			if (algorithmName == "KNN_Core3D_CS") return new KNN_Core3D_CS(task);
			if (algorithmName == "KNN_Core3DTest_CS") return new KNN_Core3DTest_CS(task);
			if (algorithmName == "KNN_Core4D_CS") return new KNN_Core4D_CS(task);
			if (algorithmName == "KNN_Core4DTest_CS") return new KNN_Core4DTest_CS(task);
			if (algorithmName == "KNN_CoreN_CS") return new KNN_CoreN_CS(task);
			if (algorithmName == "KNN_CoreNTest_CS") return new KNN_CoreNTest_CS(task);
			if (algorithmName == "KNN_Emax_CS") return new KNN_Emax_CS(task);
			if (algorithmName == "KNN_Farthest_CS") return new KNN_Farthest_CS(task);
			if (algorithmName == "KNN_TrackEach_CS") return new KNN_TrackEach_CS(task);
			if (algorithmName == "KNN_TrackMean_CS") return new KNN_TrackMean_CS(task);
			if (algorithmName == "LaneFinder_Basics_CS") return new LaneFinder_Basics_CS(task);
			if (algorithmName == "LaneFinder_Edges_CS") return new LaneFinder_Edges_CS(task);
			if (algorithmName == "LaneFinder_HLSColor_CS") return new LaneFinder_HLSColor_CS(task);
			if (algorithmName == "LaneFinder_ROI_CS") return new LaneFinder_ROI_CS(task);
			if (algorithmName == "LaneFinder_SlopeIntercept_CS") return new LaneFinder_SlopeIntercept_CS(task);
			if (algorithmName == "LaneFinder_Videos_CS") return new LaneFinder_Videos_CS(task);
			if (algorithmName == "Laplacian_Basics_CS") return new Laplacian_Basics_CS(task);
			if (algorithmName == "Laplacian_Blur_CS") return new Laplacian_Blur_CS(task);
			if (algorithmName == "Laplacian_PyramidFilter_CS") return new Laplacian_PyramidFilter_CS(task);
			if (algorithmName == "LeftRight_Basics_CS") return new LeftRight_Basics_CS(task);
			if (algorithmName == "LeftRight_BRISK_CS") return new LeftRight_BRISK_CS(task);
			if (algorithmName == "LeftRight_CompareRaw_CS") return new LeftRight_CompareRaw_CS(task);
			if (algorithmName == "LeftRight_Edges_CS") return new LeftRight_Edges_CS(task);
			if (algorithmName == "LeftRight_Features_CS") return new LeftRight_Features_CS(task);
			if (algorithmName == "LeftRight_Lines_CS") return new LeftRight_Lines_CS(task);
			if (algorithmName == "LeftRight_Markers_CS") return new LeftRight_Markers_CS(task);
			if (algorithmName == "LeftRight_Markers1_CS") return new LeftRight_Markers1_CS(task);
			if (algorithmName == "LeftRight_Palettized_CS") return new LeftRight_Palettized_CS(task);
			if (algorithmName == "LeftRight_RedCloudBoth_CS") return new LeftRight_RedCloudBoth_CS(task);
			if (algorithmName == "LeftRight_RedCloudLeft_CS") return new LeftRight_RedCloudLeft_CS(task);
			if (algorithmName == "LeftRight_RedCloudRight_CS") return new LeftRight_RedCloudRight_CS(task);
			if (algorithmName == "LeftRight_Reduction_CS") return new LeftRight_Reduction_CS(task);
			if (algorithmName == "Line_Basics_CS") return new Line_Basics_CS(task);
			if (algorithmName == "Line_Canny_CS") return new Line_Canny_CS(task);
			if (algorithmName == "Line_Cells_CS") return new Line_Cells_CS(task);
			if (algorithmName == "Line_CellsVertHoriz_CS") return new Line_CellsVertHoriz_CS(task);
			if (algorithmName == "Line_ColorClass_CS") return new Line_ColorClass_CS(task);
			if (algorithmName == "Line_DisplayInfo_CS") return new Line_DisplayInfo_CS(task);
			if (algorithmName == "Line_FromContours_CS") return new Line_FromContours_CS(task);
			if (algorithmName == "Line_GCloud_CS") return new Line_GCloud_CS(task);
			if (algorithmName == "Line_Gravity_CS") return new Line_Gravity_CS(task);
			if (algorithmName == "Line_InDepthAndBGR_CS") return new Line_InDepthAndBGR_CS(task);
			if (algorithmName == "Line_Intercepts_CS") return new Line_Intercepts_CS(task);
			if (algorithmName == "Line_InterceptsUI_CS") return new Line_InterceptsUI_CS(task);
			if (algorithmName == "Line_Intersection_CS") return new Line_Intersection_CS(task);
			if (algorithmName == "Line_KNN_CS") return new Line_KNN_CS(task);
			if (algorithmName == "Line_LeftRightImages_CS") return new Line_LeftRightImages_CS(task);
			if (algorithmName == "Line_Movement_CS") return new Line_Movement_CS(task);
			if (algorithmName == "Line_Nearest_CS") return new Line_Nearest_CS(task);
			if (algorithmName == "Line_Perpendicular_CS") return new Line_Perpendicular_CS(task);
			if (algorithmName == "Line_PointSlope_CS") return new Line_PointSlope_CS(task);
			if (algorithmName == "Line_SubsetRect_CS") return new Line_SubsetRect_CS(task);
			if (algorithmName == "Line_TimeView_CS") return new Line_TimeView_CS(task);
			if (algorithmName == "Line_TimeViewLines_CS") return new Line_TimeViewLines_CS(task);
			if (algorithmName == "Line_Verticals_CS") return new Line_Verticals_CS(task);
			if (algorithmName == "Line_Verts_CS") return new Line_Verts_CS(task);
			if (algorithmName == "Line_ViewSide_CS") return new Line_ViewSide_CS(task);
			if (algorithmName == "Line_ViewTop_CS") return new Line_ViewTop_CS(task);
			if (algorithmName == "Line3D_CandidatesAll_CS") return new Line3D_CandidatesAll_CS(task);
			if (algorithmName == "Line3D_CandidatesFirstLast_CS") return new Line3D_CandidatesFirstLast_CS(task);
			if (algorithmName == "Line3D_Checks_CS") return new Line3D_Checks_CS(task);
			if (algorithmName == "Line3D_Draw_CS") return new Line3D_Draw_CS(task);
			if (algorithmName == "LinearRegression_Basics_CS") return new LinearRegression_Basics_CS(task);
			if (algorithmName == "LinearRegression_Random_CS") return new LinearRegression_Random_CS(task);
			if (algorithmName == "LinearRegression_Test_CS") return new LinearRegression_Test_CS(task);
			if (algorithmName == "LineCoin_Basics_CS") return new LineCoin_Basics_CS(task);
			if (algorithmName == "LineCoin_HistoryIntercept_CS") return new LineCoin_HistoryIntercept_CS(task);
			if (algorithmName == "LineCoin_Parallel_CS") return new LineCoin_Parallel_CS(task);
			if (algorithmName == "LongLine_Basics_CS") return new LongLine_Basics_CS(task);
			if (algorithmName == "LongLine_Consistent_CS") return new LongLine_Consistent_CS(task);
			if (algorithmName == "LongLine_Core_CS") return new LongLine_Core_CS(task);
			if (algorithmName == "LongLine_Depth_CS") return new LongLine_Depth_CS(task);
			if (algorithmName == "LongLine_Extend_CS") return new LongLine_Extend_CS(task);
			if (algorithmName == "LongLine_ExtendAll_CS") return new LongLine_ExtendAll_CS(task);
			if (algorithmName == "LongLine_ExtendParallel_CS") return new LongLine_ExtendParallel_CS(task);
			if (algorithmName == "LongLine_ExtendTest_CS") return new LongLine_ExtendTest_CS(task);
			if (algorithmName == "LongLine_History_CS") return new LongLine_History_CS(task);
			if (algorithmName == "LongLine_Match_CS") return new LongLine_Match_CS(task);
			if (algorithmName == "LongLine_NoDepth_CS") return new LongLine_NoDepth_CS(task);
			if (algorithmName == "LongLine_Point_CS") return new LongLine_Point_CS(task);
			if (algorithmName == "LUT_Basics_CS") return new LUT_Basics_CS(task);
			if (algorithmName == "LUT_Create_CS") return new LUT_Create_CS(task);
			if (algorithmName == "LUT_Custom_CS") return new LUT_Custom_CS(task);
			if (algorithmName == "LUT_Depth32f_CS") return new LUT_Depth32f_CS(task);
			if (algorithmName == "LUT_Equalized_CS") return new LUT_Equalized_CS(task);
			if (algorithmName == "LUT_RedCloud_CS") return new LUT_RedCloud_CS(task);
			if (algorithmName == "LUT_Reduction_CS") return new LUT_Reduction_CS(task);
			if (algorithmName == "LUT_RGBDepth_CS") return new LUT_RGBDepth_CS(task);
			if (algorithmName == "LUT_Sliders_CS") return new LUT_Sliders_CS(task);
			if (algorithmName == "LUT_Watershed_CS") return new LUT_Watershed_CS(task);
			if (algorithmName == "Magnify_Basics_CS") return new Magnify_Basics_CS(task);
			if (algorithmName == "Magnify_Example_CS") return new Magnify_Example_CS(task);
			if (algorithmName == "Mat_2to1_CS") return new Mat_2to1_CS(task);
			if (algorithmName == "Mat_4Click_CS") return new Mat_4Click_CS(task);
			if (algorithmName == "Mat_4to1_CS") return new Mat_4to1_CS(task);
			if (algorithmName == "Mat_Inverse_4D_CS") return new Mat_Inverse_4D_CS(task);
			if (algorithmName == "Mat_Inverse_CS") return new Mat_Inverse_CS(task);
			if (algorithmName == "Mat_Managed_CS") return new Mat_Managed_CS(task);
			if (algorithmName == "Mat_MatToPoint_CS") return new Mat_MatToPoint_CS(task);
			if (algorithmName == "Mat_MultiplyReview_CS") return new Mat_MultiplyReview_CS(task);
			if (algorithmName == "Mat_PointToMat_CS") return new Mat_PointToMat_CS(task);
			if (algorithmName == "Mat_Repeat_CS") return new Mat_Repeat_CS(task);
			if (algorithmName == "Mat_RowColRange_CS") return new Mat_RowColRange_CS(task);
			if (algorithmName == "Mat_ToList_CS") return new Mat_ToList_CS(task);
			if (algorithmName == "Mat_Transpose_CS") return new Mat_Transpose_CS(task);
			if (algorithmName == "Mat_Tricks_CS") return new Mat_Tricks_CS(task);
			if (algorithmName == "Match_Basics_CS") return new Match_Basics_CS(task);
			if (algorithmName == "Match_BasicsTest_CS") return new Match_BasicsTest_CS(task);
			if (algorithmName == "Match_BestEntropy_CS") return new Match_BestEntropy_CS(task);
			if (algorithmName == "Match_DrawRect_CS") return new Match_DrawRect_CS(task);
			if (algorithmName == "Match_GoodFeatureKNN_CS") return new Match_GoodFeatureKNN_CS(task);
			if (algorithmName == "Match_LinePairTest_CS") return new Match_LinePairTest_CS(task);
			if (algorithmName == "Match_Lines_CS") return new Match_Lines_CS(task);
			if (algorithmName == "Match_Motion_CS") return new Match_Motion_CS(task);
			if (algorithmName == "Match_Point_CS") return new Match_Point_CS(task);
			if (algorithmName == "Match_Points_CS") return new Match_Points_CS(task);
			if (algorithmName == "Match_PointSlope_CS") return new Match_PointSlope_CS(task);
			if (algorithmName == "Match_RandomTest_CS") return new Match_RandomTest_CS(task);
			if (algorithmName == "Match_tCell_CS") return new Match_tCell_CS(task);
			if (algorithmName == "Match_TraceRedC_CS") return new Match_TraceRedC_CS(task);
			if (algorithmName == "MatchLine_Basics_CS") return new MatchLine_Basics_CS(task);
			if (algorithmName == "MatchLine_Gravity_CS") return new MatchLine_Gravity_CS(task);
			if (algorithmName == "MatchLine_Horizon_CS") return new MatchLine_Horizon_CS(task);
			if (algorithmName == "MatchLine_Longest_CS") return new MatchLine_Longest_CS(task);
			if (algorithmName == "MatchRect_Basics_CS") return new MatchRect_Basics_CS(task);
			if (algorithmName == "MatchRect_RedCloud_CS") return new MatchRect_RedCloud_CS(task);
			if (algorithmName == "MatchShapes_Basics_CS") return new MatchShapes_Basics_CS(task);
			if (algorithmName == "MatchShapes_Contours_CS") return new MatchShapes_Contours_CS(task);
			if (algorithmName == "MatchShapes_Hulls_CS") return new MatchShapes_Hulls_CS(task);
			if (algorithmName == "MatchShapes_Nearby_CS") return new MatchShapes_Nearby_CS(task);
			if (algorithmName == "MatchShapes_NearbyHull_CS") return new MatchShapes_NearbyHull_CS(task);
			if (algorithmName == "Math_DepthMeanStdev_CS") return new Math_DepthMeanStdev_CS(task);
			if (algorithmName == "Math_ImageAverage_CS") return new Math_ImageAverage_CS(task);
			if (algorithmName == "Math_ImageMaskedAverage_CS") return new Math_ImageMaskedAverage_CS(task);
			if (algorithmName == "Math_Median_CDF_CS") return new Math_Median_CDF_CS(task);
			if (algorithmName == "Math_ParallelTest_CS") return new Math_ParallelTest_CS(task);
			if (algorithmName == "Math_RGBCorrelation_CS") return new Math_RGBCorrelation_CS(task);
			if (algorithmName == "Math_Stdev_CS") return new Math_Stdev_CS(task);
			if (algorithmName == "Math_StdevBoundary_CS") return new Math_StdevBoundary_CS(task);
			if (algorithmName == "Math_Subtract_CS") return new Math_Subtract_CS(task);
			if (algorithmName == "Math_Template_CS") return new Math_Template_CS(task);
			if (algorithmName == "MeanShift_Basics_CS") return new MeanShift_Basics_CS(task);
			if (algorithmName == "MeanShift_Depth_CS") return new MeanShift_Depth_CS(task);
			if (algorithmName == "MeanSubtraction_Basics_CS") return new MeanSubtraction_Basics_CS(task);
			if (algorithmName == "Mesh_Basics_CS") return new Mesh_Basics_CS(task);
			if (algorithmName == "Mesh_Features_CS") return new Mesh_Features_CS(task);
			if (algorithmName == "MiniCloud_Basics_CS") return new MiniCloud_Basics_CS(task);
			if (algorithmName == "MiniCloud_Rotate_CS") return new MiniCloud_Rotate_CS(task);
			if (algorithmName == "MiniCloud_RotateAngle_CS") return new MiniCloud_RotateAngle_CS(task);
			if (algorithmName == "MiniCloud_RotateSinglePass_CS") return new MiniCloud_RotateSinglePass_CS(task);
			if (algorithmName == "ML_Basics_CS") return new ML_Basics_CS(task);
			if (algorithmName == "ML_Color2Depth_CS") return new ML_Color2Depth_CS(task);
			if (algorithmName == "ML_ColorInTier2Depth_CS") return new ML_ColorInTier2Depth_CS(task);
			if (algorithmName == "ML_DepthFromColor_CS") return new ML_DepthFromColor_CS(task);
			if (algorithmName == "ML_DepthFromXYColor_CS") return new ML_DepthFromXYColor_CS(task);
			if (algorithmName == "ML_FillRGBDepth_MT_CS") return new ML_FillRGBDepth_MT_CS(task);
			if (algorithmName == "ML_RemoveDups_CPP_CS") return new ML_RemoveDups_CPP_CS(task);
			if (algorithmName == "Model_Basics_CS") return new Model_Basics_CS(task);
			if (algorithmName == "Model_CellZoom_CS") return new Model_CellZoom_CS(task);
			if (algorithmName == "Model_FlatSurfaces_CS") return new Model_FlatSurfaces_CS(task);
			if (algorithmName == "Model_OpenGL_Sliders_CS") return new Model_OpenGL_Sliders_CS(task);
			if (algorithmName == "Model_RedCloud_CS") return new Model_RedCloud_CS(task);
			if (algorithmName == "Moments_Basics_CS") return new Moments_Basics_CS(task);
			if (algorithmName == "Moments_CentroidKalman_CS") return new Moments_CentroidKalman_CS(task);
			if (algorithmName == "Motion_Basics_CS") return new Motion_Basics_CS(task);
			if (algorithmName == "Motion_Basics_QT_CS") return new Motion_Basics_QT_CS(task);
			if (algorithmName == "Motion_BasicsQuarterRes_CS") return new Motion_BasicsQuarterRes_CS(task);
			if (algorithmName == "Motion_CCmerge_CS") return new Motion_CCmerge_CS(task);
			if (algorithmName == "Motion_Color_CS") return new Motion_Color_CS(task);
			if (algorithmName == "Motion_Contours_CS") return new Motion_Contours_CS(task);
			if (algorithmName == "Motion_Depth_CS") return new Motion_Depth_CS(task);
			if (algorithmName == "Motion_DepthReconstructed_CS") return new Motion_DepthReconstructed_CS(task);
			if (algorithmName == "Motion_Diff_CS") return new Motion_Diff_CS(task);
			if (algorithmName == "Motion_Enclosing_CPP_CS") return new Motion_Enclosing_CPP_CS(task);
			if (algorithmName == "Motion_Grayscale_CS") return new Motion_Grayscale_CS(task);
			if (algorithmName == "Motion_Grid_CS") return new Motion_Grid_CS(task);
			if (algorithmName == "Motion_Grid_MP_CS") return new Motion_Grid_MP_CS(task);
			if (algorithmName == "Motion_History_CS") return new Motion_History_CS(task);
			if (algorithmName == "Motion_HistoryTest_CS") return new Motion_HistoryTest_CS(task);
			if (algorithmName == "Motion_Intersect_CS") return new Motion_Intersect_CS(task);
			if (algorithmName == "Motion_MinRect_CS") return new Motion_MinRect_CS(task);
			if (algorithmName == "Motion_PixelDiff_CS") return new Motion_PixelDiff_CS(task);
			if (algorithmName == "Motion_PointCloud_CS") return new Motion_PointCloud_CS(task);
			if (algorithmName == "Motion_RectTest_CS") return new Motion_RectTest_CS(task);
			if (algorithmName == "Motion_RedCloud_CS") return new Motion_RedCloud_CS(task);
			if (algorithmName == "Motion_Simple_CS") return new Motion_Simple_CS(task);
			if (algorithmName == "Motion_ThruCorrelation_CS") return new Motion_ThruCorrelation_CS(task);
			if (algorithmName == "Mouse_Basics_CS") return new Mouse_Basics_CS(task);
			if (algorithmName == "Mouse_ClickPointUsage_CS") return new Mouse_ClickPointUsage_CS(task);
			if (algorithmName == "Mouse_LeftClickZoom_CS") return new Mouse_LeftClickZoom_CS(task);
			if (algorithmName == "MSER_Basics_CS") return new MSER_Basics_CS(task);
			if (algorithmName == "MSER_Basics1_CS") return new MSER_Basics1_CS(task);
			if (algorithmName == "MSER_Basics2_CS") return new MSER_Basics2_CS(task);
			if (algorithmName == "MSER_BasicsNew_CS") return new MSER_BasicsNew_CS(task);
			if (algorithmName == "MSER_Binarize_CS") return new MSER_Binarize_CS(task);
			if (algorithmName == "MSER_CPP_CS") return new MSER_CPP_CS(task);
			if (algorithmName == "MSER_Detect_CS") return new MSER_Detect_CS(task);
			if (algorithmName == "MSER_Grayscale_CS") return new MSER_Grayscale_CS(task);
			if (algorithmName == "MSER_Hulls_CS") return new MSER_Hulls_CS(task);
			if (algorithmName == "MSER_Left_CS") return new MSER_Left_CS(task);
			if (algorithmName == "MSER_LeftRight_CS") return new MSER_LeftRight_CS(task);
			if (algorithmName == "MSER_Mask_CPP_CS") return new MSER_Mask_CPP_CS(task);
			if (algorithmName == "MSER_RedCloud_CS") return new MSER_RedCloud_CS(task);
			if (algorithmName == "MSER_ReducedRGB_CS") return new MSER_ReducedRGB_CS(task);
			if (algorithmName == "MSER_Right_CS") return new MSER_Right_CS(task);
			if (algorithmName == "MSER_ROI_CS") return new MSER_ROI_CS(task);
			if (algorithmName == "MSER_SyntheticInput_CS") return new MSER_SyntheticInput_CS(task);
			if (algorithmName == "MSER_TestExample_CS") return new MSER_TestExample_CS(task);
			if (algorithmName == "MSER_TestSynthetic_CS") return new MSER_TestSynthetic_CS(task);
			if (algorithmName == "MultiDimensionScaling_Cities_CS") return new MultiDimensionScaling_Cities_CS(task);
			if (algorithmName == "Neighbors_Basics_CS") return new Neighbors_Basics_CS(task);
			if (algorithmName == "Neighbors_ColorOnly_CS") return new Neighbors_ColorOnly_CS(task);
			if (algorithmName == "Neighbors_Intersects_CS") return new Neighbors_Intersects_CS(task);
			if (algorithmName == "Neighbors_Precise_CPP_CS") return new Neighbors_Precise_CPP_CS(task);
			if (algorithmName == "OEX_BasicLinearTransforms_CS") return new OEX_BasicLinearTransforms_CS(task);
			if (algorithmName == "OEX_BasicLinearTransformsTrackBar_CS") return new OEX_BasicLinearTransformsTrackBar_CS(task);
			if (algorithmName == "OEX_bgfg_segm_CS") return new OEX_bgfg_segm_CS(task);
			if (algorithmName == "OEX_bgSub_CS") return new OEX_bgSub_CS(task);
			if (algorithmName == "OEX_CalcBackProject_Demo1_CS") return new OEX_CalcBackProject_Demo1_CS(task);
			if (algorithmName == "OEX_CalcBackProject_Demo2_CS") return new OEX_CalcBackProject_Demo2_CS(task);
			if (algorithmName == "OEX_Core_Reduce_CS") return new OEX_Core_Reduce_CS(task);
			if (algorithmName == "OEX_Core_Split_CS") return new OEX_Core_Split_CS(task);
			if (algorithmName == "OEX_delaunay2_CS") return new OEX_delaunay2_CS(task);
			if (algorithmName == "OEX_Filter2D_CS") return new OEX_Filter2D_CS(task);
			if (algorithmName == "OEX_FitEllipse_CPP_CS") return new OEX_FitEllipse_CPP_CS(task);
			if (algorithmName == "OEX_GoodFeaturesToTrackDemo_CS") return new OEX_GoodFeaturesToTrackDemo_CS(task);
			if (algorithmName == "OEX_MeanShift_CS") return new OEX_MeanShift_CS(task);
			if (algorithmName == "OEX_PointPolygon_CS") return new OEX_PointPolygon_CS(task);
			if (algorithmName == "OEX_PointPolygon_demo_CS") return new OEX_PointPolygon_demo_CS(task);
			if (algorithmName == "OEX_Points_Classifier_CS") return new OEX_Points_Classifier_CS(task);
			if (algorithmName == "OEX_Remap_CS") return new OEX_Remap_CS(task);
			if (algorithmName == "OEX_Sobel_Demo_CS") return new OEX_Sobel_Demo_CS(task);
			if (algorithmName == "OEX_Threshold_CS") return new OEX_Threshold_CS(task);
			if (algorithmName == "OEX_Threshold_Inrange_CS") return new OEX_Threshold_Inrange_CS(task);
			if (algorithmName == "OilPaint_Cartoon_CS") return new OilPaint_Cartoon_CS(task);
			if (algorithmName == "OilPaint_Manual_CS") return new OilPaint_Manual_CS(task);
			if (algorithmName == "OilPaint_ManualVB_CS") return new OilPaint_ManualVB_CS(task);
			if (algorithmName == "OilPaint_Pointilism_CS") return new OilPaint_Pointilism_CS(task);
			if (algorithmName == "OpAuto_FloorCeiling_CS") return new OpAuto_FloorCeiling_CS(task);
			if (algorithmName == "OpAuto_MSER_CS") return new OpAuto_MSER_CS(task);
			if (algorithmName == "OpAuto_Peaks2D_CS") return new OpAuto_Peaks2D_CS(task);
			if (algorithmName == "OpAuto_Peaks2DGrid_CS") return new OpAuto_Peaks2DGrid_CS(task);
			if (algorithmName == "OpAuto_PixelDifference_CS") return new OpAuto_PixelDifference_CS(task);
			if (algorithmName == "OpAuto_Valley_CS") return new OpAuto_Valley_CS(task);
			if (algorithmName == "OpAuto_XRange_CS") return new OpAuto_XRange_CS(task);
			if (algorithmName == "OpAuto_YRange_CS") return new OpAuto_YRange_CS(task);
			if (algorithmName == "OpenGL_Basics_CS") return new OpenGL_Basics_CS(task);
			if (algorithmName == "OpenGL_BasicsMouse_CS") return new OpenGL_BasicsMouse_CS(task);
			if (algorithmName == "OpenGL_BasicsSliders_CS") return new OpenGL_BasicsSliders_CS(task);
			if (algorithmName == "OpenGL_Bricks_CS") return new OpenGL_Bricks_CS(task);
			if (algorithmName == "OpenGL_CloudHistory_CS") return new OpenGL_CloudHistory_CS(task);
			if (algorithmName == "OpenGL_CloudMisses_CS") return new OpenGL_CloudMisses_CS(task);
			if (algorithmName == "OpenGL_Color3D_CS") return new OpenGL_Color3D_CS(task);
			if (algorithmName == "OpenGL_ColorBin4Way_CS") return new OpenGL_ColorBin4Way_CS(task);
			if (algorithmName == "OpenGL_ColorRaw_CS") return new OpenGL_ColorRaw_CS(task);
			if (algorithmName == "OpenGL_ColorReduced3D_CS") return new OpenGL_ColorReduced3D_CS(task);
			if (algorithmName == "OpenGL_Contours_CS") return new OpenGL_Contours_CS(task);
			if (algorithmName == "OpenGL_Density2D_CS") return new OpenGL_Density2D_CS(task);
			if (algorithmName == "OpenGL_DiffDepth_CS") return new OpenGL_DiffDepth_CS(task);
			if (algorithmName == "OpenGL_DrawCube_CS") return new OpenGL_DrawCube_CS(task);
			if (algorithmName == "OpenGL_DrawHull_CS") return new OpenGL_DrawHull_CS(task);
			if (algorithmName == "OpenGL_DrawHulls_CS") return new OpenGL_DrawHulls_CS(task);
			if (algorithmName == "OpenGL_Duster_CS") return new OpenGL_Duster_CS(task);
			if (algorithmName == "OpenGL_DusterY_CS") return new OpenGL_DusterY_CS(task);
			if (algorithmName == "OpenGL_Filtered3D_CS") return new OpenGL_Filtered3D_CS(task);
			if (algorithmName == "OpenGL_FilteredBoth_CS") return new OpenGL_FilteredBoth_CS(task);
			if (algorithmName == "OpenGL_FilteredSideView_CS") return new OpenGL_FilteredSideView_CS(task);
			if (algorithmName == "OpenGL_FilteredTopView_CS") return new OpenGL_FilteredTopView_CS(task);
			if (algorithmName == "OpenGL_FlatCeiling_CS") return new OpenGL_FlatCeiling_CS(task);
			if (algorithmName == "OpenGL_FlatFloor_CS") return new OpenGL_FlatFloor_CS(task);
			if (algorithmName == "OpenGL_FlatStudy1_CS") return new OpenGL_FlatStudy1_CS(task);
			if (algorithmName == "OpenGL_FlatStudy2_CS") return new OpenGL_FlatStudy2_CS(task);
			if (algorithmName == "OpenGL_FlatStudy3_CS") return new OpenGL_FlatStudy3_CS(task);
			if (algorithmName == "OpenGL_FlatSurfaces_CS") return new OpenGL_FlatSurfaces_CS(task);
			if (algorithmName == "OpenGL_FPolyCloud_CS") return new OpenGL_FPolyCloud_CS(task);
			if (algorithmName == "OpenGL_GradientPhase_CS") return new OpenGL_GradientPhase_CS(task);
			if (algorithmName == "OpenGL_GravityAverage_CS") return new OpenGL_GravityAverage_CS(task);
			if (algorithmName == "OpenGL_GravityKalman_CS") return new OpenGL_GravityKalman_CS(task);
			if (algorithmName == "OpenGL_GravityTransform_CS") return new OpenGL_GravityTransform_CS(task);
			if (algorithmName == "OpenGL_HistDepth3D_CS") return new OpenGL_HistDepth3D_CS(task);
			if (algorithmName == "OpenGL_HistNorm3D_CS") return new OpenGL_HistNorm3D_CS(task);
			if (algorithmName == "OpenGL_NoSolo_CS") return new OpenGL_NoSolo_CS(task);
			if (algorithmName == "OpenGL_OnlyPlanes_CS") return new OpenGL_OnlyPlanes_CS(task);
			if (algorithmName == "OpenGL_PatchHorizontal_CS") return new OpenGL_PatchHorizontal_CS(task);
			if (algorithmName == "OpenGL_PCLineCandidates_CS") return new OpenGL_PCLineCandidates_CS(task);
			if (algorithmName == "OpenGL_PClinesAll_CS") return new OpenGL_PClinesAll_CS(task);
			if (algorithmName == "OpenGL_PClinesFirstLast_CS") return new OpenGL_PClinesFirstLast_CS(task);
			if (algorithmName == "OpenGL_PCpoints_CS") return new OpenGL_PCpoints_CS(task);
			if (algorithmName == "OpenGL_PCpointsPlane_CS") return new OpenGL_PCpointsPlane_CS(task);
			if (algorithmName == "OpenGL_PeakFlat_CS") return new OpenGL_PeakFlat_CS(task);
			if (algorithmName == "OpenGL_PlaneClusters3D_CS") return new OpenGL_PlaneClusters3D_CS(task);
			if (algorithmName == "OpenGL_Profile_CS") return new OpenGL_Profile_CS(task);
			if (algorithmName == "OpenGL_ProfileSweep_CS") return new OpenGL_ProfileSweep_CS(task);
			if (algorithmName == "OpenGL_Pyramid_CS") return new OpenGL_Pyramid_CS(task);
			if (algorithmName == "OpenGL_QuadHulls_CS") return new OpenGL_QuadHulls_CS(task);
			if (algorithmName == "OpenGL_QuadMinMax_CS") return new OpenGL_QuadMinMax_CS(task);
			if (algorithmName == "OpenGL_QuadSimple_CS") return new OpenGL_QuadSimple_CS(task);
			if (algorithmName == "OpenGL_Rebuilt_CS") return new OpenGL_Rebuilt_CS(task);
			if (algorithmName == "OpenGL_RedCloud_CS") return new OpenGL_RedCloud_CS(task);
			if (algorithmName == "OpenGL_RedCloudCell_CS") return new OpenGL_RedCloudCell_CS(task);
			if (algorithmName == "OpenGL_RedCloudSpectrum_CS") return new OpenGL_RedCloudSpectrum_CS(task);
			if (algorithmName == "OpenGL_RedTrack_CS") return new OpenGL_RedTrack_CS(task);
			if (algorithmName == "OpenGL_ReducedSideView_CS") return new OpenGL_ReducedSideView_CS(task);
			if (algorithmName == "OpenGL_ReducedXYZ_CS") return new OpenGL_ReducedXYZ_CS(task);
			if (algorithmName == "OpenGL_Reduction_CS") return new OpenGL_Reduction_CS(task);
			if (algorithmName == "OpenGL_Sierpinski_CS") return new OpenGL_Sierpinski_CS(task);
			if (algorithmName == "OpenGL_SoloPointsRemoved_CS") return new OpenGL_SoloPointsRemoved_CS(task);
			if (algorithmName == "OpenGL_StableMinMax_CS") return new OpenGL_StableMinMax_CS(task);
			if (algorithmName == "OpenGL_StructuredCloud_CS") return new OpenGL_StructuredCloud_CS(task);
			if (algorithmName == "OpenGL_Tessellate_CS") return new OpenGL_Tessellate_CS(task);
			if (algorithmName == "OpenGL_TessellateCell_CS") return new OpenGL_TessellateCell_CS(task);
			if (algorithmName == "OpenGL_TessellateRGB_CS") return new OpenGL_TessellateRGB_CS(task);
			if (algorithmName == "OpenGL_TextureShuffle_CS") return new OpenGL_TextureShuffle_CS(task);
			if (algorithmName == "OpenGL_Tiles_CS") return new OpenGL_Tiles_CS(task);
			if (algorithmName == "OpenGL_TilesQuad_CS") return new OpenGL_TilesQuad_CS(task);
			if (algorithmName == "OpenGL_VerticalSingle_CS") return new OpenGL_VerticalSingle_CS(task);
			if (algorithmName == "OpenGL_ViewObjects_CS") return new OpenGL_ViewObjects_CS(task);
			if (algorithmName == "ORB_Basics_CS") return new ORB_Basics_CS(task);
			if (algorithmName == "Palette_Basics_CS") return new Palette_Basics_CS(task);
			if (algorithmName == "Palette_Color_CS") return new Palette_Color_CS(task);
			if (algorithmName == "Palette_Create_CS") return new Palette_Create_CS(task);
			if (algorithmName == "Palette_CustomColorMap_CS") return new Palette_CustomColorMap_CS(task);
			if (algorithmName == "Palette_DepthColorMap_CS") return new Palette_DepthColorMap_CS(task);
			if (algorithmName == "Palette_DrawTest_CS") return new Palette_DrawTest_CS(task);
			if (algorithmName == "Palette_Gradient_CS") return new Palette_Gradient_CS(task);
			if (algorithmName == "Palette_GrayToColor_CS") return new Palette_GrayToColor_CS(task);
			if (algorithmName == "Palette_Layout2D_CS") return new Palette_Layout2D_CS(task);
			if (algorithmName == "Palette_LeftRightImages_CS") return new Palette_LeftRightImages_CS(task);
			if (algorithmName == "Palette_LinearPolar_CS") return new Palette_LinearPolar_CS(task);
			if (algorithmName == "Palette_LoadColorMap_CS") return new Palette_LoadColorMap_CS(task);
			if (algorithmName == "Palette_Random_CS") return new Palette_Random_CS(task);
			if (algorithmName == "Palette_RandomColorMap_CS") return new Palette_RandomColorMap_CS(task);
			if (algorithmName == "Palette_Reduction_CS") return new Palette_Reduction_CS(task);
			if (algorithmName == "Palette_RGBDepth_CS") return new Palette_RGBDepth_CS(task);
			if (algorithmName == "Palette_TaskColors_CS") return new Palette_TaskColors_CS(task);
			if (algorithmName == "Palette_Variable_CS") return new Palette_Variable_CS(task);
			if (algorithmName == "ParticleFilter_Example_CS") return new ParticleFilter_Example_CS(task);
			if (algorithmName == "PCA_Basics_CS") return new PCA_Basics_CS(task);
			if (algorithmName == "PCA_CellMask_CS") return new PCA_CellMask_CS(task);
			if (algorithmName == "PCA_Depth_CS") return new PCA_Depth_CS(task);
			if (algorithmName == "PCA_DrawImage_CS") return new PCA_DrawImage_CS(task);
			if (algorithmName == "PCA_NColor_CPP_CS") return new PCA_NColor_CPP_CS(task);
			if (algorithmName == "PCA_NColor_CS") return new PCA_NColor_CS(task);
			if (algorithmName == "PCA_NColorPalettize_CS") return new PCA_NColorPalettize_CS(task);
			if (algorithmName == "PCA_Palettize_CS") return new PCA_Palettize_CS(task);
			if (algorithmName == "PCA_Prep_CPP_CS") return new PCA_Prep_CPP_CS(task);
			if (algorithmName == "PCA_Reconstruct_CS") return new PCA_Reconstruct_CS(task);
			if (algorithmName == "Pendulum_Basics_CS") return new Pendulum_Basics_CS(task);
			if (algorithmName == "PhaseCorrelate_Basics_CS") return new PhaseCorrelate_Basics_CS(task);
			if (algorithmName == "PhaseCorrelate_BasicsTest_CS") return new PhaseCorrelate_BasicsTest_CS(task);
			if (algorithmName == "PhaseCorrelate_Depth_CS") return new PhaseCorrelate_Depth_CS(task);
			if (algorithmName == "PhaseCorrelate_HanningWindow_CS") return new PhaseCorrelate_HanningWindow_CS(task);
			if (algorithmName == "Photon_Basics_CS") return new Photon_Basics_CS(task);
			if (algorithmName == "Photon_Subtraction_CS") return new Photon_Subtraction_CS(task);
			if (algorithmName == "Photon_Test_CS") return new Photon_Test_CS(task);
			if (algorithmName == "Pixel_Unstable_CS") return new Pixel_Unstable_CS(task);
			if (algorithmName == "Plane_Basics_CS") return new Plane_Basics_CS(task);
			if (algorithmName == "Plane_CellColor_CS") return new Plane_CellColor_CS(task);
			if (algorithmName == "Plane_EqCorrelation_CS") return new Plane_EqCorrelation_CS(task);
			if (algorithmName == "Plane_Equation_CS") return new Plane_Equation_CS(task);
			if (algorithmName == "Plane_FlatSurfaces_CS") return new Plane_FlatSurfaces_CS(task);
			if (algorithmName == "Plane_FloorStudy_CS") return new Plane_FloorStudy_CS(task);
			if (algorithmName == "Plane_From3Points_CS") return new Plane_From3Points_CS(task);
			if (algorithmName == "Plane_Histogram_CS") return new Plane_Histogram_CS(task);
			if (algorithmName == "Plane_Horizontals_CS") return new Plane_Horizontals_CS(task);
			if (algorithmName == "Plane_OnlyPlanes_CS") return new Plane_OnlyPlanes_CS(task);
			if (algorithmName == "Plane_Points_CS") return new Plane_Points_CS(task);
			if (algorithmName == "Plane_Verticals_CS") return new Plane_Verticals_CS(task);
			if (algorithmName == "Plot_Basics_CPP_CS") return new Plot_Basics_CPP_CS(task);
			if (algorithmName == "Plot_Basics_CS") return new Plot_Basics_CS(task);
			if (algorithmName == "Plot_Beats_CS") return new Plot_Beats_CS(task);
			if (algorithmName == "Plot_Depth_CS") return new Plot_Depth_CS(task);
			if (algorithmName == "Plot_Dots_CS") return new Plot_Dots_CS(task);
			if (algorithmName == "Plot_Histogram_CS") return new Plot_Histogram_CS(task);
			if (algorithmName == "Plot_Histogram2D_CS") return new Plot_Histogram2D_CS(task);
			if (algorithmName == "Plot_OverTime_CS") return new Plot_OverTime_CS(task);
			if (algorithmName == "Plot_OverTimeFixedScale_CS") return new Plot_OverTimeFixedScale_CS(task);
			if (algorithmName == "Plot_OverTimeScalar_CS") return new Plot_OverTimeScalar_CS(task);
			if (algorithmName == "Plot_OverTimeSingle_CS") return new Plot_OverTimeSingle_CS(task);
			if (algorithmName == "PlyFormat_Basics_CS") return new PlyFormat_Basics_CS(task);
			if (algorithmName == "PlyFormat_PlusRGB_CS") return new PlyFormat_PlusRGB_CS(task);
			if (algorithmName == "PointCloud_Average_CS") return new PointCloud_Average_CS(task);
			if (algorithmName == "PointCloud_Basics_CS") return new PointCloud_Basics_CS(task);
			if (algorithmName == "PointCloud_FrustrumSide_CS") return new PointCloud_FrustrumSide_CS(task);
			if (algorithmName == "PointCloud_FrustrumTop_CS") return new PointCloud_FrustrumTop_CS(task);
			if (algorithmName == "PointCloud_Histograms_CS") return new PointCloud_Histograms_CS(task);
			if (algorithmName == "PointCloud_Inspector_CS") return new PointCloud_Inspector_CS(task);
			if (algorithmName == "PointCloud_NeighborV_CS") return new PointCloud_NeighborV_CS(task);
			if (algorithmName == "PointCloud_PCPoints_CS") return new PointCloud_PCPoints_CS(task);
			if (algorithmName == "PointCloud_PCpointsMask_CS") return new PointCloud_PCpointsMask_CS(task);
			if (algorithmName == "PointCloud_PCPointsPlane_CS") return new PointCloud_PCPointsPlane_CS(task);
			if (algorithmName == "PointCloud_Point3f_CS") return new PointCloud_Point3f_CS(task);
			if (algorithmName == "PointCloud_Raw_CPP_CS") return new PointCloud_Raw_CPP_CS(task);
			if (algorithmName == "PointCloud_Raw_CS") return new PointCloud_Raw_CS(task);
			if (algorithmName == "PointCloud_ReducedSideView_CS") return new PointCloud_ReducedSideView_CS(task);
			if (algorithmName == "PointCloud_ReducedTopView_CS") return new PointCloud_ReducedTopView_CS(task);
			if (algorithmName == "PointCloud_ReducedViews_CS") return new PointCloud_ReducedViews_CS(task);
			if (algorithmName == "PointCloud_ReduceSplit2_CS") return new PointCloud_ReduceSplit2_CS(task);
			if (algorithmName == "PointCloud_SetupSide_CS") return new PointCloud_SetupSide_CS(task);
			if (algorithmName == "PointCloud_SetupTop_CS") return new PointCloud_SetupTop_CS(task);
			if (algorithmName == "PointCloud_Solo_CS") return new PointCloud_Solo_CS(task);
			if (algorithmName == "PointCloud_SoloRegions_CS") return new PointCloud_SoloRegions_CS(task);
			if (algorithmName == "PointCloud_Spin2_CS") return new PointCloud_Spin2_CS(task);
			if (algorithmName == "PointCloud_SurfaceH_CS") return new PointCloud_SurfaceH_CS(task);
			if (algorithmName == "PointCloud_Visualize_CS") return new PointCloud_Visualize_CS(task);
			if (algorithmName == "PointCloud_XRangeTest_CS") return new PointCloud_XRangeTest_CS(task);
			if (algorithmName == "PointCloud_YRangeTest_CS") return new PointCloud_YRangeTest_CS(task);
			if (algorithmName == "Polylines_IEnumerableExample_CS") return new Polylines_IEnumerableExample_CS(task);
			if (algorithmName == "Polylines_Random_CS") return new Polylines_Random_CS(task);
			if (algorithmName == "PongWars_Basics_CS") return new PongWars_Basics_CS(task);
			if (algorithmName == "PongWars_Two_CS") return new PongWars_Two_CS(task);
			if (algorithmName == "ProCon_Basics_CS") return new ProCon_Basics_CS(task);
			if (algorithmName == "ProCon_Variation_CS") return new ProCon_Variation_CS(task);
			if (algorithmName == "Profile_Basics_CS") return new Profile_Basics_CS(task);
			if (algorithmName == "Profile_ConcentrationSide_CS") return new Profile_ConcentrationSide_CS(task);
			if (algorithmName == "Profile_ConcentrationTop_CS") return new Profile_ConcentrationTop_CS(task);
			if (algorithmName == "Profile_Derivative_CS") return new Profile_Derivative_CS(task);
			if (algorithmName == "Profile_Kalman_CS") return new Profile_Kalman_CS(task);
			if (algorithmName == "Profile_OpenGL_CS") return new Profile_OpenGL_CS(task);
			if (algorithmName == "Profile_Rotation_CS") return new Profile_Rotation_CS(task);
			if (algorithmName == "Projection_Basics_CS") return new Projection_Basics_CS(task);
			if (algorithmName == "Projection_Cell_CS") return new Projection_Cell_CS(task);
			if (algorithmName == "Projection_Floor_CS") return new Projection_Floor_CS(task);
			if (algorithmName == "Projection_HistSide_CS") return new Projection_HistSide_CS(task);
			if (algorithmName == "Projection_HistTop_CS") return new Projection_HistTop_CS(task);
			if (algorithmName == "Projection_Lines_CS") return new Projection_Lines_CS(task);
			if (algorithmName == "Projection_Object_CS") return new Projection_Object_CS(task);
			if (algorithmName == "Projection_ObjectIsolate_CS") return new Projection_ObjectIsolate_CS(task);
			if (algorithmName == "Projection_Side_CS") return new Projection_Side_CS(task);
			if (algorithmName == "Projection_Top_CS") return new Projection_Top_CS(task);
			if (algorithmName == "Puzzle_Basics_CS") return new Puzzle_Basics_CS(task);
			if (algorithmName == "Puzzle_Solver_CS") return new Puzzle_Solver_CS(task);
			if (algorithmName == "Puzzle_SolverDynamic_CS") return new Puzzle_SolverDynamic_CS(task);
			if (algorithmName == "Pyramid_Basics_CS") return new Pyramid_Basics_CS(task);
			if (algorithmName == "Pyramid_Filter_CS") return new Pyramid_Filter_CS(task);
			if (algorithmName == "PyrFilter_Basics_CS") return new PyrFilter_Basics_CS(task);
			if (algorithmName == "PyrFilter_RedCloud_CS") return new PyrFilter_RedCloud_CS(task);
			if (algorithmName == "Python_Basics_CS") return new Python_Basics_CS(task);
			if (algorithmName == "Python_MemMap_CS") return new Python_MemMap_CS(task);
			if (algorithmName == "Python_Run_CS") return new Python_Run_CS(task);
			if (algorithmName == "Python_Stream_CS") return new Python_Stream_CS(task);
			if (algorithmName == "QRcode_Basics_CS") return new QRcode_Basics_CS(task);
			if (algorithmName == "Quadrant_Basics_CS") return new Quadrant_Basics_CS(task);
			if (algorithmName == "Quaterion_Basics_CS") return new Quaterion_Basics_CS(task);
			if (algorithmName == "Quaterion_IMUPrediction_CS") return new Quaterion_IMUPrediction_CS(task);
			if (algorithmName == "Random_Basics_CS") return new Random_Basics_CS(task);
			if (algorithmName == "Random_Basics3D_CS") return new Random_Basics3D_CS(task);
			if (algorithmName == "Random_Basics4D_CS") return new Random_Basics4D_CS(task);
			if (algorithmName == "Random_CheckNormalDist_CS") return new Random_CheckNormalDist_CS(task);
			if (algorithmName == "Random_CheckNormalDistSmoothed_CS") return new Random_CheckNormalDistSmoothed_CS(task);
			if (algorithmName == "Random_CheckUniformDist_CS") return new Random_CheckUniformDist_CS(task);
			if (algorithmName == "Random_CheckUniformSmoothed_CS") return new Random_CheckUniformSmoothed_CS(task);
			if (algorithmName == "Random_Clusters_CS") return new Random_Clusters_CS(task);
			if (algorithmName == "Random_CustomDistribution_CS") return new Random_CustomDistribution_CS(task);
			if (algorithmName == "Random_CustomHistogram_CS") return new Random_CustomHistogram_CS(task);
			if (algorithmName == "Random_Enumerable_CS") return new Random_Enumerable_CS(task);
			if (algorithmName == "Random_KalmanPoints_CS") return new Random_KalmanPoints_CS(task);
			if (algorithmName == "Random_LUTMask_CS") return new Random_LUTMask_CS(task);
			if (algorithmName == "Random_MonteCarlo_CS") return new Random_MonteCarlo_CS(task);
			if (algorithmName == "Random_NormalDist_CS") return new Random_NormalDist_CS(task);
			if (algorithmName == "Random_PatternGenerator_CS") return new Random_PatternGenerator_CS(task);
			if (algorithmName == "Random_Point2d_CS") return new Random_Point2d_CS(task);
			if (algorithmName == "Random_Shuffle_CS") return new Random_Shuffle_CS(task);
			if (algorithmName == "Random_StaticTV_CS") return new Random_StaticTV_CS(task);
			if (algorithmName == "Random_StaticTVFaster_CS") return new Random_StaticTVFaster_CS(task);
			if (algorithmName == "Random_StaticTVFastSimple_CS") return new Random_StaticTVFastSimple_CS(task);
			if (algorithmName == "Random_UniformDist_CS") return new Random_UniformDist_CS(task);
			if (algorithmName == "Rectangle_Basics_CS") return new Rectangle_Basics_CS(task);
			if (algorithmName == "Rectangle_EnclosingPoints_CS") return new Rectangle_EnclosingPoints_CS(task);
			if (algorithmName == "Rectangle_Intersection_CS") return new Rectangle_Intersection_CS(task);
			if (algorithmName == "Rectangle_MultiOverlap_CS") return new Rectangle_MultiOverlap_CS(task);
			if (algorithmName == "Rectangle_Overlap_CS") return new Rectangle_Overlap_CS(task);
			if (algorithmName == "Rectangle_Rotated_CS") return new Rectangle_Rotated_CS(task);
			if (algorithmName == "Rectangle_Union_CS") return new Rectangle_Union_CS(task);
			if (algorithmName == "RecursiveBilateralFilter_CPP_CS") return new RecursiveBilateralFilter_CPP_CS(task);
			if (algorithmName == "RedCloud_Basics_CS") return new RedCloud_Basics_CS(task);
			if (algorithmName == "RedCloud_BProject3D_CS") return new RedCloud_BProject3D_CS(task);
			if (algorithmName == "RedCloud_CCompColor_CS") return new RedCloud_CCompColor_CS(task);
			if (algorithmName == "RedCloud_CellChanges_CS") return new RedCloud_CellChanges_CS(task);
			if (algorithmName == "RedCloud_Cells_CS") return new RedCloud_Cells_CS(task);
			if (algorithmName == "RedCloud_CellsAtDepth_CS") return new RedCloud_CellsAtDepth_CS(task);
			if (algorithmName == "RedCloud_CellStatsPlot_CS") return new RedCloud_CellStatsPlot_CS(task);
			if (algorithmName == "RedCloud_ColorAndDepth_CS") return new RedCloud_ColorAndDepth_CS(task);
			if (algorithmName == "RedCloud_Combine_CS") return new RedCloud_Combine_CS(task);
			if (algorithmName == "RedCloud_Consistent_CS") return new RedCloud_Consistent_CS(task);
			if (algorithmName == "RedCloud_Consistent1_CS") return new RedCloud_Consistent1_CS(task);
			if (algorithmName == "RedCloud_Consistent2_CS") return new RedCloud_Consistent2_CS(task);
			if (algorithmName == "RedCloud_ContourUpdate_CS") return new RedCloud_ContourUpdate_CS(task);
			if (algorithmName == "RedCloud_ContourVsFeatureLess_CS") return new RedCloud_ContourVsFeatureLess_CS(task);
			if (algorithmName == "RedCloud_CPP_CS") return new RedCloud_CPP_CS(task);
			if (algorithmName == "RedCloud_Delaunay_CS") return new RedCloud_Delaunay_CS(task);
			if (algorithmName == "RedCloud_DelaunayGuidedFeatures_CS") return new RedCloud_DelaunayGuidedFeatures_CS(task);
			if (algorithmName == "RedCloud_Depth_CS") return new RedCloud_Depth_CS(task);
			if (algorithmName == "RedCloud_DepthOutline_CS") return new RedCloud_DepthOutline_CS(task);
			if (algorithmName == "RedCloud_Diff_CS") return new RedCloud_Diff_CS(task);
			if (algorithmName == "RedCloud_Equations_CS") return new RedCloud_Equations_CS(task);
			if (algorithmName == "RedCloud_FeatureLessReduce_CS") return new RedCloud_FeatureLessReduce_CS(task);
			if (algorithmName == "RedCloud_Features_CS") return new RedCloud_Features_CS(task);
			if (algorithmName == "RedCloud_FindCells_CPP_CS") return new RedCloud_FindCells_CPP_CS(task);
			if (algorithmName == "RedCloud_Flippers_CS") return new RedCloud_Flippers_CS(task);
			if (algorithmName == "RedCloud_FloodPoint_CS") return new RedCloud_FloodPoint_CS(task);
			if (algorithmName == "RedCloud_FourColor_CS") return new RedCloud_FourColor_CS(task);
			if (algorithmName == "RedCloud_FPS_CS") return new RedCloud_FPS_CS(task);
			if (algorithmName == "RedCloud_Gaps_CS") return new RedCloud_Gaps_CS(task);
			if (algorithmName == "RedCloud_GenCellContains_CS") return new RedCloud_GenCellContains_CS(task);
			if (algorithmName == "RedCloud_Hue_CS") return new RedCloud_Hue_CS(task);
			if (algorithmName == "RedCloud_Hulls_CS") return new RedCloud_Hulls_CS(task);
			if (algorithmName == "RedCloud_JoinCells_CS") return new RedCloud_JoinCells_CS(task);
			if (algorithmName == "RedCloud_KMeans_CS") return new RedCloud_KMeans_CS(task);
			if (algorithmName == "RedCloud_LeftRight_CS") return new RedCloud_LeftRight_CS(task);
			if (algorithmName == "RedCloud_LikelyFlatSurfaces_CS") return new RedCloud_LikelyFlatSurfaces_CS(task);
			if (algorithmName == "RedCloud_MaxDist_CPP_CS") return new RedCloud_MaxDist_CPP_CS(task);
			if (algorithmName == "RedCloud_MaxDist_CS") return new RedCloud_MaxDist_CS(task);
			if (algorithmName == "RedCloud_MeterByMeter_CS") return new RedCloud_MeterByMeter_CS(task);
			if (algorithmName == "RedCloud_MostlyColor_CS") return new RedCloud_MostlyColor_CS(task);
			if (algorithmName == "RedCloud_MotionBasics_CS") return new RedCloud_MotionBasics_CS(task);
			if (algorithmName == "RedCloud_MotionBGsubtract_CS") return new RedCloud_MotionBGsubtract_CS(task);
			if (algorithmName == "RedCloud_NaturalColor_CS") return new RedCloud_NaturalColor_CS(task);
			if (algorithmName == "RedCloud_NaturalGray_CS") return new RedCloud_NaturalGray_CS(task);
			if (algorithmName == "RedCloud_OnlyColorAlt_CS") return new RedCloud_OnlyColorAlt_CS(task);
			if (algorithmName == "RedCloud_OnlyColorHist3D_CS") return new RedCloud_OnlyColorHist3D_CS(task);
			if (algorithmName == "RedCloud_OutlineColor_CS") return new RedCloud_OutlineColor_CS(task);
			if (algorithmName == "RedCloud_Overlaps_CS") return new RedCloud_Overlaps_CS(task);
			if (algorithmName == "RedCloud_PlaneColor_CS") return new RedCloud_PlaneColor_CS(task);
			if (algorithmName == "RedCloud_PlaneEq3D_CS") return new RedCloud_PlaneEq3D_CS(task);
			if (algorithmName == "RedCloud_PlaneFromContour_CS") return new RedCloud_PlaneFromContour_CS(task);
			if (algorithmName == "RedCloud_PlaneFromMask_CS") return new RedCloud_PlaneFromMask_CS(task);
			if (algorithmName == "RedCloud_Planes_CS") return new RedCloud_Planes_CS(task);
			if (algorithmName == "RedCloud_PlusTiers_CS") return new RedCloud_PlusTiers_CS(task);
			if (algorithmName == "RedCloud_ProjectCell_CS") return new RedCloud_ProjectCell_CS(task);
			if (algorithmName == "RedCloud_Reduce_CS") return new RedCloud_Reduce_CS(task);
			if (algorithmName == "RedCloud_Reduction_CS") return new RedCloud_Reduction_CS(task);
			if (algorithmName == "RedCloud_ShapeCorrelation_CS") return new RedCloud_ShapeCorrelation_CS(task);
			if (algorithmName == "RedCloud_SizeOrder_CS") return new RedCloud_SizeOrder_CS(task);
			if (algorithmName == "RedCloud_StructuredH_CS") return new RedCloud_StructuredH_CS(task);
			if (algorithmName == "RedCloud_StructuredV_CS") return new RedCloud_StructuredV_CS(task);
			if (algorithmName == "RedCloud_Tiers_CS") return new RedCloud_Tiers_CS(task);
			if (algorithmName == "RedCloud_TiersBinarize_CS") return new RedCloud_TiersBinarize_CS(task);
			if (algorithmName == "RedCloud_TopX_CS") return new RedCloud_TopX_CS(task);
			if (algorithmName == "RedCloud_TopXHulls_CS") return new RedCloud_TopXHulls_CS(task);
			if (algorithmName == "RedCloud_TopXNeighbors_CS") return new RedCloud_TopXNeighbors_CS(task);
			if (algorithmName == "RedCloud_UnmatchedCount_CS") return new RedCloud_UnmatchedCount_CS(task);
			if (algorithmName == "RedCloud_UnstableCells_CS") return new RedCloud_UnstableCells_CS(task);
			if (algorithmName == "RedCloud_UnstableHulls_CS") return new RedCloud_UnstableHulls_CS(task);
			if (algorithmName == "RedCloud_World_CS") return new RedCloud_World_CS(task);
			if (algorithmName == "RedCloud_XZ_CS") return new RedCloud_XZ_CS(task);
			if (algorithmName == "RedCloud_YZ_CS") return new RedCloud_YZ_CS(task);
			if (algorithmName == "RedTrack_Basics_CS") return new RedTrack_Basics_CS(task);
			if (algorithmName == "RedTrack_Features_CS") return new RedTrack_Features_CS(task);
			if (algorithmName == "RedTrack_FeaturesKNN_CS") return new RedTrack_FeaturesKNN_CS(task);
			if (algorithmName == "RedTrack_GoodCell_CS") return new RedTrack_GoodCell_CS(task);
			if (algorithmName == "RedTrack_GoodCellInput_CS") return new RedTrack_GoodCellInput_CS(task);
			if (algorithmName == "RedTrack_GoodCells_CS") return new RedTrack_GoodCells_CS(task);
			if (algorithmName == "RedTrack_Lines_CS") return new RedTrack_Lines_CS(task);
			if (algorithmName == "RedTrack_LineSingle_CS") return new RedTrack_LineSingle_CS(task);
			if (algorithmName == "RedTrack_Points_CS") return new RedTrack_Points_CS(task);
			if (algorithmName == "Reduction_Basics_CS") return new Reduction_Basics_CS(task);
			if (algorithmName == "Reduction_BGR_CS") return new Reduction_BGR_CS(task);
			if (algorithmName == "Reduction_Edges_CS") return new Reduction_Edges_CS(task);
			if (algorithmName == "Reduction_Floodfill_CS") return new Reduction_Floodfill_CS(task);
			if (algorithmName == "Reduction_HeatMapLines_CS") return new Reduction_HeatMapLines_CS(task);
			if (algorithmName == "Reduction_Histogram_CS") return new Reduction_Histogram_CS(task);
			if (algorithmName == "Reduction_PointCloud_CS") return new Reduction_PointCloud_CS(task);
			if (algorithmName == "Reduction_XYZ_CS") return new Reduction_XYZ_CS(task);
			if (algorithmName == "Remap_Basics_CS") return new Remap_Basics_CS(task);
			if (algorithmName == "Remap_Flip_CS") return new Remap_Flip_CS(task);
			if (algorithmName == "Resize_Basics_CS") return new Resize_Basics_CS(task);
			if (algorithmName == "Resize_Preserve_CS") return new Resize_Preserve_CS(task);
			if (algorithmName == "Resize_Proportional_CS") return new Resize_Proportional_CS(task);
			if (algorithmName == "Resize_Smaller_CS") return new Resize_Smaller_CS(task);
			if (algorithmName == "Retina_Basics_CPP_CS") return new Retina_Basics_CPP_CS(task);
			if (algorithmName == "Retina_Depth_CS") return new Retina_Depth_CS(task);
			if (algorithmName == "ROI_Accumulate_CS") return new ROI_Accumulate_CS(task);
			if (algorithmName == "ROI_AccumulateOld_CS") return new ROI_AccumulateOld_CS(task);
			if (algorithmName == "ROI_Basics_CS") return new ROI_Basics_CS(task);
			if (algorithmName == "ROI_FindNonZeroNoSingle_CS") return new ROI_FindNonZeroNoSingle_CS(task);
			if (algorithmName == "Rotate_Basics_CS") return new Rotate_Basics_CS(task);
			if (algorithmName == "Rotate_BasicsQT_CS") return new Rotate_BasicsQT_CS(task);
			if (algorithmName == "Rotate_Box_CS") return new Rotate_Box_CS(task);
			if (algorithmName == "Rotate_Example_CS") return new Rotate_Example_CS(task);
			if (algorithmName == "Rotate_Horizon_CS") return new Rotate_Horizon_CS(task);
			if (algorithmName == "Rotate_Poly_CS") return new Rotate_Poly_CS(task);
			if (algorithmName == "Rotate_PolyQT_CS") return new Rotate_PolyQT_CS(task);
			if (algorithmName == "Salience_Basics_CPP_CS") return new Salience_Basics_CPP_CS(task);
			if (algorithmName == "Salience_Basics_MT_CPP_CS") return new Salience_Basics_MT_CPP_CS(task);
			if (algorithmName == "Sides_Basics_CS") return new Sides_Basics_CS(task);
			if (algorithmName == "Sides_ColorC_CS") return new Sides_ColorC_CS(task);
			if (algorithmName == "Sides_Corner_CS") return new Sides_Corner_CS(task);
			if (algorithmName == "Sides_Profile_CS") return new Sides_Profile_CS(task);
			if (algorithmName == "Sieve_Basics_CS") return new Sieve_Basics_CS(task);
			if (algorithmName == "Sieve_Image_CS") return new Sieve_Image_CS(task);
			if (algorithmName == "SLR_Basics_CS") return new SLR_Basics_CS(task);
			if (algorithmName == "SLR_Data_CS") return new SLR_Data_CS(task);
			if (algorithmName == "SLR_DepthHist_CS") return new SLR_DepthHist_CS(task);
			if (algorithmName == "SLR_Image_CS") return new SLR_Image_CS(task);
			if (algorithmName == "SLR_SurfaceH_CS") return new SLR_SurfaceH_CS(task);
			if (algorithmName == "SLR_TrendCompare_CS") return new SLR_TrendCompare_CS(task);
			if (algorithmName == "SLR_TrendImages_CS") return new SLR_TrendImages_CS(task);
			if (algorithmName == "SLR_Trends_CS") return new SLR_Trends_CS(task);
			if (algorithmName == "Smoothing_Exterior_CS") return new Smoothing_Exterior_CS(task);
			if (algorithmName == "Smoothing_Interior_CS") return new Smoothing_Interior_CS(task);
			if (algorithmName == "Solve_ByArray_CS") return new Solve_ByArray_CS(task);
			if (algorithmName == "Solve_ByMat_CS") return new Solve_ByMat_CS(task);
			if (algorithmName == "Sort_1Channel_CS") return new Sort_1Channel_CS(task);
			if (algorithmName == "Sort_3Channel_CS") return new Sort_3Channel_CS(task);
			if (algorithmName == "Sort_Basics_CS") return new Sort_Basics_CS(task);
			if (algorithmName == "Sort_FeatureLess_CS") return new Sort_FeatureLess_CS(task);
			if (algorithmName == "Sort_GrayScale_CS") return new Sort_GrayScale_CS(task);
			if (algorithmName == "Sort_GrayScale1_CS") return new Sort_GrayScale1_CS(task);
			if (algorithmName == "Sort_Integer_CS") return new Sort_Integer_CS(task);
			if (algorithmName == "Sort_MLPrepTest_CPP_CS") return new Sort_MLPrepTest_CPP_CS(task);
			if (algorithmName == "Sort_RectAndMask_CS") return new Sort_RectAndMask_CS(task);
			if (algorithmName == "Spectrum_Basics_CS") return new Spectrum_Basics_CS(task);
			if (algorithmName == "Spectrum_Breakdown_CS") return new Spectrum_Breakdown_CS(task);
			if (algorithmName == "Spectrum_CellZoom_CS") return new Spectrum_CellZoom_CS(task);
			if (algorithmName == "Spectrum_Cloud_CS") return new Spectrum_Cloud_CS(task);
			if (algorithmName == "Spectrum_Gray_CS") return new Spectrum_Gray_CS(task);
			if (algorithmName == "Spectrum_GrayAndCloud_CS") return new Spectrum_GrayAndCloud_CS(task);
			if (algorithmName == "Spectrum_Mask_CS") return new Spectrum_Mask_CS(task);
			if (algorithmName == "Spectrum_RedCloud_CS") return new Spectrum_RedCloud_CS(task);
			if (algorithmName == "Spectrum_RGB_CS") return new Spectrum_RGB_CS(task);
			if (algorithmName == "Spectrum_X_CS") return new Spectrum_X_CS(task);
			if (algorithmName == "Spectrum_Y_CS") return new Spectrum_Y_CS(task);
			if (algorithmName == "Spectrum_Z_CS") return new Spectrum_Z_CS(task);
			if (algorithmName == "Stabilizer_Basics_CS") return new Stabilizer_Basics_CS(task);
			if (algorithmName == "Stabilizer_BasicsRandomInput_CS") return new Stabilizer_BasicsRandomInput_CS(task);
			if (algorithmName == "Stabilizer_BasicsTest_CS") return new Stabilizer_BasicsTest_CS(task);
			if (algorithmName == "Stabilizer_CornerPoints_CS") return new Stabilizer_CornerPoints_CS(task);
			if (algorithmName == "Stabilizer_OpticalFlow_CS") return new Stabilizer_OpticalFlow_CS(task);
			if (algorithmName == "Stabilizer_VerticalIMU_CS") return new Stabilizer_VerticalIMU_CS(task);
			if (algorithmName == "Stable_Basics_CS") return new Stable_Basics_CS(task);
			if (algorithmName == "Stable_BasicsCount_CS") return new Stable_BasicsCount_CS(task);
			if (algorithmName == "Stable_FAST_CS") return new Stable_FAST_CS(task);
			if (algorithmName == "Stable_GoodFeatures_CS") return new Stable_GoodFeatures_CS(task);
			if (algorithmName == "Stable_Lines_CS") return new Stable_Lines_CS(task);
			if (algorithmName == "Stitch_Basics_CS") return new Stitch_Basics_CS(task);
			if (algorithmName == "Structured_Cloud_CS") return new Structured_Cloud_CS(task);
			if (algorithmName == "Structured_Cloud2_CS") return new Structured_Cloud2_CS(task);
			if (algorithmName == "Structured_CountSide_CS") return new Structured_CountSide_CS(task);
			if (algorithmName == "Structured_CountSideSum_CS") return new Structured_CountSideSum_CS(task);
			if (algorithmName == "Structured_CountTop_CS") return new Structured_CountTop_CS(task);
			if (algorithmName == "Structured_Crosshairs_CS") return new Structured_Crosshairs_CS(task);
			if (algorithmName == "Structured_Depth_CS") return new Structured_Depth_CS(task);
			if (algorithmName == "Structured_FeatureLines_CS") return new Structured_FeatureLines_CS(task);
			if (algorithmName == "Structured_FloorCeiling_CS") return new Structured_FloorCeiling_CS(task);
			if (algorithmName == "Structured_LinearizeFloor_CS") return new Structured_LinearizeFloor_CS(task);
			if (algorithmName == "Structured_MouseSlice_CS") return new Structured_MouseSlice_CS(task);
			if (algorithmName == "Structured_MultiSlice_CS") return new Structured_MultiSlice_CS(task);
			if (algorithmName == "Structured_MultiSliceH_CS") return new Structured_MultiSliceH_CS(task);
			if (algorithmName == "Structured_MultiSliceLines_CS") return new Structured_MultiSliceLines_CS(task);
			if (algorithmName == "Structured_MultiSlicePolygon_CS") return new Structured_MultiSlicePolygon_CS(task);
			if (algorithmName == "Structured_MultiSliceV_CS") return new Structured_MultiSliceV_CS(task);
			if (algorithmName == "Structured_Rebuild_CS") return new Structured_Rebuild_CS(task);
			if (algorithmName == "Structured_ROI_CS") return new Structured_ROI_CS(task);
			if (algorithmName == "Structured_SliceEither_CS") return new Structured_SliceEither_CS(task);
			if (algorithmName == "Structured_SliceH_CS") return new Structured_SliceH_CS(task);
			if (algorithmName == "Structured_SliceV_CS") return new Structured_SliceV_CS(task);
			if (algorithmName == "Structured_SliceXPlot_CS") return new Structured_SliceXPlot_CS(task);
			if (algorithmName == "Structured_SliceYPlot_CS") return new Structured_SliceYPlot_CS(task);
			if (algorithmName == "Structured_SurveyH_CS") return new Structured_SurveyH_CS(task);
			if (algorithmName == "Structured_SurveyV_CS") return new Structured_SurveyV_CS(task);
			if (algorithmName == "Structured_Tiles_CS") return new Structured_Tiles_CS(task);
			if (algorithmName == "Structured_TransformH_CS") return new Structured_TransformH_CS(task);
			if (algorithmName == "Structured_TransformV_CS") return new Structured_TransformV_CS(task);
			if (algorithmName == "SuperPixel_Basics_CPP_CS") return new SuperPixel_Basics_CPP_CS(task);
			if (algorithmName == "SuperPixel_Basics_CS") return new SuperPixel_Basics_CS(task);
			if (algorithmName == "SuperPixel_BinarizedImage_CS") return new SuperPixel_BinarizedImage_CS(task);
			if (algorithmName == "SuperPixel_Depth_CS") return new SuperPixel_Depth_CS(task);
			if (algorithmName == "SuperPixel_WithCanny_CS") return new SuperPixel_WithCanny_CS(task);
			if (algorithmName == "SuperPixel_WithLineDetector_CS") return new SuperPixel_WithLineDetector_CS(task);
			if (algorithmName == "SuperRes_Basics_CS") return new SuperRes_Basics_CS(task);
			if (algorithmName == "SuperRes_Input_CS") return new SuperRes_Input_CS(task);
			if (algorithmName == "SuperRes_SubPixelZoom_CS") return new SuperRes_SubPixelZoom_CS(task);
			if (algorithmName == "SVD_Example_CS") return new SVD_Example_CS(task);
			if (algorithmName == "SVD_Example2_CS") return new SVD_Example2_CS(task);
			if (algorithmName == "SVD_Gaussian_CS") return new SVD_Gaussian_CS(task);
			if (algorithmName == "SVM_Basics_CS") return new SVM_Basics_CS(task);
			if (algorithmName == "SVM_ReuseBasics_CS") return new SVM_ReuseBasics_CS(task);
			if (algorithmName == "SVM_ReuseRandom_CS") return new SVM_ReuseRandom_CS(task);
			if (algorithmName == "SVM_SampleData_CS") return new SVM_SampleData_CS(task);
			if (algorithmName == "SVM_TestCase_CS") return new SVM_TestCase_CS(task);
			if (algorithmName == "Swarm_Basics_CS") return new Swarm_Basics_CS(task);
			if (algorithmName == "Swarm_Flood_CS") return new Swarm_Flood_CS(task);
			if (algorithmName == "Swarm_Flood2_CS") return new Swarm_Flood2_CS(task);
			if (algorithmName == "Swarm_Flood3_CS") return new Swarm_Flood3_CS(task);
			if (algorithmName == "Swarm_LeftRight_CS") return new Swarm_LeftRight_CS(task);
			if (algorithmName == "Swarm_LeftRightFeatures_CS") return new Swarm_LeftRightFeatures_CS(task);
			if (algorithmName == "Swarm_Percentage_CS") return new Swarm_Percentage_CS(task);
			if (algorithmName == "Tessallate_Basics_CS") return new Tessallate_Basics_CS(task);
			if (algorithmName == "Tessallate_Bricks_CS") return new Tessallate_Bricks_CS(task);
			if (algorithmName == "Tessallate_QuadHulls_CS") return new Tessallate_QuadHulls_CS(task);
			if (algorithmName == "Tessallate_QuadMinMax_CS") return new Tessallate_QuadMinMax_CS(task);
			if (algorithmName == "Tessallate_QuadSimple_CS") return new Tessallate_QuadSimple_CS(task);
			if (algorithmName == "Tessallate_Triangles_CS") return new Tessallate_Triangles_CS(task);
			if (algorithmName == "Texture_Basics_CS") return new Texture_Basics_CS(task);
			if (algorithmName == "Texture_Flow_CS") return new Texture_Flow_CS(task);
			if (algorithmName == "Texture_Flow_Depth_CS") return new Texture_Flow_Depth_CS(task);
			if (algorithmName == "Texture_Flow_Reduction_CS") return new Texture_Flow_Reduction_CS(task);
			if (algorithmName == "Thickness_Basics_CS") return new Thickness_Basics_CS(task);
			if (algorithmName == "Threading_Test_CS") return new Threading_Test_CS(task);
			if (algorithmName == "Threading_Test1_CS") return new Threading_Test1_CS(task);
			if (algorithmName == "Threshold_Adaptive_CS") return new Threshold_Adaptive_CS(task);
			if (algorithmName == "Threshold_Basics_CS") return new Threshold_Basics_CS(task);
			if (algorithmName == "Threshold_ByChannels_CS") return new Threshold_ByChannels_CS(task);
			if (algorithmName == "Threshold_ColorSource_CS") return new Threshold_ColorSource_CS(task);
			if (algorithmName == "Threshold_Definitions_CS") return new Threshold_Definitions_CS(task);
			if (algorithmName == "Tracker_Basics_CPP_CS") return new Tracker_Basics_CPP_CS(task);
			if (algorithmName == "Transform_Affine3D_CS") return new Transform_Affine3D_CS(task);
			if (algorithmName == "Transform_Resize_CS") return new Transform_Resize_CS(task);
			if (algorithmName == "Transform_Rotate_CS") return new Transform_Rotate_CS(task);
			if (algorithmName == "TransformationMatrix_Basics_CS") return new TransformationMatrix_Basics_CS(task);
			if (algorithmName == "Triangle_Basics_CS") return new Triangle_Basics_CS(task);
			if (algorithmName == "Triangle_Cell_CS") return new Triangle_Cell_CS(task);
			if (algorithmName == "Triangle_HullContour_CS") return new Triangle_HullContour_CS(task);
			if (algorithmName == "Triangle_Mask_CS") return new Triangle_Mask_CS(task);
			if (algorithmName == "Triangle_RedCloud_CS") return new Triangle_RedCloud_CS(task);
			if (algorithmName == "VectorMagnitude_CS") return new VectorMagnitude_CS(task);
			if (algorithmName == "Video_Basics_CS") return new Video_Basics_CS(task);
			if (algorithmName == "Video_CarCComp_CS") return new Video_CarCComp_CS(task);
			if (algorithmName == "Video_CarCounting_CS") return new Video_CarCounting_CS(task);
			if (algorithmName == "Video_MinCircle_CS") return new Video_MinCircle_CS(task);
			if (algorithmName == "Video_MinRect_CS") return new Video_MinRect_CS(task);
			if (algorithmName == "Vignetting_Basics_CPP_CS") return new Vignetting_Basics_CPP_CS(task);
			if (algorithmName == "Vignetting_Devignetting_CS") return new Vignetting_Devignetting_CS(task);
			if (algorithmName == "Vignetting_Removal_CS") return new Vignetting_Removal_CS(task);
			if (algorithmName == "Vignetting_VB_CS") return new Vignetting_VB_CS(task);
			if (algorithmName == "Volume_Basics_CS") return new Volume_Basics_CS(task);
			if (algorithmName == "Voronoi_Basics_CS") return new Voronoi_Basics_CS(task);
			if (algorithmName == "Voronoi_Compare_CS") return new Voronoi_Compare_CS(task);
			if (algorithmName == "Voronoi_CS") return new Voronoi_CS(task);
			if (algorithmName == "WarpAffine_3Points_CS") return new WarpAffine_3Points_CS(task);
			if (algorithmName == "WarpAffine_4Points_CS") return new WarpAffine_4Points_CS(task);
			if (algorithmName == "WarpAffine_Basics_CS") return new WarpAffine_Basics_CS(task);
			if (algorithmName == "WarpAffine_BasicsQT_CS") return new WarpAffine_BasicsQT_CS(task);
			if (algorithmName == "WarpAffine_Captcha_CS") return new WarpAffine_Captcha_CS(task);
			if (algorithmName == "WarpAffine_Repeated_CS") return new WarpAffine_Repeated_CS(task);
			if (algorithmName == "WarpAffine_RepeatedExample8_CS") return new WarpAffine_RepeatedExample8_CS(task);
			if (algorithmName == "WarpModel_Basics_CS") return new WarpModel_Basics_CS(task);
			if (algorithmName == "WarpModel_ECC_CPP_CS") return new WarpModel_ECC_CPP_CS(task);
			if (algorithmName == "WarpModel_Input_CS") return new WarpModel_Input_CS(task);
			if (algorithmName == "WarpPerspective_Basics_CS") return new WarpPerspective_Basics_CS(task);
			if (algorithmName == "WarpPerspective_WidthHeight_CS") return new WarpPerspective_WidthHeight_CS(task);
			if (algorithmName == "Watershed_Basics_CS") return new Watershed_Basics_CS(task);
			if (algorithmName == "Watershed_DepthAuto_CS") return new Watershed_DepthAuto_CS(task);
			if (algorithmName == "Watershed_DepthReduction_CS") return new Watershed_DepthReduction_CS(task);
			if (algorithmName == "XFeatures2D_StarDetector_CS") return new XFeatures2D_StarDetector_CS(task);
			if (algorithmName == "XPhoto_Bm3dDenoise_CS") return new XPhoto_Bm3dDenoise_CS(task);
			if (algorithmName == "XPhoto_Bm3dDenoiseDepthImage_CS") return new XPhoto_Bm3dDenoiseDepthImage_CS(task);
			if (algorithmName == "XPhoto_Inpaint_CPP_CS") return new XPhoto_Inpaint_CPP_CS(task);
			if (algorithmName == "XPhoto_Inpaint_CS") return new XPhoto_Inpaint_CS(task);
			if (algorithmName == "XPhoto_OilPaint_CPP_CS") return new XPhoto_OilPaint_CPP_CS(task);
			return new AddWeighted_Basics_CS(task);
		}
	}
}
