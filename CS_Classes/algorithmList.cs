// this file is automatically generated in a pre-build step.  Do not waste your time modifying manually.
using VB_Classes;
using CS_Classes;
namespace CS_Classes
{
	public class CSAlgorithmList
	{
		public CS_Parent createCSAlgorithm( string algorithmName, VB_Classes.VBtask task)
		{
			if (algorithmName == "CSharp_AddWeighted_Basics") return new CSharp_AddWeighted_Basics(task);
			if (algorithmName == "CSharp_AddWeighted_Edges") return new CSharp_AddWeighted_Edges(task);
			if (algorithmName == "CSharp_AddWeighted_ImageAccumulate") return new CSharp_AddWeighted_ImageAccumulate(task);
			if (algorithmName == "CSharp_AddWeighted_InfraRed") return new CSharp_AddWeighted_InfraRed(task);
			if (algorithmName == "CSharp_AlphaChannel_Basics") return new CSharp_AlphaChannel_Basics(task);
			if (algorithmName == "CSharp_Annealing_Basics_CPP") return new CSharp_Annealing_Basics_CPP(task);
			if (algorithmName == "CSharp_Annealing_MultiThreaded_CPP") return new CSharp_Annealing_MultiThreaded_CPP(task);
			if (algorithmName == "CSharp_ApproxPoly_Basics") return new CSharp_ApproxPoly_Basics(task);
			if (algorithmName == "CSharp_ApproxPoly_FindandDraw") return new CSharp_ApproxPoly_FindandDraw(task);
			if (algorithmName == "CSharp_ApproxPoly_Hull") return new CSharp_ApproxPoly_Hull(task);
			if (algorithmName == "CSharp_Area_FindNonZero") return new CSharp_Area_FindNonZero(task);
			if (algorithmName == "CSharp_Area_MinMotionRect") return new CSharp_Area_MinMotionRect(task);
			if (algorithmName == "CSharp_Area_MinRect") return new CSharp_Area_MinRect(task);
			if (algorithmName == "CSharp_Area_MinTriangle_CPP") return new CSharp_Area_MinTriangle_CPP(task);
			if (algorithmName == "CSharp_Area_SoloPoints") return new CSharp_Area_SoloPoints(task);
			if (algorithmName == "CSharp_AsciiArt_Basics") return new CSharp_AsciiArt_Basics(task);
			if (algorithmName == "CSharp_AsciiArt_Color") return new CSharp_AsciiArt_Color(task);
			if (algorithmName == "CSharp_AsciiArt_Diff") return new CSharp_AsciiArt_Diff(task);
			if (algorithmName == "CSharp_BackProject_Basics") return new CSharp_BackProject_Basics(task);
			if (algorithmName == "CSharp_BackProject_BasicsKeyboard") return new CSharp_BackProject_BasicsKeyboard(task);
			if (algorithmName == "CSharp_BackProject_Depth") return new CSharp_BackProject_Depth(task);
			if (algorithmName == "CSharp_BackProject_Display") return new CSharp_BackProject_Display(task);
			if (algorithmName == "CSharp_BackProject_FeatureLess") return new CSharp_BackProject_FeatureLess(task);
			if (algorithmName == "CSharp_BackProject_Full") return new CSharp_BackProject_Full(task);
			if (algorithmName == "CSharp_BackProject_FullEqualized") return new CSharp_BackProject_FullEqualized(task);
			if (algorithmName == "CSharp_BackProject_FullLines") return new CSharp_BackProject_FullLines(task);
			if (algorithmName == "CSharp_BackProject_Horizontal") return new CSharp_BackProject_Horizontal(task);
			if (algorithmName == "CSharp_BackProject_Hue") return new CSharp_BackProject_Hue(task);
			if (algorithmName == "CSharp_BackProject_Image") return new CSharp_BackProject_Image(task);
			if (algorithmName == "CSharp_BackProject_LineSide") return new CSharp_BackProject_LineSide(task);
			if (algorithmName == "CSharp_BackProject_LineTop") return new CSharp_BackProject_LineTop(task);
			if (algorithmName == "CSharp_BackProject_MaskLines") return new CSharp_BackProject_MaskLines(task);
			if (algorithmName == "CSharp_BackProject_Masks") return new CSharp_BackProject_Masks(task);
			if (algorithmName == "CSharp_BackProject_MeterByMeter") return new CSharp_BackProject_MeterByMeter(task);
			if (algorithmName == "CSharp_BackProject_Mouse") return new CSharp_BackProject_Mouse(task);
			if (algorithmName == "CSharp_BackProject_PointCloud") return new CSharp_BackProject_PointCloud(task);
			if (algorithmName == "CSharp_BackProject_Reduction") return new CSharp_BackProject_Reduction(task);
			if (algorithmName == "CSharp_BackProject_Side") return new CSharp_BackProject_Side(task);
			if (algorithmName == "CSharp_BackProject_SoloSide") return new CSharp_BackProject_SoloSide(task);
			if (algorithmName == "CSharp_BackProject_SoloTop") return new CSharp_BackProject_SoloTop(task);
			if (algorithmName == "CSharp_BackProject_Top") return new CSharp_BackProject_Top(task);
			if (algorithmName == "CSharp_BackProject_Unstable") return new CSharp_BackProject_Unstable(task);
			if (algorithmName == "CSharp_BackProject_Vertical") return new CSharp_BackProject_Vertical(task);
			if (algorithmName == "CSharp_Benford_Basics") return new CSharp_Benford_Basics(task);
			if (algorithmName == "CSharp_Benford_Depth") return new CSharp_Benford_Depth(task);
			if (algorithmName == "CSharp_Benford_JPEG") return new CSharp_Benford_JPEG(task);
			if (algorithmName == "CSharp_Benford_JPEG99") return new CSharp_Benford_JPEG99(task);
			if (algorithmName == "CSharp_Benford_NormalizedImage") return new CSharp_Benford_NormalizedImage(task);
			if (algorithmName == "CSharp_Benford_NormalizedImage99") return new CSharp_Benford_NormalizedImage99(task);
			if (algorithmName == "CSharp_Benford_PNG") return new CSharp_Benford_PNG(task);
			if (algorithmName == "CSharp_Benford_Primes") return new CSharp_Benford_Primes(task);
			if (algorithmName == "CSharp_Bezier_Basics") return new CSharp_Bezier_Basics(task);
			if (algorithmName == "CSharp_Bezier_Example") return new CSharp_Bezier_Example(task);
			if (algorithmName == "CSharp_BGRPattern_Basics") return new CSharp_BGRPattern_Basics(task);
			if (algorithmName == "CSharp_BGSubtract_Basics") return new CSharp_BGSubtract_Basics(task);
			if (algorithmName == "CSharp_BGSubtract_Basics_QT") return new CSharp_BGSubtract_Basics_QT(task);
			if (algorithmName == "CSharp_BGSubtract_DepthOrColorMotion") return new CSharp_BGSubtract_DepthOrColorMotion(task);
			if (algorithmName == "CSharp_BGSubtract_GMG_KNN") return new CSharp_BGSubtract_GMG_KNN(task);
			if (algorithmName == "CSharp_BGSubtract_MOG") return new CSharp_BGSubtract_MOG(task);
			if (algorithmName == "CSharp_BGSubtract_MOG_Retina") return new CSharp_BGSubtract_MOG_Retina(task);
			if (algorithmName == "CSharp_BGSubtract_MOG_RGBDepth") return new CSharp_BGSubtract_MOG_RGBDepth(task);
			if (algorithmName == "CSharp_BGSubtract_MOG2") return new CSharp_BGSubtract_MOG2(task);
			if (algorithmName == "CSharp_BGSubtract_MOG2_QT") return new CSharp_BGSubtract_MOG2_QT(task);
			if (algorithmName == "CSharp_BGSubtract_MotionDetect") return new CSharp_BGSubtract_MotionDetect(task);
			if (algorithmName == "CSharp_BGSubtract_Reduction") return new CSharp_BGSubtract_Reduction(task);
			if (algorithmName == "CSharp_BGSubtract_Synthetic") return new CSharp_BGSubtract_Synthetic(task);
			if (algorithmName == "CSharp_BGSubtract_Synthetic_CPP") return new CSharp_BGSubtract_Synthetic_CPP(task);
			if (algorithmName == "CSharp_BGSubtract_Video") return new CSharp_BGSubtract_Video(task);
			if (algorithmName == "CSharp_Bin2Way_Basics") return new CSharp_Bin2Way_Basics(task);
			if (algorithmName == "CSharp_Bin2Way_KMeans") return new CSharp_Bin2Way_KMeans(task);
			if (algorithmName == "CSharp_Bin2Way_RecurseOnce") return new CSharp_Bin2Way_RecurseOnce(task);
			if (algorithmName == "CSharp_Bin2Way_RedCloud") return new CSharp_Bin2Way_RedCloud(task);
			if (algorithmName == "CSharp_Bin2Way_RedCloudDarkest") return new CSharp_Bin2Way_RedCloudDarkest(task);
			if (algorithmName == "CSharp_Bin2Way_RedCloudLightest") return new CSharp_Bin2Way_RedCloudLightest(task);
			if (algorithmName == "CSharp_Bin3Way_Basics") return new CSharp_Bin3Way_Basics(task);
			if (algorithmName == "CSharp_Bin3Way_Color") return new CSharp_Bin3Way_Color(task);
			if (algorithmName == "CSharp_Bin3Way_KMeans") return new CSharp_Bin3Way_KMeans(task);
			if (algorithmName == "CSharp_Bin3Way_RedCloud") return new CSharp_Bin3Way_RedCloud(task);
			if (algorithmName == "CSharp_Bin3Way_RedCloud1") return new CSharp_Bin3Way_RedCloud1(task);
			if (algorithmName == "CSharp_Bin3Way_RedCloudDarkest") return new CSharp_Bin3Way_RedCloudDarkest(task);
			if (algorithmName == "CSharp_Bin3Way_RedCloudLightest") return new CSharp_Bin3Way_RedCloudLightest(task);
			if (algorithmName == "CSharp_Bin3Way_RedCloudOther") return new CSharp_Bin3Way_RedCloudOther(task);
			if (algorithmName == "CSharp_Bin4Way_Basics") return new CSharp_Bin4Way_Basics(task);
			if (algorithmName == "CSharp_Bin4Way_Canny") return new CSharp_Bin4Way_Canny(task);
			if (algorithmName == "CSharp_Bin4Way_RedCloud") return new CSharp_Bin4Way_RedCloud(task);
			if (algorithmName == "CSharp_Bin4Way_Regions") return new CSharp_Bin4Way_Regions(task);
			if (algorithmName == "CSharp_Bin4Way_Regions1") return new CSharp_Bin4Way_Regions1(task);
			if (algorithmName == "CSharp_Bin4Way_RegionsLeftRight") return new CSharp_Bin4Way_RegionsLeftRight(task);
			if (algorithmName == "CSharp_Bin4Way_Sobel") return new CSharp_Bin4Way_Sobel(task);
			if (algorithmName == "CSharp_Bin4Way_SplitGaps") return new CSharp_Bin4Way_SplitGaps(task);
			if (algorithmName == "CSharp_Bin4Way_SplitMean") return new CSharp_Bin4Way_SplitMean(task);
			if (algorithmName == "CSharp_Bin4Way_SplitValley") return new CSharp_Bin4Way_SplitValley(task);
			if (algorithmName == "CSharp_Bin4Way_Unstable1") return new CSharp_Bin4Way_Unstable1(task);
			if (algorithmName == "CSharp_Bin4Way_UnstableEdges") return new CSharp_Bin4Way_UnstableEdges(task);
			if (algorithmName == "CSharp_Bin4Way_UnstablePixels") return new CSharp_Bin4Way_UnstablePixels(task);
			if (algorithmName == "CSharp_Bin4Way_UnstablePixels1") return new CSharp_Bin4Way_UnstablePixels1(task);
			if (algorithmName == "CSharp_Diff_Basics") return new CSharp_Diff_Basics(task);
			if (algorithmName == "CSharp_Line_Basics") return new CSharp_Line_Basics(task);
			if (algorithmName == "CSharp_Random_Basics") return new CSharp_Random_Basics(task);
			return new CSharp_AddWeighted_Basics(task);
		}
	}
}
