<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stereolabs.zed</name>
    </assembly>
    <members>
        <member name="T:sl.Camera">
            \ingroup  Video_group
             <summary>
             This class serves as the primary interface between the camera and the various features provided by the SDK.
            
             It enables seamless integration and access to a wide array of capabilities, including video streaming, depth sensing, object tracking, mapping, and much more.
             </summary>
        </member>
        <member name="F:sl.Camera.nameDll">
            <summary>
            DLL name, used for extern calls to the wrapper.
            </summary>
        </member>
        <member name="F:sl.Camera.imageWidth">
             <summary>
             Width of the textures in pixels.
            
             It corresponds to the camera's current resolution setting.
             </summary>
        </member>
        <member name="P:sl.Camera.ImageWidth">
             <summary>
             Width of the images returned by the camera in pixels.
            
             It corresponds to the camera's current resolution setting.
             </summary>
        </member>
        <member name="F:sl.Camera.imageHeight">
             <summary>
             Height of the textures in pixels.
            
             It corresponds to the camera's current resolution setting.
             </summary>
        </member>
        <member name="P:sl.Camera.ImageHeight">
             <summary>
             Height of the images returned by the camera in pixels.
            
             It corresponds to the camera's current resolution setting.
             </summary>
        </member>
        <member name="F:sl.Camera.pluginIsReady">
            <summary>
            True if the ZED SDK is installed.
            </summary>
        </member>
        <member name="F:sl.Camera.currentResolution">
            <summary>
            Current ZED resolution setting. Set at initialization.
            </summary>
        </member>
        <member name="F:sl.Camera.fpsMax">
             <summary>
             Desired FPS from the ZED camera.
            
             This is the maximum FPS for the camera's current resolution unless a lower setting was specified in Open().
             Maximum values are bound by the camera's output, not system performance.
             </summary>
        </member>
        <member name="M:sl.Camera.GetRequestedCameraFPS">
            <summary>
            Desired FPS from the ZED camera.
            
            This is the maximum FPS for the camera's current resolution unless a lower setting was specified in Open().
            \n Maximum values are bound by the camera's output, not system performance.
            </summary>
        </member>
        <member name="F:sl.Camera.baseline">
             <summary>
             Baseline of the camera (distance between the cameras).
            
             Extracted from calibration files.
             </summary>
        </member>
        <member name="P:sl.Camera.Baseline">
             <summary>
             Baseline of the camera (distance between the cameras).
            
             Extracted from calibration files.
             </summary>
        </member>
        <member name="F:sl.Camera.fov_H">
            <summary>
            Current horizontal field of view in degrees of the camera.
            </summary>
        </member>
        <member name="F:sl.Camera.fov_V">
            <summary>
            Current vertical field of view in degrees of the camera.
            </summary>
        </member>
        <member name="P:sl.Camera.HorizontalFieldOfView">
            <summary>
            Current horizontal field of view in degrees of the camera.
            </summary>
        </member>
        <member name="P:sl.Camera.VerticalFieldOfView">
            <summary>
            Current vertical field of view in degrees of the camera.
            </summary>
        </member>
        <member name="F:sl.Camera.sensorsConfiguration">
            <summary>
            Structure containing information about all the sensors available in the current device.
            </summary>
        </member>
        <member name="F:sl.Camera.calibrationParametersRaw">
            <summary>
            Stereo parameters for the current camera prior to rectification (distorted).
            </summary>
        </member>
        <member name="F:sl.Camera.calibrationParametersRectified">
            <summary>
            Stereo parameters for the current camera after rectification (undistorted).
            </summary>
        </member>
        <member name="F:sl.Camera.cameraModel">
            <summary>
            Model of the camera.
            </summary>
        </member>
        <member name="F:sl.Camera.cameraReady">
            <summary>
            Whether the camera has been successfully initialized.
            </summary>
        </member>
        <member name="P:sl.Camera.CalibrationParametersRaw">
            <summary>
            Stereo parameters for current ZED camera prior to rectification (distorted).
            </summary>
        </member>
        <member name="P:sl.Camera.CalibrationParametersRectified">
            <summary>
            Stereo parameters for current ZED camera after rectification (undistorted).
            </summary>
        </member>
        <member name="P:sl.Camera.CameraModel">
            <summary>
            Model of the camera.
            </summary>
        </member>
        <member name="P:sl.Camera.IsCameraReady">
            <summary>
            Whether the camera has been successfully initialized.
            </summary>
        </member>
        <member name="F:sl.Camera.CameraID">
            <summary>
            Camera ID (for multiple cameras)
            </summary>
        </member>
        <member name="M:sl.Camera.PtrToStringUtf8(System.IntPtr)">
            <summary>
            Return a string from a pointer to a char. Used in GetSDKVersion().
            </summary>
            <param name="ptr">Pointer to a char.</param>
            <returns>The char as a string.</returns>
        </member>
        <member name="M:sl.Camera.StringUtf8ToByte(System.String)">
            <summary>
            Convert a pointer to a char into an array of bytes. Used to send file names to SDK for SVO recording.
            </summary>
            <param name="ptr">Pointer to a char.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:sl.Camera.GetFpsForResolution(sl.RESOLUTION)">
            <summary>
            Gets the max FPS for each resolution setting.
            Higher FPS will cause lower GPU performance.
            </summary>
            <param name="reso"></param>
            <returns>The resolution</returns>
        </member>
        <member name="M:sl.Camera.GenerateUniqueID">
            <summary>
            Generate a UUID like unique id to help identify and track AI detections.
            </summary>
            <returns>A UUID like unique id.</returns>
        </member>
        <member name="M:sl.Camera.#ctor(System.Int32)">
             <summary>
             Default constructor.
            
             Creates an empty Camera object.
             </summary>
             <param name="id"></param>
        </member>
        <member name="T:sl.Camera.sl_initParameters">
            <summary>
            DLL-friendly version of InitParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.resolution">
            <summary>
            Resolution the ZED will be set to.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.cameraFps">
            <summary>
            Desired camera FPS. Max is set by resolution.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.cameraDeviceID">
            <summary>
            ID for identifying which of multiple connected ZEDs to use.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.cameraImageFlip">
            <summary>
            True to flip images horizontally.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.cameraDisableSelfCalib">
            <summary>
            True to disable self-calibration, using unoptimized optional calibration parameters.
            False is recommended for optimized calibration.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.enableRightSideMeasure">
            <summary>
            True if depth relative to the right sensor should be computed.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.svoRealTimeMode">
            <summary>
            True to skip dropped frames during SVO playback.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.depthMode">
            <summary>
            Quality level of depth calculations. Higher settings improve accuracy but cost performance.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.depthStabilization">
            <summary>
            This sets the depth stabilizer temporal smoothing strength.
            the depth stabilize smooth range is [0, 100]
            0 means a low temporal smmoothing behavior(for highly dynamic scene),
            100 means a high temporal smoothing behavior(for static scene)
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.depthMinimumDistance">
            <summary>
            Minimum distance from the camera from which depth will be computed, in the defined coordinateUnit.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.depthMaximumDistance">
            <summary>
            Maximum distance that can be computed.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.coordinateUnits">
            <summary>
            Coordinate unit for all measurements (depth, tracking, etc.).
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.coordinateSystem">
            <summary>
            Defines order and direction of coordinate system axes.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.sdkGPUId">
            <summary>
            ID of the graphics card on which the ZED's computations will be performed.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.sdkVerbose">
            <summary>
            True for the SDK to provide text feedback.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.sensorsRequired">
            <summary>
            True if sensors are required, false will not trigger an error if sensors are missing.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.enableImageEnhancement">
            <summary>
            Whether to enable improved color/gamma curves added in ZED SDK 3.0.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.openTimeoutSec">
            <summary>
            Define a timeout in seconds after which an error is reported if the \ref open() command fails.
            Set to '-1' to try to open the camera endlessly without returning error in case of failure.
            Set to '0' to return error in case of failure at the first attempt.
            This parameter only impacts the LIVE mode.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.asyncGrabCameraRecovery">
            <summary>
            Define the behavior of the automatic camera recovery during grab() function call. When async is enabled and there's an issue with the communication with the camera
            the grab() will exit after a short period and return the ERROR_CODE::CAMERA_REBOOTING warning.The recovery will run in the background until the correct communication is restored.
            When async_grab_camera_recovery is false, the grab() function is blocking and will return only once the camera communication is restored or the timeout is reached.
            The default behavior is synchronous (false), like previous ZED SDK versions
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.grabComputeCappingFPS">
            <summary>
            Define a computation upper limit to the grab frequency.
            This can be useful to get a known constant fixed rate or limit the computation load while keeping a short exposure time by setting a high camera capture framerate.
            The value should be inferior to the InitParameters::camera_fps and strictly positive.It has no effect when reading an SVO file.
            This is an upper limit and won't make a difference if the computation is slower than the desired compute capping fps.
            \note Internally the grab function always tries to get the latest available image while respecting the desired fps as much as possible.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_initParameters.enableImageValidityCheck">
            <summary>
            Enable or disable the image validity verification.
            This will perform additional verification on the image to identify corrupted data.This verification is done in the grab function and requires some computations.
            If an issue is found, the grab function will output a warning as sl.ERROR_CODE.CORRUPTED_FRAME.
            This version doesn't detect frame tearing currently.
             \n default: disabled
            </summary>
        </member>
        <member name="M:sl.Camera.sl_initParameters.#ctor(sl.InitParameters)">
            <summary>
            Copy constructor.
            </summary>
            <param name="init"></param>
        </member>
        <member name="T:sl.Camera.sl_RuntimeParameters">
            <summary>
            DLL-friendly version of RuntimeParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.measure3DReferenceFrame">
            <summary>
            Provides 3D measures (point cloud and normals) in the desired reference frame (default is REFERENCE_FRAME_CAMERA).
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.enableDepth">
            <summary>
            Defines whether the depth map should be computed.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.enableFillMode">
            <summary>
            Defines if the depth map should be completed or not, similar to the removed SENSING_MODE::FILL.
            Warning: Enabling this will override the confidence values confidenceThreshold and textureConfidenceThreshold as well as removeSaturatedAreas
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.confidenceThreshold">
            <summary>
             Defines the confidence threshold for the depth. Based on stereo matching score.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.textureConfidenceThreshold">
            <summary>
            Defines texture confidence threshold for the depth. Based on textureness confidence.
            </summary>
        </member>
        <member name="F:sl.Camera.sl_RuntimeParameters.removeSaturatedAreas">
            <summary>
            Defines if the saturated area (Luminance>=255) must be removed from depth map estimation
            </summary>
        </member>
        <member name="M:sl.Camera.sl_RuntimeParameters.#ctor(sl.RuntimeParameters)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="T:sl.Camera.sl_PositionalTrackingParameters">
            <summary>
            DLL-friendly version of PositionalTrackingParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="T:sl.Camera.sl_SpatialMappingParameters">
            <summary>
            DLL-friendly version of SpatialMappingPara (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="T:sl.Camera.sl_PlaneDetectionParameters">
            <summary>
            DLL-friendly version of PlaneDetectionParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="M:sl.Camera.Open(sl.InitParameters@)">
             <summary>
             Opens the ZED camera from the provided InitParameters.
            
             The method will also check the hardware requirements and run a self-calibration.
             </summary>
             <param name="initParameters">A structure containing all the initial parameters. Default: a preset of InitParameters.
             </param>
             <returns>
             An error code giving information about the internal process. If \ref ERROR_CODE "ERROR_CODE.SUCCESS" is returned, the camera is ready to use. Every other code indicates an error and the program should be stopped.
             </returns>
        </member>
        <member name="M:sl.Camera.Close">
             <summary>
             Closes the camera.
            
             Once destroyed, you need to recreate a camera instance to restart again.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:sl.Camera.Grab(sl.RuntimeParameters@)" -->
        <member name="M:sl.Camera.StartPublishing(sl.CommunicationParameters@)">
            <summary>
            Set this camera as a data provider for the Fusion module.
            </summary>
            <param name="jsonConfigFileName"></param>
            <returns>ERROR_CODE "ERROR_CODE.SUCCESS" if everything went fine, \ref ERROR_CODE "ERROR_CODE.FAILURE" otherwise.</returns>
        </member>
        <member name="M:sl.Camera.StopPublishing">
            <summary>
            Set this camera as normal camera(without data providing).
            </summary>
        </member>
        <member name="M:sl.Camera.GetInputType">
            <summary>
            Return the sl.INPUT_TYPE currently used.
            </summary>
            <returns>The current sl.INPUT_TYPE.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveImage(sl.Mat,sl.VIEW,sl.MEM,sl.Resolution)">
            @name Video
             <summary>
             Retrieves an image texture from the ZED SDK and loads it into a sl.Mat.
            
             Use this to get an individual texture from the last grabbed frame in a human-viewable format. Image textures work for when you want the result to be visible,
             such as the direct RGB image from the camera, or a greyscale image of the depth. However it will lose accuracy if used
             to show measurements like depth or confidence, unlike measure textures.
             \note If you want to access the texture via script, you'll usually want to specify CPU memory. Then you can use
             Marshal.Copy to move them into a new byte array, which you can load into a Texture2D. Note that you may need to
             change the color space and/or flip the image.
             
             \n\note For more info, read about the SDK method it calls:
             <a href="https://www.stereolabs.com/docs/api/classsl_1_1Camera.html#a01dce4f0af6f8959a9c974ffaca656b5">retrieveImage</a>.
             </summary>
             <param name="mat">sl.Mat to fill with the new texture.</param>
             <param name="view">Image type (left RGB, right depth map, etc.)</param>
             <param name="mem">Whether the image should be on CPU or GPU memory.</param>
             <param name="resolution">Resolution of the texture.</param>
             <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetInitParameters">
             <summary>
             Returns the InitParameters associated with the Camera object.
            
             It corresponds to the structure given as argument to \ref Open() method.
             </summary>
             <returns>InitParameters containing the parameters used to initialize the Camera object.</returns>
        </member>
        <member name="M:sl.Camera.GetRuntimeParameters">
             <summary>
             Returns the RuntimeParameters used.
            
              It corresponds to the structure given as argument to the \ref Grab() method.
             </summary>
             <returns>RuntimeParameters containing the parameters that define the behavior of the \ref Grab method.</returns>
        </member>
        <member name="M:sl.Camera.GetPositionalTrackingParameters">
             <summary>
             Returns the PositionalTrackingParameters used.
            
              It corresponds to the structure given as argument to the EnablePositionalTracking() method.
             </summary>
             <returns>PositionalTrackingParameters containing the parameters used for positional tracking initialization.</returns>
        </member>
        <member name="M:sl.Camera.GetResolution(sl.RESOLUTION)">
            <summary>
            Gets the corresponding sl.Resolution from an sl.RESOLUTION.
            </summary>
            <param name="resolution">The wanted sl.RESOLUTION.</param>
            <returns>The sl.Resolution corresponding to sl.RESOLUTION given as argument.</returns>
        </member>
        <member name="M:sl.Camera.IsCameraSettingSupported(sl.VIDEO_SETTINGS)">
            <summary>
            Test if the video setting is supported by the camera.
            </summary>
            <param name="setting">The video setting to test.</param>
            <returns>true if the \ref VIDEO_SETTINGS is supported by the camera, false otherwise.</returns>
        </member>
        <member name="M:sl.Camera.SetCameraSettings(sl.VIDEO_SETTINGS,System.Int32,System.Int32)">
            <summary>
            Sets the min and max range values of the requested \ref VIDEO_SETTINGS "camera setting" (used for settings with a range).
            </summary>
            <param name="settings">The setting to be set.</param>
            <param name="minvalue">The min value of the range to set.</param>
            <param name="maxvalue">The min value of the range to set.</param>
        </member>
        <member name="M:sl.Camera.GetCameraSettings(sl.VIDEO_SETTINGS,System.Int32@,System.Int32@)">
            <summary>
            Returns the current range of the requested \ref VIDEO_SETTINGS "camera setting".
            </summary>
            <param name="settings">Setting to be retrieved (setting with range value).</param>
            <param name="minvalue">Will be set to the value of the lower bound of the range of the setting.</param>
            <param name="maxvalue">Will be set to the value of the higher bound of the range of the setting.</param>
            <returns>An sl.ERROR_CODE to indicate if the method was successful.</returns>
        </member>
        <member name="M:sl.Camera.SetCameraSettings(sl.VIDEO_SETTINGS,System.Int32)">
            <summary>
            Sets the value of the requested \ref VIDEO_SETTINGS "camera setting" (gain, brightness, hue, exposure, etc.).
            </summary>
            <param name="settings">The setting to be set.</param>
            <param name="value">The value to set. Default: auto mode</param>
        </member>
        <member name="M:sl.Camera.GetCameraSettings(sl.VIDEO_SETTINGS)">
            <summary>
            Returns the current value of the requested \ref VIDEO_SETTINGS "camera setting" (gain, brightness, hue, exposure, etc.).
            </summary>
            <param name="settings">Setting to be retrieved (brightness, contrast, gain, exposure, etc.).</param>
            <returns>The value of the requested \ref VIDEO_SETTINGS "camera setting".</returns>
        </member>
        <member name="M:sl.Camera.SetCameraSettings(sl.VIDEO_SETTINGS,sl.SIDE,sl.Rect,System.Boolean)">
            <summary>
            Overloaded method for VIDEO_SETTINGS.AEC_AGC_ROI which takes a Rect as parameter.
            </summary>
            <param name="settings"> Must be set at VIDEO_SETTINGS.AEC_AGC_ROI, otherwise the method will have no impact.</param>
            <param name="side">sl.SIDE on which to be applied for AEC/AGC computation.</param>
            <param name="roi">Rect that defines the target to be applied for AEC/AGC computation. Must be given according to camera resolution.</param>
            <param name="reset">Cancel the manual ROI and reset it to the full image.</param>
            <returns>An sl.ERROR_CODE to indicate if the method was successful.</returns>
        </member>
        <member name="M:sl.Camera.GetCameraSettings(sl.VIDEO_SETTINGS,sl.SIDE,sl.Rect@)">
            <summary>
            Overloaded method for VIDEO_SETTINGS.AEC_AGC_ROI which takes a Rect as parameter.
            </summary>
            <param name="settings"> Must be set at VIDEO_SETTINGS.AEC_AGC_ROI, otherwise the method will have no impact.</param>
            <param name="side">sl.SIDE on which to get the ROI from.</param>
            <param name="roi"> Roi that will be filled.</param>
            <returns>An sl.ERROR_CODE to indicate if the method was successful.</returns>
        </member>
        <member name="M:sl.Camera.ResetCameraSettings">
            <summary>
            Reset camera settings to default.
            </summary>
        </member>
        <member name="M:sl.Camera.GetCameraTimeStamp">
             <summary>
             Gets the timestamp at the time the latest grabbed frame was extracted from the USB stream.
            
             This is the closest timestamp you can get from when the image was taken.
             \note Must be called after calling Grab().
             </summary>
             <returns>Current timestamp in nanoseconds. -1 means it's is not available, such as with an .SVO file without compression.</returns>
        </member>
        <member name="M:sl.Camera.GetCurrentTimeStamp">
             <summary>
             Gets the current timestamp at the time the method is called.
            
             Can be compared to the camera timestamp for synchronization, since they have the same reference (the computer's start time).
             </summary>
             <returns>The timestamp in nanoseconds.</returns>
        </member>
        <member name="M:sl.Camera.GetSVOPosition">
            <summary>
            Returns the current playback position in the SVO file.
            </summary>
            <returns>The current frame position in the SVO file. -1 if the SDK is not reading an SVO.</returns>
        </member>
        <member name="M:sl.Camera.GetSVOPositionAtTimestamp(System.UInt64)">
            <summary>
            Retrieves the frame index within the SVO file corresponding to the provided timestamp.
            </summary>
            <param name="timestamp">The target timestamp for which the frame index is to be determined.</param>
            <returns>The frame index within the SVO file that aligns with the given timestamp. Returns -1 if the timestamp falls outside the bounds of the SVO file.</returns>
        </member>
        <member name="M:sl.Camera.GetSVONumberOfFrames">
            <summary>
            Returns the number of frames in the SVO file.
            </summary>
            <returns>The total number of frames in the SVO file. -1 if the SDK is not reading a SVO.</returns>
        </member>
        <member name="M:sl.Camera.SetSVOPosition(System.Int32)">
            <summary>
            Sets the position of the SVO file currently being read to a desired frame.
            </summary>
            <param name="frame">Index of the desired frame to be decoded.</param>
        </member>
        <member name="M:sl.Camera.GetCameraFPS">
             <summary>
             Returns the current camera FPS.
            
             This is limited primarily by resolution but can also be lower due to setting a lower desired resolution in Open() or from USB connection/bandwidth issues.
             </summary>
             <returns>The current fps</returns>
        </member>
        <member name="M:sl.Camera.IsOpened">
            <summary>
            Reports if the camera has been successfully opened.
            </summary>
            <returns> Returns true if the camera is already setup, otherwise false.</returns>
        </member>
        <member name="M:sl.Camera.GetCalibrationParameters(System.Boolean)">
            @}
            <summary>
            Return the calibration parameters of the camera.
            </summary>
            <param name="raw">Whether to return the raw or rectified calibration parameters.</param>
            <returns>CalibrationParameters containing the calibration parameters requested.</returns>
        </member>
        <member name="M:sl.Camera.GetCameraModel">
            <summary>
            Gets the camera model (sl.MODEL).
            </summary>
            <returns>Model of the camera as sl.MODEL.</returns>
        </member>
        <member name="M:sl.Camera.GetCameraFirmwareVersion">
            <summary>
            Gets the camera firmware version.
            </summary>
            <returns>The firmware version of the camera.</returns>
        </member>
        <member name="M:sl.Camera.GetSensorsFirmwareVersion">
            <summary>
            Gets the sensors firmware version.
            </summary>
            <returns>The firmware version of the camera.</returns>
        </member>
        <member name="M:sl.Camera.GetZEDSerialNumber">
            <summary>
            Gets the camera's serial number.
            </summary>
            <returns>The serial number of the camera.</returns>
        </member>
        <member name="M:sl.Camera.GetFOV">
            <summary>
            Returns the camera's vertical field of view in radians.
            </summary>
            <returns>The vertical field of view.</returns>
        </member>
        <member name="M:sl.Camera.UpdateSelfCalibration">
             <summary>
             Perform a new self calibration process.
            
             In some cases, due to temperature changes or strong vibrations, the stereo calibration becomes less accurate.
             \n Use this method to update the self-calibration data and get more reliable depth values.
             \note The self calibration will occur at the next \ref Grab() call.
             New values will then be available in \ref GetCameraInformation(), be sure to get them to still have consistent 2D - 3D conversion.
             </summary>
        </member>
        <member name="M:sl.Camera.GetFrameDroppedCount">
             <summary>
             Gets the number of frames dropped since Grab() was called for the first time.
            
             It is based on camera timestamps and an FPS comparison.
             \note It is similar to the Frame Drop display in the ZED Explorer app.
             </summary>
             <returns>Frames dropped since first Grab() call.</returns>
        </member>
        <member name="M:sl.Camera.GetSDKVersion">
            <summary>
            Gets the version of the currently installed ZED SDK.
            </summary>
            <returns>ZED SDK version as a string in the format MAJOR.MINOR.PATCH.</returns>
        </member>
        <member name="M:sl.Camera.ConvertCoordinateSystem(System.Numerics.Quaternion@,System.Numerics.Vector3@,sl.COORDINATE_SYSTEM,sl.COORDINATE_SYSTEM)">
            <summary>
            Change the coordinate system of a transform matrix.
            </summary>
            <param name="rotation">[In, Out] : rotation to transform</param>
            <param name="translation"> [In, Out] : translation to transform</param>
            <param name="coordinateSystemSrc"> The current coordinate system of the translation/rotation</param>
            <param name="coordinateSystemDest"> The destination coordinate system for the translation/rotation.</param>
            <returns> SUCCESS if everything went well, FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetSDKVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the version of the currently installed ZED SDK.
            </summary>
            <returns>ZED SDK version as a string in the format MAJOR.MINOR.PATCH.</returns>
        </member>
        <member name="M:sl.Camera.GetDeviceList(System.Int32@)">
             <summary>
             List all the connected devices with their associated information.
            
             This method lists all the cameras available and provides their serial number, models and other information.
             </summary>
             <returns>The device properties for each connected camera.</returns>
        </member>
        <member name="M:sl.Camera.GetStreamingDeviceList(System.Int32@)">
             <summary>
             List all the streaming devices with their associated information.
            
             This method lists all the cameras available and provides their serial number, models and other information.
             </summary>
             <returns>The device properties for each connected camera.</returns>
        </member>
        <member name="M:sl.Camera.Reboot(System.Int32,System.Boolean)">
            <summary>
            Performs a hardware reset of the ZED 2 and the ZED 2i.
            </summary>
            <param name="serialNumber">Serial number of the camera to reset, or 0 to reset the first camera detected.</param>
            <param name="fullReboot">Perform a full reboot (sensors and video modules) if true, otherwise only the video module will be rebooted.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE::CAMERA_NOT_DETECTED if no camera was detected, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.AssertCameraIsReady">
            <summary>
            Checks if the camera has been initialized and the plugin has been loaded. Throws exceptions otherwise.
            </summary>
        </member>
        <member name="M:sl.Camera.RetrieveMeasure(sl.Mat,sl.MEASURE,sl.MEM,sl.Resolution)">
            @{
             @name Depth Sensing
            <summary>
            Retrieves a measure texture from the ZED SDK and loads it into a sl.Mat.
            
            Use this to get an individual texture from the last grabbed frame with measurements in every pixel - such as a depth map, confidence map, etc.
            Measure textures are not human-viewable but don't lose accuracy, unlike image textures.
            \note If you want to access the texture via script, you'll usually want to specify CPU memory. Then you can use
            Marshal.Copy to move them into a new byte array, which you can load into a Texture2D.
            
            \n\note For more info, read about the SDK method it calls: 
            <a href="https://www.stereolabs.com/docs/api/classsl_1_1Camera.html#a9e0773c0c14ce5156c1fa2fde501c13e">retrieveMeasure</a>.
            </summary>
            <param name="mat">sl.Mat to fill with the new texture.</param>
            <param name="measure">Measure type (depth, confidence, xyz, etc.).</param>
            <param name="mem">Whether the image should be on CPU or GPU memory.</param>
            <param name="resolution">Resolution of the texture.</param>
            <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetConfidenceThreshold">
             <summary>
             Gets the current confidence threshold value for the disparity map (and by extension the depth map).
            
             Values below the given threshold are removed from the depth map.
             </summary>
             <returns>Filtering value between 0 and 100.</returns>
        </member>
        <member name="M:sl.Camera.GetDepthMinRangeValue">
            <summary>
            Gets the closest measurable distance by the camera, according to the camera type and depth map parameters.
            </summary>
            <returns>The nearest possible depth value.</returns>
        </member>
        <member name="M:sl.Camera.GetCurrentMixMaxDepth(System.Single@,System.Single@)">
            <summary>
            Gets the current range of perceived depth.
            </summary>
            <param name="min">Minimum depth detected (in selected sl.UNIT).</param>
            <param name="max">Maximum depth detected (in selected sl.UNIT).</param>
            <returns>sl.ERROR_CODE.SUCCESS if values have been extracted. Other sl.ERROR_CODE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetDepthMaxRangeValue">
            <summary>
            Returns the current maximum distance of depth/disparity estimation.
            </summary>
            <returns>The closest depth</returns>
        </member>
        <member name="M:sl.Camera.EnablePositionalTracking(sl.PositionalTrackingParameters@)">
            <summary>
            Initializes and starts the positional tracking processes.
            </summary>
            <param name="positionalTrackingParameters">A structure containing all the specific parameters for the positional tracking. Default: a preset of PositionalTrackingParameters.</param>
            <returns>sl.ERROR_CODE.FAILURE if the <b>area_file_path</b> file wasn't found, sl.ERROR_CODE.SUCCESS otherwise.</returns>
        </member>
        <member name="M:sl.Camera.DisablePositionalTracking(System.String)">
            <summary>
             Disables the positional tracking.
            </summary>
            <param name="path">
            If set, saves the spatial memory into an '.area' file. Default: (empty)
            \n <b>path</b> is the name and path of the database, e.g. <i>path/to/file/myArea1.area"</i>.
            </param>
        </member>
        <member name="M:sl.Camera.IsPositionalTrackingEnabled">
            <summary>
            Tells if the tracking module is enabled.
            </summary>
        </member>
        <member name="M:sl.Camera.SaveAreaMap(System.String)">
             <summary>
             Saves the current area learning file.
            
             The file will contain spatial memory data generated by the tracking.
             </summary>
             <param name="areaFilePath">Path of an '.area' file to save the spatial memory database in.</param>
        </member>
        <member name="M:sl.Camera.GetAreaExportState">
            <summary>
            Returns the state of the spatial memory export process.
            </summary>
            <returns> The current \ref AREA_EXPORTING_STATE "state" of the spatial memory export process.</returns>
        </member>
        <member name="M:sl.Camera.ResetPositionalTracking(System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Resets the tracking, and re-initializes the position with the given translation vector and rotation quaternion.
            </summary>
            <param name="rotation">Rotation to set the positional tracking to.</param>
            <param name="translation">Translation to set the positional tracking to.</param>
            <returns>sl.ERROR_CODE.SUCCESS if the tracking has been reset, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetSensorsConfiguration">
            <summary>
            Returns the sensor configuration of the camera.
            </summary>
            <returns> SensorsConfiguration containing the sensor calibration information of the camera.</returns>
        </member>
        <member name="M:sl.Camera.GetCameraInformation(sl.Resolution)">
             <summary>
             Returns the CameraInformation associated the camera being used.
            
             To ensure accurate calibration, it is possible to specify a custom resolution as a parameter when obtaining scaled information, as calibration parameters are resolution-dependent.
             \n When reading an SVO file, the parameters will correspond to the camera used for recording.
             </summary>
             <returns> CameraInformation containing the calibration parameters of the camera, as well as serial number and firmware version.</returns>
        </member>
        <member name="M:sl.Camera.GetPosition(System.Numerics.Quaternion@,System.Numerics.Vector3@,sl.REFERENCE_FRAME)">
            <summary>
            Gets the position of the camera and the current state of the camera Tracking.
            </summary>
            <param name="rotation">Quaternion filled with the current rotation of the camera depending on its reference frame.</param>
            <param name="position">Vector filled with the current position of the camera depending on its reference frame.</param>
            <param name="referenceType">Reference frame for setting the rotation/position. REFERENCE_FRAME.CAMERA gives movement relative to the last pose.
            REFERENCE_FRAME.WORLD gives cumulative movements since tracking started.</param>
            <returns>The current \ref POSITIONAL_TRACKING_STATE "state" of the tracking process.</returns>
        </member>
        <member name="M:sl.Camera.GetPositionalTrackingStatus">
            <summary>
            Returns the current status of positional tracking module.
            </summary>
            <returns> The current status of positional tracking module. </returns>
        </member>
        <member name="M:sl.Camera.GetPosition(System.Numerics.Quaternion@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@,sl.REFERENCE_FRAME)">
            <summary>
            Gets the current position of the camera and state of the tracking, with an optional offset to the tracking frame.
            </summary>
            <param name="rotation">Quaternion filled with the current rotation of the camera depending on its reference frame.</param>
            <param name="position">Vector filled with the current position of the camera depending on its reference frame.</param>
            <param name="targetQuaternion">Rotational offset applied to the tracking frame.</param>
            <param name="targetTranslation">Positional offset applied to the tracking frame.</param>
            <param name="referenceFrame">Reference frame for setting the rotation/position. REFERENCE_FRAME.CAMERA gives movement relative to the last pose.
            REFERENCE_FRAME.WORLD gives cumulative movements since tracking started.</param>
            <returns>The current \ref POSITIONAL_TRACKING_STATE "state" of the tracking process.</returns>
        </member>
        <member name="M:sl.Camera.GetPosition(System.Numerics.Quaternion@,System.Numerics.Vector3@,sl.TRACKING_FRAME,sl.REFERENCE_FRAME)">
             <summary>
             Gets the current position of the camera and state of the tracking, with a defined tracking frame.
            
             A tracking frame defines what part of the camera is its center for tracking purposes. See sl.TRACKING_FRAME.
             </summary>
             <param name="rotation">Quaternion filled with the current rotation of the camera depending on its reference frame.</param>
             <param name="position">Vector filled with the current position of the camera depending on its reference frame.</param>
             <param name="trackingFrame">Center of the camera for tracking purposes (left eye, center, right eye).</param>
             <param name="referenceFrame">Reference frame for setting the rotation/position. REFERENCE_FRAME.CAMERA gives movement relative to the last pose.
             REFERENCE_FRAME.WORLD gives cumulative movements since tracking started.</param>
             <returns>The current \ref POSITIONAL_TRACKING_STATE "state" of the tracking process.</returns>
        </member>
        <member name="M:sl.Camera.GetPosition(sl.Pose@,sl.REFERENCE_FRAME)">
            <summary>
            Gets the current position of the camera and state of the tracking, filling a Pose struct useful for AR pass-through.
            </summary>
            <param name="pose">Current pose.</param>
            <param name="referenceType">Reference frame for setting the rotation/position. REFERENCE_FRAME.CAMERA gives movement relative to the last pose.
            REFERENCE_FRAME.WORLD gives cumulative movements since tracking started.</param>
            <returns>The current \ref POSITIONAL_TRACKING_STATE "state" of the tracking process.</returns>
        </member>
        <member name="M:sl.Camera.SetIMUOrientationPrior(System.Numerics.Quaternion@)">
             <summary>
             Sets a prior to the IMU orientation (not for \ref MODEL "MODEL.ZED").
            
             Prior must come from a external IMU, such as the HMD orientation and should be in a time frame
             that's as close as possible to the camera.
             </summary>
             <returns>An sl.ERROR_CODE status.</returns>
             <param name="rotation">Prior rotation.</param>
        </member>
        <member name="M:sl.Camera.GetIMUOrientation(System.Numerics.Quaternion@,sl.TIME_REFERENCE)">
            <summary>
            Gets the rotation given by the IMU.
            \note This method will return ERROR_CODE.INVALID_FUNCTION_CALL with a MODEL.ZED which does not contains internal sensors.
            </summary>
            <returns>An sl.ERROR_CODE status.</returns>
            <param name="rotation">Rotation from the IMU.</param>
        </member>
        <member name="M:sl.Camera.GetSensorsData(sl.SensorsData@,sl.TIME_REFERENCE)">
            <summary>
            Retrieves the SensorsData (IMU, magnetometer, barometer) at a specific time reference.
            \note This method will return ERROR_CODE.INVALID_FUNCTION_CALL with a MODEL.ZED which does not contains internal sensors.
            </summary>
            <param name="data">The SensorsData variable to store the data.</param>
            <param name="referenceTime">Defines the reference from which you want the data to be expressed. Default: REFERENCE_FRAME.WORLD.</param>
            <returns>An sl.ERROR_CODE status.</returns>
        </member>
        <member name="M:sl.Camera.SetRegionOfInterest(sl.Mat,System.Boolean[])">
            <summary>
            Defines a region of interest to focus on for all the SDK, discarding other parts.
            </summary>
            <param name="roiMask"> The Mat defining the requested region of interest, pixels lower than 127 will be discarded from all modules: depth, positional tracking, etc.
            If empty, set all pixels as valid. The mask can be either at lower or higher resolution than the current images.</param>
            <param name="module"> Apply the ROI to a list of SDK module, all by default. Must of size sl.MODULE.LAST. 
            The Mat defining the requested region of interest, pixels lower than 127 will be discarded from all modules: depth, positional tracking, etc.
            If empty, set all pixels as valid. The mask can be either at lower or higher resolution than the current images.
            </param>
            <returns>An sl.ERROR_CODE if something went wrong.</returns>
        </member>
        <member name="M:sl.Camera.GetRegionOfInterest(sl.Mat,sl.Resolution,sl.MODULE)">
            <summary>
            Get the previously set or computed region of interest.
            </summary>
            <param name="roiMask">The \ref Mat returned</param>
            <param name="resolution">The optional size of the returned mask</param>
            <param name="module"> Specifies the module from which the ROI is to be obtained. </param>
            <returns>An sl.ERROR_CODE if something went wrong.</returns>
        </member>
        <member name="M:sl.Camera.StartRegionOfInterestAutoDetection(sl.RegionOfInterestParameters)">
            <summary>
            Start the auto detection of a region of interest to focus on for all the SDK, discarding other parts.
            This detection is based on the general motion of the camera combined with the motion in the scene.
            The camera must move for this process, an internal motion detector is used, based on the Positional Tracking module.
            It requires a few hundreds frames of motion to compute the mask.
             \note This module is expecting a static portion, typically a fairly close vehicle hood at the bottom of the image.
            This module may not work correctly or detect incorrect background area, especially with slow motion, if there's no static element.
            This module work asynchronously, the status can be obtained using \ref GetRegionOfInterestAutoDetectionStatus(), the result is either auto applied,
            or can be retrieve using \ref GetRegionOfInterest function.
            </summary>
            <param name="roiParams"></param>
            <returns>An sl.ERROR_CODE if something went wrong.</returns>
        </member>
        <member name="M:sl.Camera.GetRegionOfInterestAutoDetectionStatus">
            <summary>
             Return the status of the automatic Region of Interest Detection.
             The automatic Region of Interest Detection is enabled by using \ref StartRegionOfInterestAutoDetection
            </summary>
            <returns>An sl.ERROR_CODE if something went wrong.</returns>
        </member>
        <member name="M:sl.Camera.EnableSpatialMapping(sl.SpatialMappingParameters@)">
            <summary>
            Initializes and begins the spatial mapping processes.
            </summary>
            <param name="spatialMappingParameters">Spatial mapping parameters.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.EnableSpatialMapping(sl.SPATIAL_MAP_TYPE,sl.MAPPING_RESOLUTION,sl.MAPPING_RANGE,System.Boolean)">
            <summary>
            Initializes and begins the spatial mapping processes.
            </summary>
            <param name="resolutionMeter">Spatial mapping resolution in meters.</param>
            <param name="maxRangeMeter">Maximum scanning range in meters.</param>
            <param name="saveTexture">True to scan surface textures in addition to geometry.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetSpatialMappingParameters">
            <summary>
            Returns the SpatialMappingParameters used.
            
            It corresponds to the structure given as argument to the EnableSpatialMapping() method.
            </summary>
            <returns>SpatialMappingParameters containing the parameters used for spatial mapping initialization.</returns>
        </member>
        <member name="M:sl.Camera.DisableSpatialMapping">
            <summary>
            Disables the spatial mapping process.
            </summary>
        </member>
        <member name="M:sl.Camera.UpdateMesh(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Updates the internal version of the mesh and returns the sizes of the meshes.
            </summary>
            <param name="nbVerticesInSubmeshes">Array of the number of vertices in each sub-mesh.</param>
            <param name="nbTrianglesInSubmeshes">Array of the number of triangles in each sub-mesh.</param>
            <param name="nbUpdatedSubmesh">Number of updated sub-meshes.</param>
            <param name="updatedIndices">List of all sub-meshes updated since the last update.</param>
            <param name="nbVertices">Total number of updated vertices in all sub-meshes.</param>
            <param name="nbTriangles">Total number of updated triangles in all sub-meshes.</param>
            <param name="nbSubmeshMax">Maximum number of sub-meshes that can be handled.</param>
            <returns>sl.ERROR_CODE indicating if the update was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.UpdateMesh(sl.Mesh@)">
            <summary>
            Updates the internal version of the mesh and returns the sizes of the meshes.
            </summary>
            <param name="mesh">The mesh to be filled with the generated spatial map.</param>
            <returns>sl.ERROR_CODE indicating if the update was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveMesh(System.Numerics.Vector3[],System.Int32[],System.Byte[],System.Int32,System.Numerics.Vector2[],System.IntPtr)">
             <summary>
             Retrieves all chunks of the current generated mesh.
             \note Call UpdateMesh() before calling this.
            
             Vertex and triangle arrays must be at least of the sizes returned by UpdateMesh (nbVertices and nbTriangles).
             </summary>
             <param name="vertices">Vertices of the mesh.</param>
             <param name="triangles">Triangles, formatted as the index of each triangle's three vertices in the vertices array.</param>
             <param name="colors"> (b, g, r) colors of the vertices.</param>
             <param name="nbSubmeshMax">Maximum number of sub-meshes that can be handled.</param>
             <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveMesh(sl.Mesh@)">
             <summary>
             Retrieves all chunks of the current generated mesh.
             \note Call UpdateMesh() before calling this.
            
             Vertex and triangle arrays must be at least of the sizes returned by UpdateMesh (nbVertices and nbTriangles).
             </summary>
             <param name="mesh">The mesh to be filled with the generated spatial map.</param>
             <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveChunks(sl.Mesh@)">
            <summary>
            Retrieve all chunks of the generated mesh.
            </summary>
            <param name="mesh">The mesh to be filled with the generated spatial map.</param>
            <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.SetMesh(sl.Mesh@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Process data from a sub-mesh retrieved from the ZED SDK into a chunk
            </summary>
            <param name="mesh"> Mesh data retrieved from the zed sdk</param>
            <param name="indexUpdate">Index of the sub-mesh/chunk to be updated.</param>
            <param name="verticesOffset">Starting index in the vertices stack.</param>
            <param name="trianglesOffset">Starting index in the triangles stack.</param>
            <param name="colorsOffset">Starting index in the colors stack.</param>
            <param name="uvsOffset">Starting index in the UVs stack.</param>
        </member>
        <member name="M:sl.Camera.RetrieveSpatialMap(sl.Mesh@)">
            <summary>
            Retrieves the current generated mesh.
            </summary>
            <param name="mesh">The mesh to be filled with the generated spatial map.</param>
            <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveSpatialMap(sl.FusedPointCloud@)">
            <summary>
            Retrieves the current fused point cloud.
            </summary>
            <param name="fusedPointCloud">The Fused Point Cloud to be filled with the generated spatial map.</param>
            <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.UpdateFusedPointCloud(System.Int32@)">
            <summary>
            Updates the fused point cloud (if spatial map type was \ref SPATIAL_MAP_TYPE "FUSED_POINT_CLOUD").
            </summary>
            <returns>sl.ERROR_CODE indicating if the update was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveFusedPointCloud(System.Numerics.Vector4[])">
            <summary>
            Retrieves all points of the fused point cloud.
            \note Call UpdateFusedPointCloud() before calling this.
            
            Vertex arrays must be at least of the sizes returned by UpdateFusedPointCloud().
            </summary>
            <param name="vertices">Points of the fused point cloud.</param>
            <returns>sl.ERROR_CODE indicating if the retrieval was successful, and why it wasn't otherwise.</returns>
        </member>
        <member name="M:sl.Camera.ExtractWholeSpatialMap">
             <summary>
             Extracts the current spatial map from the spatial mapping process.
            
             If the object to be filled already contains a previous version of the mesh, only changes will be updated, optimizing performance.
             </summary>
             <returns>sl.ERROR_CODE.SUCCESS if the mesh is filled and available, otherwise sl.ERROR_CODE.FAILURE.</returns>
             This is a blocking method. You should either call it in a thread or at the end of the mapping process.
        </member>
        <member name="M:sl.Camera.RequestSpatialMap">
             <summary>
             Starts the mesh generation process in a thread that does not block the spatial mapping process.
            
             ZEDSpatialMappingHelper calls this each time it has finished applying the last mesh update.
             </summary>
        </member>
        <member name="M:sl.Camera.PauseSpatialMapping(System.Boolean)">
            <summary>
            Pauses or resumes the spatial mapping processes.
            </summary>
            <param name="status">If true, the integration is paused. If false, the spatial mapping is resumed.</param>
        </member>
        <member name="M:sl.Camera.GetMeshRequestStatus">
             <summary>
             Returns the mesh generation status.
            
             Useful for knowing when to update and retrieve the mesh.
             </summary>
             <returns>sl.ERROR_CODE.SUCCESS if the mesh is ready and not yet retrieved, otherwise sl.ERROR_CODE.FAILURE.</returns>
        </member>
        <member name="M:sl.Camera.SaveMesh(System.String,sl.MESH_FILE_FORMAT)">
            <summary>
            Saves the scanned mesh in a specific file format.
            </summary>
            <param name="filename">Path and filename of the mesh.</param>
            <param name="format">File format (extension). Can be .obj, .ply or .bin.</param>
            <returns>Has the mesh been saved successfully.</returns>
        </member>
        <member name="M:sl.Camera.SavePointCloud(System.String,sl.MESH_FILE_FORMAT)">
            <summary>
            Saves the scanned point cloud in a specific file format.
            </summary>
            <param name="filename">Path and filename of the point cloud.</param>
            <param name="format">File format (extension). Can be .obj, .ply or .bin.</param>
            <returns>Has the point cloud been saved successfully.</returns>
        </member>
        <member name="M:sl.Camera.LoadMesh(System.String,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32,System.Int32[])">
             <summary>
             Loads a saved mesh file.
            
             ZEDSpatialMapping then configures itself as if the loaded mesh was just scanned.
             </summary>
             <param name="filename">Path and filename of the mesh. Should include the extension (.obj, .ply or .bin).</param>
             <param name="nbVerticesInSubmeshes">Array of the number of vertices in each sub-mesh.</param>
             <param name="nbTrianglesInSubmeshes">Array of the number of triangles in each sub-mesh.</param>
             <param name="nbSubmeshes">Number of sub-meshes.</param>
             <param name="updatedIndices">List of all sub-meshes updated since the last update.</param>
             <param name="nbVertices">Total number of updated vertices in all sub-meshes.</param>
             <param name="nbTriangles">Total number of updated triangles in all sub-meshes.</param>
             <param name="nbSubmeshMax">Maximum number of sub-meshes that can be handled.</param>
             <param name="textureSize">Array containing the sizes of all the textures (width, height) if applicable.</param>
             <returns>Has the mesh been loaded successfully.</returns>
        </member>
        <member name="M:sl.Camera.FilterMesh(sl.MESH_FILTER,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Filters a mesh to remove triangles while still preserving its overall shape (though less accurate).
            </summary>
            <param name="filterParameters">Filter level. Higher settings remove more triangles.</param>
            <param name="nbVerticesInSubmeshes">Array of the number of vertices in each sub-mesh.</param>
            <param name="nbTrianglesInSubmeshes">Array of the number of triangles in each sub-mesh.</param>
            <param name="nbSubmeshes">Number of sub-meshes.</param>
            <param name="updatedIndices">List of all sub-meshes updated since the last update.</param>
            <param name="nbVertices">Total number of updated vertices in all sub-meshes.</param>
            <param name="nbTriangles">Total number of updated triangles in all sub-meshes.</param>
            <param name="nbSubmeshMax">Maximum number of sub-meshes that can be handled.</param>
            <returns>Has the mesh been filtered successfully.</returns>
        </member>
        <member name="M:sl.Camera.FilterMesh(sl.MESH_FILTER,sl.Mesh@)">
            <summary>
            Filters a mesh to remove triangles while still preserving its overall shape (though less accurate).
            </summary>
            <param name="filterParameters">Filter level. Higher settings remove more triangles.</param>
            <param name="mesh">The mesh to be filled with the generated spatial map.</param>
            <returns>Has the mesh been filtered successfully.</returns>
        </member>
        <member name="M:sl.Camera.ApplyTexture(System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32[],System.Int32)">
            <summary>
            Applies the scanned texture onto the internal scanned mesh.
            </summary>
            <param name="nbVerticesInSubmeshes">Array of the number of vertices in each sub-mesh.</param>
            <param name="nbTrianglesInSubmeshes">Array of the number of triangles in each sub-mesh.</param>
            <param name="nbSubmeshes">Number of sub-meshes.</param>
            <param name="updatedIndices">List of all sub-meshes updated since the last update.</param>
            <param name="nbVertices">Total number of updated vertices in all sub-meshes.</param>
            <param name="nbTriangles">Total number of updated triangles in all sub-meshes.</param>
            <param name="textureSize"> Vector containing the size of all the texture (width, height). </param>
            <param name="nbSubmeshMax">Maximum number of sub-meshes that can be handled.</param>
            <returns>Has the texture been applied successfully.</returns>
        </member>
        <member name="M:sl.Camera.ApplyTexture(sl.Mesh@)">
            <summary>
            Applies the texture on a mesh.
            </summary>
            <param name="mesh">Mesh with a texture to apply.</param>
            <returns>Has the texture been applied successfully.</returns>
        </member>
        <member name="M:sl.Camera.GetSpatialMappingState">
             <summary>
              Returns the current spatial mapping state.
            
             As the spatial mapping runs asynchronously, this method allows you to get reported errors or status info.
             </summary>
             <returns>The current \ref SPATIAL_MAPPING_STATE "state" of the spatial mapping process.</returns>
        </member>
        <member name="M:sl.Camera.GetGravityEstimate">
             <summary>
             Gets a vector pointing toward the direction of gravity.
            
             This is estimated from a 3D scan of the environment, and as such, a scan must be started/finished for this value to be calculated.
             If using a camera other than \ref MODEL "MODEL.ZED", this is not required thanks to its IMU.
             </summary>
             <returns>Vector3 pointing downward.</returns>
        </member>
        <member name="M:sl.Camera.MergeChunks(System.Int32,System.Int32[],System.Int32[],System.Int32@,System.Int32[],System.Int32@,System.Int32@,System.Int32)">
             <summary>
             Consolidates the chunks from a scan.
            
             This is used to turn lots of small meshes (which are efficient for the scanning process)
             into several large meshes (which are more convenient to work with).
             </summary>
             <param name="numberFaces"></param>
             <param name="nbVerticesInSubmeshes">Array of the number of vertices in each sub-mesh.</param>
             <param name="nbTrianglesInSubmeshes">Array of the number of triangles in each sub-mesh.</param>
             <param name="nbSubmeshes">Number of sub-meshes.</param>
             <param name="updatedIndices">List of all sub-meshes updated since the last update.</param>
             <param name="nbVertices">Total number of updated vertices in all sub-meshes.</param>
             <param name="nbTriangles">Total number of updated triangles in all sub-meshes.</param>
        </member>
        <member name="M:sl.Camera.findFloorPlane(sl.PlaneData@,System.Single@,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Detect the floor plane of the scene.
            
            Use ZEDPlaneDetectionManager.DetectFloorPlane for a higher-level version that turns planes into GameObjects.
            </summary>
            <param name="plane">Data on the detected plane.</param>
            <param name="playerHeight">Height of the camera from the newly-detected floor.</param>
            <param name="priorQuat">Prior rotation.</param>
            <param name="priorTrans">Prior position.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.FindFloorPlane(sl.PlaneData@,System.Single@,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Detect the floor plane of the scene.
            
            Use ZEDPlaneDetectionManager.DetectFloorPlane for a higher-level version that turns planes into GameObjects.
            </summary>
            <param name="plane">Data on the detected plane.</param>
            <param name="playerHeight">Height of the camera from the newly-detected floor.</param>
            <param name="priorQuat">Prior rotation.</param>
            <param name="priorTrans">Prior position.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.convertFloorPlaneToMesh(System.Numerics.Vector3[],System.Int32[],System.Int32@,System.Int32@)">
             <summary>
             Using data from a detected floor plane, updates supplied vertex and triangle arrays with
             data needed to make a mesh that represents it.
            
             These arrays are updated directly from the wrapper.
             </summary>
             <param name="vertices">Array to be filled with mesh vertices.</param>
             <param name="triangles">Array to be filled with mesh triangles, stored as indexes of each triangle's points.</param>
             <param name="numVertices">Total vertices in the mesh.</param>
             <param name="numTriangles">Total triangle indexes (3x number of triangles).</param>
             <returns>0 is the method was successful, 1 otherwise.</returns>
        </member>
        <member name="M:sl.Camera.ConvertFloorPlaneToMesh(System.Numerics.Vector3[],System.Int32[],System.Int32@,System.Int32@)">
             <summary>
             Using data from a detected floor plane, updates supplied vertex and triangle arrays with
             data needed to make a mesh that represents it.
            
             These arrays are updated directly from the wrapper.
             </summary>
             <param name="vertices">Array to be filled with mesh vertices.</param>
             <param name="triangles">Array to be filled with mesh triangles, stored as indexes of each triangle's points.</param>
             <param name="numVertices">Total vertices in the mesh.</param>
             <param name="numTriangles">Total triangle indexes (3x number of triangles).</param>
             <returns>0 is the method was successful, 1 otherwise.</returns>
        </member>
        <member name="M:sl.Camera.findPlaneAtHit(sl.PlaneData@,System.Numerics.Vector2,sl.PlaneDetectionParameters@)">
            <summary>
            Checks the plane at the given left image coordinates.
            </summary>
            <param name="plane">The detected plane if the method succeeded.</param>
            <param name="coord">The image coordinate. The coordinate must be taken from the full-size image.</param>
            <param name="parameters">A structure containing all the specific parameters for the plane detection. Default: a preset of PlaneDetectionParameters.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.FindPlaneAtHit(sl.PlaneData@,System.Numerics.Vector2,sl.PlaneDetectionParameters@)">
            <summary>
            Checks the plane at the given left image coordinates.
            </summary>
            <param name="plane">The detected plane if the method succeeded.</param>
            <param name="coord">The image coordinate. The coordinate must be taken from the full-size image.</param>
            <param name="parameters">A structure containing all the specific parameters for the plane detection. Default: a preset of PlaneDetectionParameters.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.convertHitPlaneToMesh(System.Numerics.Vector3[],System.Int32[],System.Int32@,System.Int32@)">
             <summary>
             Using data from a detected hit plane, updates supplied vertex and triangle arrays with
             data needed to make a mesh that represents it.
            
             These arrays are updated directly from the wrapper.
             </summary>
             <param name="vertices">Array to be filled with mesh vertices.</param>
             <param name="triangles">Array to be filled with mesh triangles, stored as indexes of each triangle's points.</param>
             <param name="numVertices">Total vertices in the mesh.</param>
             <param name="numTriangles">Total triangle indexes (3x number of triangles).</param>
             <returns>0 is the method was successful, 1 otherwise.</returns>
        </member>
        <member name="M:sl.Camera.ConvertHitPlaneToMesh(System.Numerics.Vector3[],System.Int32[],System.Int32@,System.Int32@)">
             <summary>
             Using data from a detected hit plane, updates supplied vertex and triangle arrays with
             data needed to make a mesh that represents it.
            
             These arrays are updated directly from the wrapper.
             </summary>
             <param name="vertices">Array to be filled with mesh vertices.</param>
             <param name="triangles">Array to be filled with mesh triangles, stored as indexes of each triangle's points.</param>
             <param name="numVertices">Total vertices in the mesh.</param>
             <param name="numTriangles">Total triangle indexes (3x number of triangles).</param>
             <returns>0 is the method was successful, 1 otherwise.</returns>
        </member>
        <member name="M:sl.Camera.ConvertRangePreset(sl.MAPPING_RANGE)">
            <summary>
            Updates the range to match the specified preset.
            </summary>
        </member>
        <member name="M:sl.Camera.ConvertResolutionPreset(sl.MAPPING_RESOLUTION)">
            <summary>
            Updates the resolution to match the specified preset.
            </summary>
        </member>
        <member name="M:sl.Camera.EnableRecording(System.String,sl.SVO_COMPRESSION_MODE,System.UInt32,System.Int32,System.Boolean)">
            @{
             @name Recording
            <summary>
            Creates an SVO file to be filled by EnableRecording() and DisableRecording().
            \note An SVO is Stereolabs' own format designed for the ZED.
            It holds the video feed with timestamps as well as info about the camera used to record it.
            </summary>
            <param name="videoFileName">Filename of the recording. Whether it ends with .svo or .avi defines its file type.</param>
            <param name="compressionMode">The compression to use for recording.</param>
            <param name="bitrate">Override default bitrate with a custom bitrate (Kbits/s).</param>
            <param name="targetFPS">Use another fps than camera FPS. Must respect camera_fps%target_fps == 0.</param>
            <param name="transcode">If input is in streaming mode, dump directly into SVO file (transcode=false) or decode/encode (transcode=true).</param>
            <returns>An sl.ERROR_CODE that defines if the file was successfully created and can be filled with images.</returns>
        </member>
        <member name="M:sl.Camera.EnableRecording(sl.RecordingParameters)">
            <summary>
            Creates an SVO file to be filled by EnableRecording() and DisableRecording().
            </summary>
            <param name="videoFileName">A structure containing all the specific parameters for the positional tracking. Default: a reset of RecordingParameters.</param>
            <returns>An sl.ERROR_CODE that defines if the file was successfully created and can be filled with images.</returns>
        </member>
        <member name="M:sl.Camera.GetRecordingStatus">
            <summary>
            Get the recording information.
            </summary>
            <returns>The recording state structure. For more details, see \ref RecordingStatus.</returns>
        </member>
        <member name="M:sl.Camera.GetRecordingParameters">
            <summary>
            Returns the RecordingParameters used.
            
            It corresponds to the structure given as argument to the EnableRecording() method.
            </summary>
            <returns>sl.RecordingParameters containing the parameters used for recording initialization.</returns>
        </member>
        <member name="M:sl.Camera.PauseRecording(System.Boolean)">
            <summary>
            Pauses or resumes the recording.
            </summary>
            <param name="status">If true, the recording is paused. If false, the recording is resumed.</param>
        </member>
        <member name="M:sl.Camera.DisableRecording">
            <summary>
            Disables the recording initiated by EnableRecording() and closes the generated file.
            </summary>
        </member>
        <member name="M:sl.Camera.IngestDataIntoSVO(sl.SVOData@)">
            <summary>
            Ingest SVOData in a SVO file.
            </summary>
            <param name="data">Data to ingest in the SVO file..</param>
            Note: The method works only if the camera is recording.
            <returns></returns>
        </member>
        <member name="M:sl.Camera.RetrieveSVOData(System.String,System.Collections.Generic.List{sl.SVOData}@,System.UInt64,System.UInt64)">
            <summary>
            Retrieves SVO data from the SVO file at the given channel key and in the given timestamp range.
            </summary>
            <param name="key"> The key of the SVOData that is going to be retrieved.</param>
            <param name="data"> The map to be filled with SVOData objects, with timestamps as keys.</param>
            <param name="tsBegin"> The beginning of the range.</param>
            <param name="tsEnd">The end of the range.</param>
            <returns>sl.ERROR_CODE.SUCCESS in case of success, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.GetSVODataKeys">
            <summary>
             Gets the external channels that can be retrieved from the SVO file.
            </summary>
            <returns>List of available keys.</returns>
        </member>
        <member name="M:sl.Camera.EnableStreaming(sl.STREAMING_CODEC,System.UInt32,System.UInt16,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates an streaming pipeline.
            </summary>
            <param name="codec">Defines the codec used for streaming.</param>
            <param name="bitrate">Defines the streaming bitrate in Kbits/s.</param>
            <param name="port">Defines the port used for streaming.</param>
            <param name="gopSize">Defines the gop size in number of frames.</param>
            <param name="adaptativeBitrate">Enable/Disable adaptive bitrate.</param>
            <param name="chunkSize">Defines a single chunk size.</param>
            <param name="targetFPS">Defines the target framerate for the streaming output.</param>
            <returns>An sl.ERROR_CODE that defines if the streaming pipe was successfully created.</returns>
        </member>
        <member name="M:sl.Camera.EnableStreaming(sl.StreamingParameters@)">
            <summary>
            Creates an streaming pipeline.
            </summary>
            <param name="streamingParameters">
            A structure containing all the specific parameters for the streaming. Default: a preset of StreamingParameters.
            </param>
            <returns>An sl.ERROR_CODE that defines if the streaming pipe was successfully created.</returns>
        </member>
        <member name="M:sl.Camera.IsStreamingEnabled">
            <summary>
            Tells if the streaming is running.
            </summary>
            <returns>Has the streaming been enabled successfully.</returns>
        </member>
        <member name="M:sl.Camera.DisableStreaming">
            <summary>
            Disables the streaming initiated by EnableStreaming().
            </summary>
        </member>
        <member name="M:sl.Camera.GetStreamingParameters">
            <summary>
            Returns the StreamingParameters used.
            
            It corresponds to the structure given as argument to the EnableStreaming() method.
            </summary>
            <returns>sl.StreamingParameters containing the parameters used for streaming initialization.</returns>
        </member>
        <member name="M:sl.Camera.SaveCurrentImageInFile(sl.VIEW,System.String)">
             <summary>
             Save current image (specified by view) in a file defined by filename.
            
             Supported formats are JPEG and PNG. \n Filename must end with either .jpg or .png.
             </summary>
             <param name="side">sl.SIDE on which to save the image.</param>
             <param name="filename"> Filename must end with .jpg or .png.</param>
             <returns> An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.SaveCurrentDepthInFile(sl.SIDE,System.String)">
             <summary>
             Save the current depth in a file defined by filename.
            
             Supported formats are PNG, PFM and PGM.
             </summary>
             <param name="side">sl.SIDE on which to save the depth.</param>
             <param name="filename"> Filename must end with .png, .pfm or .pgm.</param>
             <returns> An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.SaveCurrentPointCloudInFile(sl.SIDE,System.String)">
             <summary>
             Save the current point cloud in a file defined by filename.
            
             Supported formats are PLY, VTK, XYZ and PCD.
             </summary>
             <param name="side">sl.SIDE on which to save the point cloud.</param>
             <param name="filename">Filename must end with .ply, .xyz , .vtk or .pcd.</param>
             <returns> An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.CheckAIModelStatus(sl.AI_MODELS,System.Int32)">
            <summary>
            Check if a corresponding optimized engine is found for the requested model based on your rig configuration.
            </summary>
            <param name="model"> AI model to check.</param>
            <param name="gpu_id">ID of the gpu.</param>
            <returns>The \ref AI_Model_status "status" of the AI model.</returns>
        </member>
        <member name="M:sl.Camera.OptimizeAIModel(sl.AI_MODELS,System.Int32)">
            <summary>
            Optimize the requested model, possible download if the model is not present on the host.
            </summary>
            <param name="model">AI model to optimize.</param>
            <param name="gpu_id">ID of the gpu to optimize on.</param>
            <returns>An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.EnableObjectDetection(sl.ObjectDetectionParameters@)">
            <summary>
            Initializes and starts object detection module.
            </summary>
            <param name="od_params">A structure containing all the specific parameters for the object detection. Default: a preset of ObjectDetectionParameters.</param>
            <returns>An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.EnableBodyTracking(sl.BodyTrackingParameters@)">
            <summary>
            Initializes and starts body tracking module.
            </summary>
            <param name="bt_params">A structure containing all the specific parameters for the body tracking. Default: a preset of BodyTrackingParameters.</param>
            <returns>An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.DisableObjectDetection(System.UInt32,System.Boolean)">
            <summary>
            Disable object detection module and release the resources.
            </summary>
            <param name="instanceID">Id of the object detection instance. Used when multiple instances of the object detection module are enabled at the same time.</param>
            <param name="disableAllInstance">Should disable all instances of the object detection module or just <b>instanceID</b>.</param>
        </member>
        <member name="M:sl.Camera.DisableBodyTracking(System.UInt32,System.Boolean)">
            <summary>
            Disable body tracking module and release the resources.
            </summary>
            <param name="instanceID">Id of the body tracking module instance. Used when multiple instances of the body tracking module module are enabled at the same time.</param>
            <param name="disableAllInstance">Should disable all instances of the body tracking module or just <b>instanceID</b>.</param>
        </member>
        <member name="M:sl.Camera.GetObjectDetectionParameters">
             <summary>
             Returns the ObjectDetectionParameters used.
            
             It corresponds to the structure given as argument to the EnableObjectDetection() method.
             </summary>
             <returns>sl.ObjectDetectionParameters containing the parameters used for object detection initialization.</returns>
        </member>
        <member name="M:sl.Camera.GetBodyTrackingParameters">
             <summary>
             Returns the BodyTrackingParameters used.
            
             It corresponds to the structure given as argument to the EnableBodyTracking() method.
             </summary>
             <returns>sl.BodyTrackingParameters containing the parameters used for body tracking initialization.</returns>
        </member>
        <member name="M:sl.Camera.IngestCustomBoxObjects(System.Collections.Generic.List{sl.CustomBoxObjectData})">
            <summary>
            Feed the 3D Object tracking method with your own 2D bounding boxes from your own detection algorithm.
            </summary>
            <param name="objects_in">List of CustomBoxObjectData to feed the object detection.</param>
            <param name="instanceID">Id of the object detection instance. Used when multiple instances of the object detection module are enabled at the same time.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveObjects(sl.Objects@,sl.ObjectDetectionRuntimeParameters@,System.UInt32)">
            <summary>
            Retrieve objects detected by the object detection module.
            </summary>
            <param name="objs"> Retrieved objects. </param>
            <param name="od_params"> Object detection runtime parameters </param>
            <param name="instanceID">Id of the object detection instance. Used when multiple instances of the object detection module are enabled at the same time.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.RetrieveBodies(sl.Bodies@,sl.BodyTrackingRuntimeParameters@,System.UInt32)">
            <summary>
            Retrieve bodies detected by the body tracking module.
            </summary>
            <param name="objs"> Retrieved bodies. </param>
            <param name="bt_params"> Body tracking runtime parameters </param>
            <param name="instanceID">Id of the body tracking instance. Used when multiple instances of the body tracking module are enabled at the same time.</param>
            <returns>sl.ERROR_CODE.SUCCESS if everything went fine, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Camera.UpdateObjectsBatch(System.Int32@)">
            <summary>
            Update the batch trajectories and retrieve the number of batches.
            </summary>
            <param name="nbBatches"> Numbers of batches. </param>
            <returns>An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="M:sl.Camera.GetObjectsBatch(System.Int32,sl.ObjectsBatch@)">
            <summary>
            Retrieve a batch of objects.
            \note This method need to be called after RetrieveObjects(), otherwise trajectories will be empty.
            \note It also needs to be called after UpdateObjectsBatch() in order to retrieve the number of batch trajectories.
            \note To retrieve all the objects' batches, you need to iterate from 0 to nbBatches (retrieved from UpdateObjectsBatch()).
            </summary>
            <param name="batch_index"> Index of the batch retrieved.</param>
            <param name="objectsBatch"> Trajectory that will be filled by the batching queue process.</param>
            <returns>An sl.ERROR_CODE that indicates the type of error.</returns>
        </member>
        <member name="T:sl.Constant">
            <summary>
            Constant for plugin. Should not be changed
            </summary>
        </member>
        <member name="F:sl.Constant.MAX_SUBMESH">
            <summary>
            Maximum number of chunks. It's best to get relatively few chunks and to update them quickly.
            </summary>
        </member>
        <member name="F:sl.Constant.MAX_BATCH_SIZE">
            <summary>
            Max size of trajectory data (number of frames stored)
            </summary>
        </member>
        <member name="F:sl.Constant.MAX_CAMERA_PLUGIN">
            <summary>
            Maximum number of camera can that be instancied at the same time. Used to initialized arrays of cameras (ex: GetDeviceList())
            </summary>
        </member>
        <member name="F:sl.Constant.MAX_FUSED_CAMERAS">
            <summary>
            Maximum number of camera that can be fused by the Fusion API.
            </summary>
        </member>
        <member name="T:sl.Matrix3x3">
            \ingroup Core_group
            <summary>
            Structure representing a generic 3*3 matrix.
            </summary>
        </member>
        <member name="F:sl.Matrix3x3.m">
            <summary>
            Array containing the values fo the 3*3 matrix.
            </summary>
        </member>
        <member name="M:sl.Matrix3x3.multiply(sl.float3)">
            <summary>
            Gives the result of the multiplication between a sl.Matrix3x3 and a specified scalar value.
            </summary>
            <param name="a">Scalar value to multiple the sl.Matrix3x3 with.</param>
            <returns>The result of the multiplication with the scalar given as input.</returns>
        </member>
        <member name="T:sl.POSITION_TYPE">
            \ingroup Fusion_group
            <summary>
            Lists the types of possible position outputs.
            </summary>
        </member>
        <member name="F:sl.POSITION_TYPE.RAW">
            <summary>
            The output position will be the raw position data.
            </summary>
        </member>
        <member name="F:sl.POSITION_TYPE.FUSION">
            <summary>
            The output position will be the fused position projected into the requested camera repository.
            </summary>
        </member>
        <member name="F:sl.POSITION_TYPE.SL_POSITION_TYPE_LAST">
            @cond SHOWHIDDEN 
        </member>
        <member name="T:sl.Resolution">
            <summary>
            \ingroup Core_group
            Structure containing the width and height of an image.
            </summary>
        </member>
        <member name="M:sl.Resolution.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
        </member>
        <member name="F:sl.Resolution.width">
            <summary>
            Width of the image in pixels.
            </summary>
        </member>
        <member name="F:sl.Resolution.height">
            <summary>
            Height of the image in pixels.
            </summary>
        </member>
        <member name="T:sl.Rect">
            <summary>
            Structure defining a 2D rectangle with top-left corner coordinates and width/height in pixels.
            </summary>
        </member>
        <member name="F:sl.Rect.x">
            <summary>
            x coordinates of top-left corner.
            </summary>
        </member>
        <member name="F:sl.Rect.y">
            <summary>
            y coordinates of top-left corner.
            </summary>
        </member>
        <member name="F:sl.Rect.width">
            <summary>
            Width of the rectangle in pixels.
            </summary>
        </member>
        <member name="F:sl.Rect.height">
            <summary>
            Height of the rectangle in pixels.
            </summary>
        </member>
        <member name="T:sl.ERROR_CODE">
            \ingroup  Core_group
             <summary>
             List of error codes in the ZED SDK.
             </summary>
             \note For more info, read about the ZED SDK C++ enum it mirrors:
             <a href="https://www.stereolabs.com/docs/api/group__Core__group.html#ga4db9ee29f2ff83c71567c12f6bfbf28c">ERROR_CODE</a>
        </member>
        <member name="F:sl.ERROR_CODE.CORRUPTED_FRAME">
            <summary>
             The image could be corrupted, Enabled with the parameter InitParameters.enable_image_validity_check
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_REBOOTING">
            <summary>
            The camera is currently rebooting.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SUCCESS">
            <summary>
            Standard code for successful behavior.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.FAILURE">
            <summary>
            Standard code for unsuccessful behavior.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.NO_GPU_COMPATIBLE">
            <summary>
            No GPU found or CUDA capability of the device is not supported.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.NOT_ENOUGH_GPUMEM">
            <summary>
            Not enough GPU memory for this depth mode. Try a different mode (such as \ref DEPTH_MODE "PERFORMANCE"), or increase the minimum depth value (see \ref InitParameters.depthMinimumDistance).
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_NOT_DETECTED">
            <summary>
            No camera was detected.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SENSORS_NOT_INITIALIZED">
            <summary>
            The MCU that controls the sensors module has an invalid serial number. You can try to recover it by launching the <b>ZED Diagnostic</b> tool from the command line with the option <code>-r</code>.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SENSOR_NOT_DETECTED">
            <summary>
            A camera with sensor is detected but the sensors (IMU, barometer, ...) cannot be opened. Only the \ref MODEL "MODEL.ZED" does not has sensors. Unplug/replug is required.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_RESOLUTION">
            <summary>
            In case of invalid resolution parameter, such as an upsize beyond the original image size in Camera.RetrieveImage.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.LOW_USB_BANDWIDTH">
            <summary>
            Insufficient bandwidth for the correct use of the camera. This issue can occur when you use multiple cameras or a USB 2.0 port.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CALIBRATION_FILE_NOT_AVAILABLE">
            <summary>
            The calibration file of the camera is not found on the host machine. Use <b>ZED Explorer</b> or <b>ZED Calibration</b> to download the factory calibration file.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_CALIBRATION_FILE">
            <summary>
            The calibration file is not valid. Try to download the factory calibration file or recalibrate your camera using <b>ZED Calibration</b>.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_SVO_FILE">
            <summary>
            The provided SVO file is not valid.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SVO_RECORDING_ERROR">
            <summary>
            An error occurred while trying to record an SVO (not enough free storage, invalid file, ...).
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SVO_UNSUPPORTED_COMPRESSION">
            <summary>
            An SVO related error, occurs when NVIDIA based compression cannot be loaded.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.END_OF_SVO_FILE_REACHED">
            <summary>
            SVO end of file has been reached.
            \n No frame will be available until the SVO position is reset.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_COORDINATE_SYSTEM">
            <summary>
            The requested coordinate system is not available.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_FIRMWARE">
            <summary>
            The firmware of the camera is out of date. Update to the latest version.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_FUNCTION_PARAMETERS">
            <summary>
             Invalid parameters have been given for the function.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CUDA_ERROR">
            <summary>
            A CUDA error has been detected in the process, in Camera.Grab() or Camera.RetrieveXXX() only. Activate wrapperVerbose in ZEDManager.cs for more info.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_NOT_INITIALIZED">
            <summary>
            The ZED SDK is not initialized. Probably a missing call to Camera.Open().
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.NVIDIA_DRIVER_OUT_OF_DATE">
            <summary>
            Your NVIDIA driver is too old and not compatible with your current CUDA version.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_FUNCTION_CALL">
            <summary>
            The call of the function is not valid in the current context. Could be a missing call of Camera.Open().
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CORRUPTED_SDK_INSTALLATION">
            <summary>
             The ZED SDK was not able to load its dependencies or some assets are missing. Reinstall the ZED SDK or check for missing dependencies (cuDNN, TensorRT).
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INCOMPATIBLE_SDK_VERSION">
            <summary>
            The installed ZED SDK is incompatible with the one used to compile the program.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INVALID_AREA_FILE">
            <summary>
            The given area file does not exist. Check the path.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.INCOMPATIBLE_AREA_FILE">
            <summary>
            The area file does not contain enough data to be used or the \ref DEPTH_MODE used during the creation of the area file is different from the one currently set.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_FAILED_TO_SETUP">
            <summary>
            Failed to open the camera at the proper resolution. Try another resolution or make sure that the UVC driver is properly installed.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_DETECTION_ISSUE">
            <summary>
            Your camera can not be opened. Try replugging it to another port or flipping the USB-C connector (if there is one).
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.CAMERA_ALREADY_IN_USE">
            <summary>
            Cannot start the camera stream. Make sure your camera is not already used by another process or blocked by firewall or antivirus.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.NO_GPU_DETECTED">
            <summary>
             No GPU found. CUDA is unable to list it. Can be a driver/reboot issue.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.PLANE_NOT_FOUND">
            <summary>
            Plane not found. Either no plane is detected in the scene, at the location or corresponding to the floor,
            or the floor plane doesn't match the prior given.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.MODULE_NOT_COMPATIBLE_WITH_CAMERA">
            <summary>
            The module you try to use is not compatible with your camera \ref MODEL. \note \ref MODEL "MODEL.ZED" does not has an IMU and does not support the AI modules.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.MOTION_SENSORS_REQUIRED">
            <summary>
            The module needs the sensors to be enabled (see InitParameters.sensorsRequired).
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.MODULE_NOT_COMPATIBLE_WITH_CUDA_VERSION">
            <summary>
            The module needs a newer version of CUDA.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.SENSORS_DATA_REQUIRED">
            <summary>
            The input data does not contains the high frequency sensors data, this is usually because it requires newer SVO/Streaming. In order to work this modules needs inertial data present in it input.
            </summary>
        </member>
        <member name="F:sl.ERROR_CODE.ERROR_CODE_LAST">
            @cond SHOWHIDDEN 
        </member>
        <member name="T:sl.COORDINATE_SYSTEM">
            \ingroup  Core_group
             <summary>
             Lists available coordinates systems for positional tracking and 3D measures.
             \image html CoordinateSystem.webp
             </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.IMAGE">
            <summary>
            Standard coordinates system in computer vision.
            \n Used in OpenCV: see <a href="http://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html">here</a>.
            </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.LEFT_HANDED_Y_UP">
            <summary>
            Left-handed with Y up and Z forward.
            \n Used in Unity3D with DirectX
            </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP">
            <summary>
             Right-handed with Y pointing up and Z backward.
            \n Used in OpenGL.
            </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP">
            <summary>
            Right-handed with Z pointing up and Y forward.
            \n Used in 3DSMax.
            </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.LEFT_HANDED_Z_UP">
            <summary>
            Left-handed with Z axis pointing up and X forward
            \n Used in Unreal Engine.
            </summary>
        </member>
        <member name="F:sl.COORDINATE_SYSTEM.RIGHT_HANDED_Z_UP_X_FWD">
            <summary>
            Right-handed with Z pointing up and X forward.
            \n Used in ROS (REP 103)
            </summary>
        </member>
        <member name="T:sl.MODULE">
            <summary>
            Lists available modules.
            </summary>
        </member>
        <member name="F:sl.MODULE.ALL">
            <summary>
            All modules
            </summary>
        </member>
        <member name="F:sl.MODULE.DEPTH">
            <summary>
            Depth module
            </summary>
        </member>
        <member name="F:sl.MODULE.POSITIONAL_TRACKING">
            <summary>
            Positional tracking module
            </summary>
        </member>
        <member name="F:sl.MODULE.OBJECT_DETECTION">
            <summary>
            Object Detection module
            </summary>
        </member>
        <member name="F:sl.MODULE.BODY_TRACKING">
            <summary>
            Body Tracking module
            </summary>
        </member>
        <member name="F:sl.MODULE.SPATIAL_MAPPING">
            <summary>
            Spatial mapping module
            </summary>
        </member>
        <member name="T:sl.CameraConfiguration">
            \ingroup Core_group
            <summary>
            Structure containing information about the camera sensor. 
            </summary>
            \note This object is meant to be used as a read-only container, editing any of its field won't impact the ZED SDK.
            \warning sl.CalibrationParameters are returned in sl.COORDINATE_SYSTEM.IMAGE, they are not impacted by the sl.InitParameters.coordinateSystem.
        </member>
        <member name="F:sl.CameraConfiguration.calibrationParameters">
            <summary>
            Intrinsics and extrinsic stereo parameters for rectified/undistorted images.
            </summary>
        </member>
        <member name="F:sl.CameraConfiguration.calibrationParametersRaw">
            <summary>
            Intrinsics and extrinsic stereo parameters for unrectified/distorted images.
            </summary>
        </member>
        <member name="F:sl.CameraConfiguration.firmwareVersion">
            <summary>
            Internal firmware version of the camera.
            </summary>
        </member>
        <member name="F:sl.CameraConfiguration.fps">
            <summary>
            FPS of the camera.
            </summary>
        </member>
        <member name="F:sl.CameraConfiguration.resolution">
            <summary>
            Resolution of the camera.
            </summary>
        </member>
        <member name="T:sl.CameraInformation">
            \ingroup Core_group
            <summary>
            Structure containing information of a single camera (serial number, model, input type, etc.)
            </summary>
        </member>
        <member name="F:sl.CameraInformation.serialNumber">
            <summary>
            Serial number of the camera.
            </summary>
        </member>
        <member name="F:sl.CameraInformation.cameraModel">
            <summary>
            Model of the camera (see sl.MODEL).
            </summary>
        </member>
        <member name="F:sl.CameraInformation.inputType">
            <summary>
            Input type used in the ZED SDK.
            </summary>
        </member>
        <member name="F:sl.CameraInformation.cameraConfiguration">
            <summary>
            Camera configuration parameters stored in a sl.CameraConfiguration.
            </summary>
        </member>
        <member name="F:sl.CameraInformation.sensorsConfiguration">
            <summary>
            Sensors configuration parameters stored in a sl.SensorsConfiguration.
            </summary>
        </member>
        <member name="T:sl.PositionalTrackingParameters">
            \ingroup PositionalTracking_group
            <summary>
            Class containing a set of parameters for the positional tracking module initialization.
            </summary>
            The default constructor sets all parameters to their default settings.
            \note Parameters can be user adjusted.
        </member>
        <member name="F:sl.PositionalTrackingParameters.initialWorldRotation">
            <summary>
            Rotation of the camera in the world frame when the camera is started.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingParameters.initialWorldPosition">
            <summary>
            Position of the camera in the world frame when the camera is started.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingParameters.enableAreaMemory">
            <summary>
            Whether the camera can remember its surroundings.
            </summary>
            This helps correct positional tracking drift and can be helpful for positioning different cameras relative to one other in space.
            \warning This mode requires more resources to run, but greatly improves tracking accuracy.
            \warning We recommend leaving it on by default.
        </member>
        <member name="F:sl.PositionalTrackingParameters.enablePoseSmothing">
            <summary>
            Whether to enable smooth pose correction for small drift correction.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingParameters.setFloorAsOrigin">
            <summary>
            Initializes the tracking to be aligned with the floor plane to better position the camera in space.
            </summary>
            \note This launches floor plane detection in the background until a suitable floor plane is found.
            \note The tracking will start in sl.POSITIONAL_TRACKING_STATE.SEARCHING state.
            \warning This features does not work with sl.MODEL.ZED since it needs an IMU to classify the floor.
            \warning The camera needs to look at the floor during initialization for optimum results.
        </member>
        <member name="F:sl.PositionalTrackingParameters.setAsStatic">
            <summary>
            Whether to define the camera as static.
            </summary>
            If true, it will not move in the environment. This allows you to set its position using \ref initialWorldPosition and \ref initialWorldRotation.
            \n All ZED SDK functionalities requiring positional tracking will be enabled without additional computation.
            \n sl.Camera.GetPosition() will return the values set as \ref initialWorldPosition and \ref initialWorldRotation.
        </member>
        <member name="F:sl.PositionalTrackingParameters.enableIMUFusion">
            <summary>
            Whether to enable the IMU fusion.
            </summary>
            When set to false, only the optical odometry will be used.
            \note This setting has no impact on the tracking of a camera.
            \note sl.MODEL.ZED does not have an IMU.
        </member>
        <member name="F:sl.PositionalTrackingParameters.depthMinRange">
            <summary>
            Minimum depth used by the ZED SDK for positional tracking.
            </summary>
            It may be useful for example if any steady objects are in front of the camera and may perturb the positional tracking algorithm.
            \n Default: -1 (no minimum depth)
        </member>
        <member name="F:sl.PositionalTrackingParameters.setGravityAsOrigin">
            <summary>
            Whether to override 2 of the 3 components from \ref initialWorldRotation using the IMU gravity.
            </summary>
            \note This parameter does nothing on sl.ZED.MODEL since it does not have an IMU.
        </member>
        <member name="F:sl.PositionalTrackingParameters.areaFilePath">
            <summary>
            Path of an area localization file that describes the surroundings (saved from a previous tracking session).
            </summary>
            \note Loading an area file will start a search phase, during which the camera will try to position itself in the previously learned area.
            \warning The area file describes a specific location. If you are using an area file describing a different location, the tracking function will continuously search for a position and may not find a correct one.
            \warning The '.area' file can only be used with the same depth mode (sl.DEPTH_MODE) as the one used during area recording.
        </member>
        <member name="F:sl.PositionalTrackingParameters.mode">
            <summary>
            Positional tracking mode used.
            </summary>
            Can be used to improve accuracy in some types of scene at the cost of longer runtime.
        </member>
        <member name="T:sl.Pose">
            \ingroup PositionalTracking_group
            <summary>
            Structure containing positional tracking data giving the position and orientation of the camera in 3D space.
            </summary>
            Different representations of position and orientation can be retrieved, along with timestamp and pose confidence.
        </member>
        <member name="F:sl.Pose.valid">
            <summary>
            Whether the tracking is activated or not.
            </summary>
            \note You should check that first if something is wrong.
        </member>
        <member name="F:sl.Pose.timestamp">
            <summary>
            Timestamp of the sl.Pose.
            </summary>
            This timestamp should be compared with the camera timestamp for synchronization.
        </member>
        <member name="F:sl.Pose.rotation">
            <summary>
            Orientation component of the sl.Pose.
            </summary>
        </member>
        <member name="F:sl.Pose.translation">
            <summary>
            Translation component of the sl.Pose.
            </summary>
        </member>
        <member name="F:sl.Pose.pose_confidence">
            <summary>
            Confidence/quality of the pose estimation for the target frame.
            </summary>
            A confidence metric of the tracking [0-100] with:
            - 0: tracking is lost
            - 100: tracking can be fully trusted
        </member>
        <member name="F:sl.Pose.pose_covariance">
            <summary>
            6x6 pose covariance matrix of translation (the first 3 values) and rotation in so3 (the last 3 values).
            </summary>
        </member>
        <member name="F:sl.Pose.twist">
            <summary>
            Twist of the camera available in reference camera.
            </summary>
            This expresses velocity in free space, broken into its linear and angular parts.
        </member>
        <member name="F:sl.Pose.twist_covariance">
            <summary>
            Row-major representation of the 6x6 twist covariance matrix of the camera.
            </summary>
            This expresses the uncertainty of the twist.
        </member>
        <member name="T:sl.RegionOfInterestParameters">
            \ingroup PositionalTracking_group
            <summary>
            Structure containing a set of parameters for the region of interest.
            </summary>
        </member>
        <member name="F:sl.RegionOfInterestParameters.depthFarThresholdMeters">
            <summary>
            Filtering how far object in the ROI should be considered, this is useful for a vehicle for instance
            Default is 2.5meters
            </summary>
        </member>
        <member name="F:sl.RegionOfInterestParameters.imageHeightRatioCutoff">
            <summary>
            By default consider only the lower half of the image, can be useful to filter out the sky
            Default is 0.5, corresponding to the lower half of the image.
            </summary>
        </member>
        <member name="F:sl.RegionOfInterestParameters.autoApplyModule">
            <summary>
            Once computed the ROI computed will be automatically applied.
            </summary>
        </member>
        <member name="T:sl.POSITIONAL_TRACKING_STATE">
            \ingroup PositionalTracking_group
             <summary>
             Lists the different states of positional tracking.
             </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.SEARCHING">
            <summary>
            \warn DEPRECATED: This state is no longer in use.
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.OK">
            <summary>
            The positional tracking is working normally.
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.OFF">
            <summary>
            The positional tracking is not enabled.
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.FPS_TOO_LOW">
            <summary>
            The effective FPS is too low to give proper results for motion tracking.
            \n Consider using performance parameters (sl.DEPTH_MODE.PERFORMANCE, low camera resolution (sl.RESOLUTION.VGA
            / sl.RESOLUTION.HDSVGA or sl.RESOLUTION.HD720).
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.SEARCHING_FLOOR_PLANE">
            <summary>
            The camera is searching for the floor plane to locate itself with respect to it.\n The sl.REFERENCE_FRAME.WORLD will be set afterward.
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_STATE.UNAVAILABLE">
            <summary>
            The tracking module was unable to perform tracking from the previous frame to the current frame.
            </summary>
        </member>
        <member name="T:sl.ODOMETRY_STATUS">
            \ingroup PositionalTracking_group
             <summary>
             Report the status of current odom tracking.
             </summary>
        </member>
        <member name="F:sl.ODOMETRY_STATUS.OK">
            <summary>
            The positional tracking module successfully tracked from the previous frame to the current frame.
            </summary>
        </member>
        <member name="F:sl.ODOMETRY_STATUS.UNAVAILABLE">
            <summary>
            The positional tracking module failed to track from the previous frame to the current frame.
            </summary>
        </member>
        <member name="T:sl.SPATIAL_MEMORY_STATUS">
            \ingroup PositionalTracking_group
             <summary>
             Report the status of current map tracking.
             </summary>
        </member>
        <member name="F:sl.SPATIAL_MEMORY_STATUS.OK">
            <summary>
            The positional tracking module is operating normally.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MEMORY_STATUS.LOOP_CLOSED">
            <summary>
            The positional tracking module detected a loop and corrected its position.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MEMORY_STATUS.SEARCHING">
            <summary>
            The positional tracking module is searching for recognizable areas in the global map to relocate.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MEMORY_STATUS.OFF">
            <summary>
            Spatial memory is disabled.
            </summary>
        </member>
        <member name="T:sl.POSITIONAL_TRACKING_FUSION_STATUS">
            \ingroup PositionalTracking_group
             <summary>
             Report the status of the positional tracking fusion.
             </summary>
        </member>
        <member name="T:sl.PositionalTrackingStatus">
            \ingroup PositionalTracking_group
             <summary>
             Lists the different status of positional tracking.
             </summary>
        </member>
        <member name="F:sl.PositionalTrackingStatus.odometryStatus">
            <summary>
            Represents the current state of Visual-Inertial Odometry (VIO) tracking between the previous frame and the current frame.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingStatus.spatialMemoryStatus">
            <summary>
            Represents the current state of camera tracking in the global map.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingStatus.trackingFusionStatus">
            <summary>
            Represents the current state of positional tracking fusion.
            </summary>
        </member>
        <member name="T:sl.POSITIONAL_TRACKING_MODE">
            \ingroup PositionalTracking_group
             <summary>
             Lists the mode of positional tracking that can be used.
             </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_MODE.GEN_1">
            <summary>
            Default mode. Best compromise in performance and accuracy.
            </summary>
        </member>
        <member name="F:sl.POSITIONAL_TRACKING_MODE.GEN_2">
            <summary>
            Next generation of positional tracking, allow better accuracy.
            </summary>
        </member>
        <member name="T:sl.REFERENCE_FRAME">
            \ingroup PositionalTracking_group
            <summary>
            Lists possible types of position matrix used to store camera path and pose.
            </summary>
        </member>
        <member name="F:sl.REFERENCE_FRAME.WORLD">
            <summary>
            The transform of sl.Pose will contain the motion with reference to the world frame (previously called sl.PATH).
            </summary>
        </member>
        <member name="F:sl.REFERENCE_FRAME.CAMERA">
            <summary>
            The transform of sl.Pose will contain the motion with reference to the previous camera frame (previously called sl.POSE).
            </summary>
        </member>
        <member name="T:sl.TRACKING_FRAME">
            \ingroup PositionalTracking_group
            <summary>
            Part of the ZED (left/right sensor, center) that's considered its center for tracking purposes.
            </summary>
        </member>
        <member name="F:sl.TRACKING_FRAME.LEFT_EYE">
            <summary>
            Camera's center is at the left sensor.
            </summary>
        </member>
        <member name="F:sl.TRACKING_FRAME.CENTER_EYE">
            <summary>
            Camera's center is in the camera's physical center, between the sensors.
            </summary>
        </member>
        <member name="F:sl.TRACKING_FRAME.RIGHT_EYE">
            <summary>
            Camera's center is at the right sensor.
            </summary>
        </member>
        <member name="T:sl.ImuData">
            \ingroup Sensors_group
            <summary>
            Structure containing data from the IMU sensor.
            </summary>
        </member>
        <member name="F:sl.ImuData.available">
            <summary>
            Whether the IMU sensor is available in your camera.
            </summary>
        </member>
        <member name="F:sl.ImuData.timestamp">
            <summary>
            Data acquisition timestamp in nanoseconds.
            </summary>
        </member>
        <member name="F:sl.ImuData.angularVelocity">
            <summary>
            Angular velocity vector of the gyroscope in deg/s.
            </summary>
            The value is corrected from bias, scale and misalignment.
            \note The value can be directly ingested in an IMU fusion algorithm to extract a quaternion.
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.ImuData.linearAcceleration">
            <summary>
            Linear acceleration vector (3x1) of the gyroscope in m/s².
            </summary>
            The value is corrected from bias, scale and misalignment.
            \note The value can be directly ingested in an IMU fusion algorithm to extract a quaternion.
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.ImuData.angularVelocityUncalibrated">
            <summary>
            Angular velocity vector of the gyroscope in deg/s (uncorrected from the IMU calibration).
            </summary>
            \note The value is the exact raw values from the IMU.
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.ImuData.linearAccelerationUncalibrated">
            <summary>
            Linear acceleration vector of the gyroscope in m/s² (uncorrected from the IMU calibration).
            </summary>
            \note The value is the exact raw values from the IMU.
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.ImuData.fusedOrientation">
            <summary>
            Orientation from the IMU sensor.
            </summary>
        </member>
        <member name="F:sl.ImuData.orientationCovariance">
            <summary>
            Covariance matrix of the quaternion.
            </summary>
        </member>
        <member name="F:sl.ImuData.angularVelocityCovariance">
            <summary>
            Covariance matrix of the angular velocity of the gyroscope in deg/s (\ref angularVelocity).
            </summary>
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.ImuData.linearAccelerationCovariance">
            <summary>
            Accelerometer raw data covariance matrix.
            </summary>
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="T:sl.BarometerData">
            \ingroup Sensors_group
            <summary>
            Structure containing data from the barometer sensor.
            </summary>
        </member>
        <member name="F:sl.BarometerData.available">
            <summary>
            Whether the barometer sensor is available in your camera.
            </summary>
        </member>
        <member name="F:sl.BarometerData.timestamp">
            <summary>
            Data acquisition timestamp in nanoseconds.
            </summary>
        </member>
        <member name="F:sl.BarometerData.pressure">
            <summary>
            Ambient air pressure in hectopascal (hPa).
            </summary>
        </member>
        <member name="F:sl.BarometerData.relativeAltitude">
            <summary>
            Relative altitude from first camera position (at sl.Camera.Open() time).
            </summary>
        </member>
        <member name="T:sl.HEADING_STATE">
            \ingroup  Sensors_group
             <summary>
             Lists the different states of the magnetic heading.
             </summary>
        </member>
        <member name="F:sl.HEADING_STATE.GOOD">
            <summary>
            The heading is reliable and not affected by iron interferences.
            </summary>
        </member>
        <member name="F:sl.HEADING_STATE.OK">
            <summary>
            The heading is reliable, but affected by slight iron interferences.
            </summary>
        </member>
        <member name="F:sl.HEADING_STATE.NOT_GOOD">
            <summary>
            The heading is not reliable because affected by strong iron interferences.
            </summary>
        </member>
        <member name="F:sl.HEADING_STATE.NOT_CALIBRATED">
            <summary>
            The magnetometer has not been calibrated.
            </summary>
        </member>
        <member name="F:sl.HEADING_STATE.MAG_NOT_AVAILABLE">
            <summary>
            The magnetometer sensor is not available.
            </summary>
        </member>
        <member name="F:sl.HEADING_STATE.LAST">
            @cond SHOWHIDDEN
        </member>
        <member name="T:sl.MagnetometerData">
            \ingroup Sensors_group
            <summary>
            Structure containing data from the magnetometer sensor.
            </summary>
        </member>
        <member name="F:sl.MagnetometerData.available">
            <summary>
            Whether the magnetometer sensor is available in your camera.
            </summary>
        </member>
        <member name="F:sl.MagnetometerData.timestamp">
            <summary>
            Data acquisition timestamp in nanoseconds.
            </summary>
        </member>
        <member name="F:sl.MagnetometerData.magneticField">
            <summary>
            Magnetic field local vector in microtesla (μT).
            </summary>
            \note To calibrate the magnetometer sensor, please use \b ZED \b Sensor \b Viewer tool after placing the camera in the final operating environment.
        </member>
        <member name="F:sl.MagnetometerData.magneticFieldUncalibrated">
            <summary>
            Uncalibrated magnetic field local vector in microtesla (μT).
            </summary>
            \note The magnetometer raw values are affected by soft and hard iron interferences.
            \note The sensor must be calibrated by placing the camera in the working environment and using \b ZED \b Sensor \b Viewer tool.
            \note Not available in SVO or STREAM mode.
        </member>
        <member name="F:sl.MagnetometerData.magneticHeading">
            <summary>
            Camera heading in degrees relative to the magnetic North Pole.
            </summary>
            \note The magnetic North Pole has an offset with respect to the geographic North Pole, depending on the geographic position of the camera.
            \note To get a correct magnetic heading, the magnetometer sensor must be calibrated using \b ZED \b Sensor \b Viewer tool.
        </member>
        <member name="F:sl.MagnetometerData.magnetic_heading_state">
            <summary>
            State of \ref magneticHeading.
            </summary>
        </member>
        <member name="F:sl.MagnetometerData.magnetic_heading_accuracy">
            <summary>
            Accuracy of \ref magnetic_heading measure in the range [0.0, 1.0].
            </summary>
            \note A negative value means that the magnetometer must be calibrated using \b ZED \b Sensor \b Viewer tool.
        </member>
        <member name="F:sl.MagnetometerData.effective_rate">
            <summary>
            Realtime data acquisition rate in hertz (Hz).
            </summary>
        </member>
        <member name="T:sl.TemperatureSensorData">
            \ingroup Sensors_group
            <summary>
            Structure containing data from the temperature sensors.
            </summary>
        </member>
        <member name="F:sl.TemperatureSensorData.imu_temp">
            <summary>
            Temperature in °C at the IMU location (-100 if not available).
            </summary>
        </member>
        <member name="F:sl.TemperatureSensorData.barometer_temp">
            <summary>
            Temperature in °C at the barometer location (-100 if not available).
            </summary>
        </member>
        <member name="F:sl.TemperatureSensorData.onboard_left_temp">
            <summary>
            Temperature in °C next to the left image sensor (-100 if not available).
            </summary>
        </member>
        <member name="F:sl.TemperatureSensorData.onboard_right_temp">
            <summary>
            Temperature in °C next to the right image sensor (-100 if not available).
            </summary>
        </member>
        <member name="T:sl.SensorsData">
            \ingroup Sensors_group
            <summary>
            Structure containing all sensors data (except image sensors) to be used for positional tracking or environment study.
            </summary>
            \note Some data are not available in SVO and streaming input mode.
            \note They are specified by a note "Not available in SVO or STREAM mode." in the documentation of a specific data.
            \note If nothing is mentioned in the documentation, they are available in all input modes.
        </member>
        <member name="F:sl.SensorsData.imu">
            <summary>
            IMU data.
            </summary>
        </member>
        <member name="F:sl.SensorsData.barometer">
            <summary>
            Barometer data.
            </summary>
        </member>
        <member name="F:sl.SensorsData.magnetometer">
            <summary>
            Magnetometer data.
            </summary>
        </member>
        <member name="F:sl.SensorsData.temperatureSensor">
            <summary>
            Temperature data.
            </summary>
        </member>
        <member name="F:sl.SensorsData.camera_moving_state">
            <summary>
            Motion state of the camera.
            </summary>
            - static: 0
            - moving: 1
            - falling: 2
        </member>
        <member name="F:sl.SensorsData.image_sync_val">
            <summary>
            Indicates if the sensors data has been taken during a frame capture on sensor.
            </summary>
            If the value is 1, the data has been taken during the same time than a frame has been acquired by the left sensor (the time precision is linked to the IMU rate, therefore 800Hz == 1.3ms).
            \n If the value is 0, the data has not been taken during a frame acquisition.
        </member>
        <member name="T:sl.SENSOR_TYPE">
            \ingroup Sensors_group
            <summary>
            Lists available sensor types.
            \note Sensors are not available on sl.MODEL.ZED.
            </summary>
        </member>
        <member name="F:sl.SENSOR_TYPE.ACCELEROMETER">
            <summary>
            Three-axis accelerometer sensor to measure the inertial accelerations.
            </summary>
        </member>
        <member name="F:sl.SENSOR_TYPE.GYROSCOPE">
            <summary>
            Three-axis gyroscope sensor to measure the angular velocities.
            </summary>
        </member>
        <member name="F:sl.SENSOR_TYPE.MAGNETOMETER">
            <summary>
            Three-axis magnetometer sensor to measure the orientation of the device with respect to the Earth's magnetic field.
            </summary>
        </member>
        <member name="F:sl.SENSOR_TYPE.BAROMETER">
            <summary>
            Barometer sensor to measure the atmospheric pressure.
            </summary>
        </member>
        <member name="T:sl.SENSORS_UNIT">
            \ingroup Sensors_group
            <summary>
            Lists available measurement units of onboard sensors.
            \note Sensors are not available on sl.MODEL.ZED.
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.M_SEC_2">
            <summary>
            m/s² (acceleration)
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.DEG_SEC">
            <summary>
            deg/s (angular velocity)
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.U_T">
            <summary>
            μT (magnetic field)
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.HPA">
            <summary>
            hPa (atmospheric pressure)
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.CELSIUS">
            <summary>
            °C (temperature)
            </summary>
        </member>
        <member name="F:sl.SENSORS_UNIT.HERTZ">
            <summary>
            Hz (frequency)
            </summary>
        </member>
        <member name="T:sl.SensorParameters">
            \ingroup Sensors_group
            <summary>
            Structure containing information about a single sensor available in the current device.
            </summary>
            Information about the camera sensors is available in the sl.CameraInformation struct returned by sl.Camera.GetCameraInformation().
            \note This structure is meant to be used as a read-only container.
            \note Editing any of its fields will not impact the ZED SDK.
        </member>
        <member name="F:sl.SensorParameters.type">
            <summary>
            Type of the sensor.
            </summary>
        </member>
        <member name="F:sl.SensorParameters.resolution">
            <summary>
            Resolution of the sensor.
            </summary>
        </member>
        <member name="F:sl.SensorParameters.sampling_rate">
            <summary>
            Sampling rate (or ODR) of the sensor.
            </summary>
        </member>
        <member name="F:sl.SensorParameters.range">
            <summary>
            Range of the sensor (minimum: `range.x`, maximum: `range.y`).
            </summary>
        </member>
        <member name="F:sl.SensorParameters.noise_density">
            <summary>
            White noise density given as continuous (frequency-independent).
            </summary>
            \note The units will be expressed in ```sensor_unit / √(Hz)```.
            \note `NAN` if the information is not available.
        </member>
        <member name="F:sl.SensorParameters.random_walk">
            <summary>
            Random walk derived from the Allan Variance given as continuous (frequency-independent).
            </summary>
            \note The units will be expressed in ```sensor_unit / √(Hz)```.
            \note `NAN` if the information is not available.
        </member>
        <member name="F:sl.SensorParameters.sensor_unit">
            <summary>
            Unit of the sensor.
            </summary>
        </member>
        <member name="F:sl.SensorParameters.isAvailable">
            <summary>
            Whether the sensor is available in your camera.
            </summary>
        </member>
        <member name="T:sl.SensorsConfiguration">
            \ingroup Sensors_group
            <summary>
            Structure containing information about all the sensors available in the current device.
            </summary>
            Information about the camera sensors is available in the sl.CameraInformation struct returned by sl.Camera.GetCameraInformation().
            \note This structure is meant to be used as a read-only container.
            \note Editing any of its fields will not impact the ZED SDK.
        </member>
        <member name="F:sl.SensorsConfiguration.firmware_version">
            <summary>
            Firmware version of the sensor module.
            </summary>
            \note 0 if no sensors are available (sl.MODEL.ZED).
        </member>
        <member name="F:sl.SensorsConfiguration.camera_imu_rotation">
            <summary>
            IMU to left camera rotation (quaternion).
            </summary>
            \note It contains the rotation between the IMU frame and camera frame.
        </member>
        <member name="F:sl.SensorsConfiguration.camera_imu_translation">
            <summary>
            IMU to left camera translation.
            </summary>
            \note It contains the rotation between the IMU frame and camera frame.
        </member>
        <member name="F:sl.SensorsConfiguration.imu_magnometer_rotation">
            <summary>
            Magnetometer to IMU rotation (quaternion).
            </summary>
            \note It contains rotation between IMU frame and magnetometer frame.
        </member>
        <member name="F:sl.SensorsConfiguration.imu_magnometer_translation">
            <summary>
            Magnetometer to IMU translation.
            </summary>
            \note It contains translation between IMU frame and magnetometer frame.
        </member>
        <member name="F:sl.SensorsConfiguration.accelerometer_parameters">
            <summary>
            Configuration of the accelerometer.
            </summary>
        </member>
        <member name="F:sl.SensorsConfiguration.gyroscope_parameters">
            <summary>
            Configuration of the gyroscope.
            </summary>
        </member>
        <member name="F:sl.SensorsConfiguration.magnetometer_parameters">
            <summary>
            Configuration of the magnetometer.
            </summary>
        </member>
        <member name="F:sl.SensorsConfiguration.barometer_parameters">
            <summary>
            Configuration of the barometer.
            </summary>
        </member>
        <member name="M:sl.SensorsConfiguration.isSensorAvailable(sl.SENSOR_TYPE)">
            <summary>
            Checks if a sensor is available on the.
            </summary>
            <param name="sensor_type">Sensor type to check.</param>
            <returns>true if the sensor is available on the device, otherwise false.</returns>
        </member>
        <member name="T:sl.RuntimeParameters">
            \ingroup Depth_group
             <summary>
             Class containing parameters that defines the behavior of sl.Camera.Grab().
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be user-adjusted at runtime.
        </member>
        <member name="F:sl.RuntimeParameters.measure3DReferenceFrame">
            <summary>
            Reference frame in which to provides the 3D measures (point cloud, normals, etc.).
            </summary>
            Default: sl.REFERENCE_FRAME.CAMERA
        </member>
        <member name="F:sl.RuntimeParameters.enableDepth">
            <summary>
            Defines if the depth map should be computed.
            </summary>
            Default: true
            \note If set to false, only the images are available.
        </member>
        <member name="F:sl.RuntimeParameters.enableFillMode">
            <summary>
            Defines if the depth map should be completed or not.
            </summary>
            Default: false
            \note It is similar to the removed sl.SENSING_MODE.FILL.
            \warning Enabling this will override the confidence values \ref confidenceThreshold and
            \ref textureConfidenceThreshold as well as \ref removeSaturatedAreas.
        </member>
        <member name="F:sl.RuntimeParameters.confidenceThreshold">
            <summary>
            Threshold to reject depth values based on their confidence.
            </summary>
            Each depth pixel has a corresponding confidence sl.MEASURE.CONFIDENCE in the range [1, 100].
            \n Decreasing this value will remove depth data from both objects edges and low textured areas, to keep only confident depth estimation data.
            \n Default: 95
            \note Pixels with a value close to 100 are not to be trusted. Accurate depth pixels tends to be closer to lower values.
            \note It can be seen as a probability of error, scaled to 100.
        </member>
        <member name="F:sl.RuntimeParameters.textureConfidenceThreshold">
            <summary>
            Threshold to reject depth values based on their texture confidence.
            </summary>
            The texture confidence range is [1, 100].
            \n Decreasing this value will remove depth data from image areas which are uniform.
            \n Default: 100 (no depth pixel will be rejected)
            \note Pixels with a value close to 100 are not to be trusted. Accurate depth pixels tends to be closer to lower values.
        </member>
        <member name="F:sl.RuntimeParameters.removeSaturatedAreas">
            <summary>
            Defines if the saturated area (luminance>=255) must be removed from depth map estimation.
            </summary>
            Default: true
            \note It is recommended to keep this parameter at true because saturated area can create false detection.
        </member>
        <member name="M:sl.RuntimeParameters.#ctor(sl.REFERENCE_FRAME,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            All the parameters are set to their default values.
        </member>
        <member name="T:sl.CameraParameters">
            \ingroup Depth_group
             <summary>
             Structure containing the intrinsic parameters of a camera.
             </summary>
             \note \note For more info, read about the ZED SDK C++ struct it mirrors:
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1CameraParameters.html">CameraParameters</a>
        </member>
        <member name="F:sl.CameraParameters.fx">
            <summary>
            Focal length in pixels along x axis.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.fy">
            <summary>
            Focal length in pixels along y axis.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.cx">
            <summary>
            Optical center along x axis, defined in pixels (usually close to width / 2).
            </summary>
        </member>
        <member name="F:sl.CameraParameters.cy">
            <summary>
            Optical center along y axis, defined in pixels (usually close to height / 2).
            </summary>
        </member>
        <member name="F:sl.CameraParameters.disto">
            <summary>
            Distortion factor : [k1, k2, p1, p2, k3, k4, k5, k6, s1, s2, s3, s4].
            </summary>
            Radial (k1, k2, k3, k4, k5, k6), Tangential (p1,p2) and Prism (s1, s2, s3, s4) distortion.
        </member>
        <member name="F:sl.CameraParameters.vFOV">
            <summary>
            Vertical field of view, in degrees.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.hFOV">
            <summary>
            Horizontal field of view, in degrees.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.dFOV">
            <summary>
            Diagonal field of view, in degrees.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.resolution">
            <summary>
            Size in pixels of the images given by the camera.
            </summary>
        </member>
        <member name="F:sl.CameraParameters.focalLengthMetric">
            <summary>
            Real focal length in millimeters.
            </summary>
        </member>
        <member name="T:sl.CalibrationParameters">
            \ingroup Depth_group
             <summary>
             Structure containing intrinsic and extrinsic parameters of the camera (translation and rotation).
             </summary>
             That information about the camera will be returned by sl.Camera.GetCameraInformation().
             \note The calibration/rectification process, called during sl.Camera.Open(), is using the raw parameters defined in the SNXXX.conf file, where XXX is the serial number of the camera.
             \note Those values may be adjusted or not by the self-calibration to get a proper image alignment.
             \note After sl.Camera.Open() is done (with or without self-calibration activated), most of the stereo parameters (except baseline of course) should be 0 or very close to 0.
             \note It means that images after rectification process (given by sl.Camera.RetrieveImage()) are aligned as if they were taken by a "perfect" stereo camera, defined by the new sl.CalibrationParameters.
             \warning CalibrationParameters are returned in sl.COORDINATE_SYSTEM.IMAGE, they are not impacted by the sl.InitParameters.coordinateSystem.
             \note For more info, read about the ZED SDK C++ struct it mirrors: 
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1CalibrationParameters.html">CalibrationParameters</a>
        </member>
        <member name="F:sl.CalibrationParameters.leftCam">
            <summary>
            Intrinsic sl.CameraParameters of the left camera.
            </summary>
        </member>
        <member name="F:sl.CalibrationParameters.rightCam">
            <summary>
            Intrinsic sl.CameraParameters of the right camera.
            </summary>
        </member>
        <member name="F:sl.CalibrationParameters.Rot">
            <summary>
            Left to right camera rotation, expressed in user coordinate system and unit (defined by sl.InitParameters.coordinateSystem).
            </summary>
        </member>
        <member name="F:sl.CalibrationParameters.Trans">
            <summary>
            Left to right camera translation, expressed in user coordinate system and unit (defined by sl.InitParameters.coordinateSystem).
            </summary>
        </member>
        <member name="T:sl.SVOData">
            \ingroup Depth_group
             <summary>
             Structure containing data that can be stored in and retrieved from SVOs.
              That information will be ingested with sl.Camera.ingestDataIntoSVO and retrieved with sl.Camera.retrieveSVOData.
             </summary>
        </member>
        <member name="F:sl.SVOData.key">
            <summary>
            Key used to retrieve the data stored into SVOData's content.
            The key size must not exceed 128 characters.
            </summary>
        </member>
        <member name="F:sl.SVOData.timestamp">
            <summary>
            Timestamp of the data (in nanoseconds).
            </summary>
        </member>
        <member name="F:sl.SVOData.content">
            <summary>
            Content stored as SVOData
            Allow any type of content, including raw data like compressed images of json.
            </summary>
        </member>
        <member name="F:sl.SVOData.contentSize">
            <summary>
            Size of the content data.
            </summary>
        </member>
        <member name="T:sl.DEPTH_MODE">
            \ingroup Depth_group
             <summary>
             Lists available depth computation modes.
             </summary>
             \note For more info, read about the ZED SDK C++ enum it mirrors:
             <a href="https://www.stereolabs.com/docs/api/group__Depth__group.html#ga8d542017c9b012a19a15d46be9b7fa43">DEPTH_MODE</a>
        </member>
        <member name="F:sl.DEPTH_MODE.NONE">
            <summary>
            No depth map computation.
            \n Only rectified stereo images will be available.
            </summary>
        </member>
        <member name="F:sl.DEPTH_MODE.PERFORMANCE">
            <summary>
            Computation mode optimized for speed.
            </summary>
        </member>
        <member name="F:sl.DEPTH_MODE.QUALITY">
            <summary>
            Computation mode designed for challenging areas with untextured surfaces.
            </summary>
        </member>
        <member name="F:sl.DEPTH_MODE.ULTRA">
            <summary>
            Computation mode that favors edges and sharpness.\n Requires more GPU memory and computation power.
            </summary>
        </member>
        <member name="F:sl.DEPTH_MODE.NEURAL">
            <summary>
            End to End Neural disparity estimation.\n Requires AI module.
            </summary>
        </member>
        <member name="F:sl.DEPTH_MODE.NEURAL_PLUS">
            <summary>
            More accurate Neural disparity estimation.\n Requires AI module.
            </summary>
        </member>
        <member name="T:sl.MEASURE">
            \ingroup Depth_group
             <summary>
             Lists retrievable measures.
             \note For more info, read about the ZED SDK C++ enum it mirrors:
             <a href="https://www.stereolabs.com/docs/api/group__Depth__group.html#ga798a8eed10c573d759ef7e5a5bcd545d">MEASURE</a>
             </summary>
        </member>
        <member name="F:sl.MEASURE.DISPARITY">
            <summary>
            Disparity map. Each pixel contains 1 float.
            \n Type: sl.MAT_TYPE.MAT_32F_C1
            </summary>
        </member>
        <member name="F:sl.MEASURE.DEPTH">
            <summary>
            Depth map in sl.UNIT defined in sl.InitParameters.coordinateUnits. Each pixel contains 1 float.
            \n Type: sl.MAT_TYPE.MAT_32F_C1
            </summary>
        </member>
        <member name="F:sl.MEASURE.CONFIDENCE">
            <summary>
            Certainty/confidence of the depth map. Each pixel contains 1 float.
            \n Type: sl.MAT_TYPE.MAT_32F_C1
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZ">
            <summary>
            Point cloud. Each pixel contains 4 float (X, Y, Z, not used).
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZRGBA">
            <summary>
            Colored point cloud. Each pixel contains 4 float (X, Y, Z, color).
            \n The color should to be read as an unsigned char[4] representing the RGBA color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZBGRA">
            <summary>
            Colored point cloud. Each pixel contains 4 float (X, Y, Z, color).
            \n The color should to be read as an unsigned char[4] representing the BGRA color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZARGB">
            <summary>
            Colored point cloud. Each pixel contains 4 float (X, Y, Z, color).
            \n The color should to be read as an unsigned char[4] representing the ARGB color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZABGR">
            <summary>
            Colored point cloud. Each pixel contains 4 float (X, Y, Z, color).
            \n The color should to be read as an unsigned char[4] representing the ABGR color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.NORMALS">
            <summary>
            Normal vectors map. Each pixel contains 4 float (X, Y, Z, 0).
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.DISPARITY_RIGHT">
            <summary>
            Disparity map for right sensor. Each pixel contains 1 float.
            \n Type: sl.MAT_TYPE.MAT_32F_C1
            </summary>
        </member>
        <member name="F:sl.MEASURE.DEPTH_RIGHT">
            <summary>
            Depth map for right sensor. Each pixel contains 1 float.
            \n Type: sl.MAT_TYPE.MAT_32F_C1
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZ_RIGHT">
            <summary>
            Point cloud for right sensor. Each pixel contains 4 float (X, Y, Z, not used).
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZRGBA_RIGHT">
            <summary>
            Colored point cloud for right sensor. Each pixel contains 4 float (X, Y, Z, color).
            The color needs to be read as an unsigned char[4] representing the RGBA color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZBGRA_RIGHT">
            <summary>
            Colored point cloud for right sensor. Each pixel contains 4 float (X, Y, Z, color).
            The color needs to be read as an unsigned char[4] representing the BGRA color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZARGB_RIGHT">
            <summary>
            Colored point cloud for right sensor. Each pixel contains 4 float (X, Y, Z, color).
            The color needs to be read as an unsigned char[4] representing the ARGB color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.XYZABGR_RIGHT">
            <summary>
            Colored point cloud for right sensor. Each pixel contains 4 float (X, Y, Z, color).
            The color needs to be read as an unsigned char[4] representing the ABGR color.
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.NORMALS_RIGHT">
            <summary>
             Normal vectors map for right view. Each pixel contains 4 float (X, Y, Z, 0).
            \n Type: sl.MAT_TYPE.MAT_32F_C4
            </summary>
        </member>
        <member name="F:sl.MEASURE.DEPTH_U16_MM">
            <summary>
            Depth map in millimeter whatever the sl.UNIT defined in sl.InitParameters.coordinateUnits.
            \n Invalid values are set to 0 and depth values are clamped at 65000.
            \n Each pixel contains 1 unsigned short.
            \n Type: sl.MAT_TYPE.MAT_16U_C1.
            </summary>
        </member>
        <member name="F:sl.MEASURE.DEPTH_U16_MM_RIGHT">
            <summary>
            Depth map in millimeter for right sensor. Each pixel contains 1 unsigned short.
            \n Type: sl.MAT_TYPE.MAT_16U_C1.
            </summary>
        </member>
        <member name="T:sl.REGION_OF_INTEREST_AUTO_DETECTION_STATE">
            \ingroup Depth_group
             <summary>
             Lists the different states of region of interest auto detection.
             </summary>
        </member>
        <member name="F:sl.REGION_OF_INTEREST_AUTO_DETECTION_STATE.RUNNING">
            <summary>
            The region of interest auto detection is initializing.
            </summary>
        </member>
        <member name="F:sl.REGION_OF_INTEREST_AUTO_DETECTION_STATE.READY">
            <summary>
            The region of interest mask is ready, if auto_apply was enabled, the region of interest mask is being used.
            </summary>
        </member>
        <member name="F:sl.REGION_OF_INTEREST_AUTO_DETECTION_STATE.NOT_ENABLED">
            <summary>
             The region of interest auto detection is not enabled.
            </summary>
        </member>
        <member name="T:sl.InitParameters">
            \ingroup Video_group
             <summary>
             Class containing the options used to initialize the sl.Camera object.
            
             This class allows you to select multiple parameters for the sl.Camera such as the selected camera, resolution, depth mode, coordinate system, and units of measurement.
             \n Once filled with the desired options, it should be passed to the sl.Camera.Open() method.
             \note For more info, read about the ZED SDK C++ class it mirrors:
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1InitParameters.html">InitParameters</a>
             </summary>
        </member>
        <member name="F:sl.InitParameters.inputType">
             <summary>
             Defines the input source to initialize and open an sl.Camera object from.
            
             The SDK can handle different input types:
             - Select a camera by its ID (<i>/dev/videoX</i> on Linux, and 0 to N cameras connected on Windows)
             - Select a camera by its serial number
             - Open a recorded sequence in the SVO file format
             - Open a streaming camera from its IP address and port
            
             \note Available cameras and their id/serial number can be listed using sl.Camera.GetDeviceList() and sl.Camera.GetStreamingDeviceList().
             \note Each sl.Camera will create its own memory (CPU and GPU),
              therefore the number of cameras used at the same time can be limited by the configuration of your computer (GPU/CPU memory and capabilities).
            
             Default : (empty)
             \note See sl.InputType for complementary information.
             </summary>
        </member>
        <member name="F:sl.InitParameters.resolution">
             <summary>
             Desired camera resolution.
             \note Small resolutions offer higher framerate and lower computation time.
             \note In most situations, sl.RESOLUTION.HD720 at 60 FPS is the best balance between image quality and framerate.
            
             Default: <ul>
             <li>ZED X/X Mini: sl.RESOLUTION.HD1200</li>
             <li>other cameras: sl.RESOLUTION.HD720</li></ul>
             \note Available resolutions are listed here: sl.RESOLUTION.
             </summary>
        </member>
        <member name="F:sl.InitParameters.cameraFPS">
             <summary>
             Requested camera frame rate.
            
             If set to 0, the highest FPS of the specified \ref camera_resolution will be used.
             \n Default: 0
             \n\n See sl.RESOLUTION for a list of supported frame rates.
             \note If the requested \ref cameraFPS is unsupported, the closest available FPS will be used.
             </summary>
        </member>
        <member name="F:sl.InitParameters.cameraDeviceID">
            <summary>
            Id for identifying which camera to use from the connected cameras.
            </summary>
        </member>
        <member name="F:sl.InitParameters.pathSVO">
            <summary>
            Path to a recorded SVO file to play, including filename.
            </summary>
        </member>
        <member name="F:sl.InitParameters.svoRealTimeMode">
             <summary>
             Defines if sl.Camera object return the frame in real time mode.
            
             When playing back an SVO file, each call to sl.Camera.Grab() will extract a new frame and use it.
             \n However, it ignores the real capture rate of the images saved in the SVO file.
             \n Enabling this parameter will bring the SDK closer to a real simulation when playing back a file by using the images' timestamps.
             \n Default: false
             \note sl.Camera.Grab() will return an error when trying to play too fast, and frames will be dropped when playing too slowly.
             </summary>
        </member>
        <member name="F:sl.InitParameters.coordinateUnits">
             <summary>
             Unit of spatial data (depth, point cloud, tracking, mesh, etc.) for retrieval.
            
             Default: sl.UNIT.MILLIMETER
             </summary>
        </member>
        <member name="F:sl.InitParameters.coordinateSystem">
             <summary>
             sl.COORDINATE_SYSTEM to be used as reference for positional tracking, mesh, point clouds, etc.
            
             This parameter allows you to select the sl.COORDINATE_SYSTEM used by the sl.Camera object to return its measures.
             \n This defines the order and the direction of the axis of the coordinate system.
             \n Default: sl.COORDINATE_SYSTEM.IMAGE
             </summary>
        </member>
        <member name="F:sl.InitParameters.depthMode">
             <summary>
             sl.DEPTH_MODE to be used.
            
             The ZED SDK offers several sl.DEPTH_MODE, offering various levels of performance and accuracy.
             \n This parameter allows you to set the sl.DEPTH_MODE that best matches your needs.
             \n Default: \ref DEPTH_MODE "sl.DEPTH_MODE.PERFORMANCE"
             \note Available depth mode are listed here: sl.DEPTH_MODE.
             </summary>
        </member>
        <member name="F:sl.InitParameters.depthMinimumDistance">
             <summary>
             Minimum depth distance to be returned, measured in the sl.UNIT defined in \ref coordinateUnits.
            
             This parameter allows you to specify the minimum depth value (from the camera) that will be computed.
            
             \n In stereovision (the depth technology used by the camera), looking for closer depth values can have a slight impact on performance and memory consumption.
             \n On most of modern GPUs, performance impact will be low. However, the impact of memory footprint will be visible.
             \n In cases of limited computation power, increasing this value can provide better performance.
             \n Default: -1 (corresponding values are available <a href="https://www.stereolabs.com/docs/depth-sensing/depth-settings#depth-range">here</a>)
             \note \ref depthMinimumDistance value cannot be greater than 3 meters.
             \note 0 will imply that \ref depthMinimumDistance is set to the minimum depth possible for each camera
             (those values are available <a href="https://www.stereolabs.com/docs/depth-sensing/depth-settings#depth-range">here</a>).
             </summary>
        </member>
        <member name="F:sl.InitParameters.depthMaximumDistance">
             <summary>
             Maximum depth distance to be returned, measured in the sl.UNIT defined in \ref coordinateUnits.
            
             When estimating the depth, the ZED SDK uses this upper limit to turn higher values into <b>inf</b> ones.
             \note Changing this value has no impact on performance and doesn't affect the positional tracking nor the spatial mapping.
             \note It only change values the depth, point cloud and normals.
             </summary>
        </member>
        <member name="F:sl.InitParameters.cameraImageFlip">
             <summary>
             Defines if a flip of the images is needed.
            
             If you are using the camera upside down, setting this parameter to sl.FLIP_MODE.ON will cancel its rotation.
             \n The images will be horizontally flipped.
             \n Default: sl.FLIP_MODE.AUTO
             \note From ZED SDK 3.2 a new sl.FLIP_MODE enum was introduced to add the automatic flip mode detection based on the IMU gravity detection.
             \note This does not work on sl.MODEL.ZED cameras since they do not have the necessary sensors.
             </summary>
        </member>
        <member name="F:sl.InitParameters.enableRightSideMeasure">
             <summary>
             Enable the measurement computation on the right images.
            
             By default, the ZED SDK only computes a single depth map, aligned with the left camera image.
             \n This parameter allows you to enable sl.MEASURE.DEPTH_RIGHT and other \ref MEASURE "sl.MEASURE.XXX_RIGHT" at the cost of additional computation time.
             \n For example, mixed reality pass-through applications require one depth map per eye, so this parameter can be activated.
             \n Default: False
             </summary>
        </member>
        <member name="F:sl.InitParameters.cameraDisableSelfCalib">
             <summary>
             Disables the self-calibration process at camera opening.
            
             At initialization, sl.Camera runs a self-calibration process that corrects small offsets from the device's factory calibration.
             \n A drawback is that calibration parameters will slightly change from one (live) run to another, which can be an issue for repeatability.
             \n If set to true, self-calibration will be disabled and calibration parameters won't be optimized, raw calibration parameters from the configuration file will be used.
             \n Default: false
             \note In most situations, self calibration should remain enabled.
             \note You can also trigger the self-calibration at anytime after sl.Camera.Open() by calling sl.Camera.UpdateSelfCalibration(), even if this parameter is set to true.
             </summary>
        </member>
        <member name="F:sl.InitParameters.sdkVerbose">
             <summary>
             Enable the ZED SDK verbose mode.
            
             This parameter allows you to enable the verbosity of the ZED SDK to get a variety of runtime information in the console.
             \n When developing an application, enabling verbose (<code>\ref sdkVerbose >= 1</code>) mode can help you understand the current ZED SDK behavior.
             \n However, this might not be desirable in a shipped version.
             \n Default: 0 (no verbose message)
             \note The verbose messages can also be exported into a log file.
             \note See \ref sdkVerboseLogFile for more.
             </summary>
        </member>
        <member name="F:sl.InitParameters.sdkGPUId">
             <summary>
             NVIDIA graphics card id to use.
            
             By default the SDK will use the most powerful NVIDIA graphics card found.
             \n However, when running several applications, or using several cameras at the same time, splitting the load over available GPUs can be useful.
             \n This parameter allows you to select the GPU used by the sl.Camera using an ID from 0 to n-1 GPUs in your PC.
             \n Default: -1
             \note A non-positive value will search for all CUDA capable devices and select the most powerful.
             </summary>
        </member>
        <member name="F:sl.InitParameters.sdkVerboseLogFile">
             <summary>
             File path to store the ZED SDK logs (if \ref sdkVerbose is enabled).
            
             The file will be created if it does not exist.
             \n Default: ""
            
             \note Setting this parameter to any value will redirect all standard output print calls of the entire program.
             \note This means that your own standard output print calls will be redirected to the log file.
             \note This parameter can be particularly useful for creating a log system, and with Unreal or Unity applications that don't provide a standard console output.
             \warning The log file won't be cleared after successive executions of the application.
             \warning This means that it can grow indefinitely if not cleared. 
             </summary>
        </member>
        <member name="F:sl.InitParameters.depthStabilization">
             <summary>
             Defines whether the depth needs to be stabilized and to what extent.
            
             Regions of generated depth map can oscillate from one frame to another.
             \n These oscillations result from a lack of texture (too homogeneous) on an object and by image noise.
             \n This parameter controls a stabilization filter that reduces these oscillations.
             \n In the range [0-100]: <ul>
             <li>0 disable the depth stabilization (raw depth will be return)</li>
             <li>stabilization smoothness is linear from 1 to 100</li></ul>
             Default: 1
             \note The stabilization uses the positional tracking to increase its accuracy, 
             so the positional tracking module will be enabled automatically when set to a value different from 0.
             \note Note that calling sl.Camera.EnablePositionalTracking() with your own parameters afterwards is still possible.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.InitParameters.optionalSettingsPath" -->
        <member name="F:sl.InitParameters.sensorsRequired">
             <summary>
             Requires the successful opening of the motion sensors before opening the camera.
            
             Default: false.
            
             \note If set to false, the ZED SDK will try to <b>open and use</b> the IMU (second USB device on USB2.0) and will open the camera successfully even if the sensors failed to open.
            
             This can be used for example when using a USB3.0 only extension cable (some fiber extension for example).
             \note This parameter only impacts the LIVE mode.
             \note If set to true, sl.Camera.Open() will fail if the sensors cannot be opened.
             \note This parameter should be used when the IMU data must be available, such as object detection module or when the gravity is needed.
             
             \n\note This setting is not taken into account for \ref sl.MODEL.ZED camera since it does not include sensors.
             </summary>
        </member>
        <member name="F:sl.InitParameters.ipStream">
            <summary>
            IP address of the streaming sender to connect to.
            </summary>
        </member>
        <member name="F:sl.InitParameters.portStream">
            <summary>
            Port of the streaming sender to connect to.
            </summary>
        </member>
        <member name="F:sl.InitParameters.enableImageEnhancement">
             <summary>
             Enable the Enhanced Contrast Technology, to improve image quality.
            
             Default: True.
             
             \n If set to true, image enhancement will be activated in camera ISP. Otherwise, the image will not be enhanced by the IPS.
             \note This only works for firmware version starting from 1523 and up.
             </summary>
        </member>
        <member name="F:sl.InitParameters.optionalOpencvCalibrationFile">
             <summary>
             Optional path where the ZED SDK can find a file containing the calibration information of the camera computed by OpenCV.
            
             \note Using this will disable the factory calibration of the camera.
             \note The file must be in a XML/YAML/JSON formatting provided by OpenCV.
             \note It also must contain the following keys: Size, K_LEFT (intrinsic left), K_RIGHT (intrinsic right),
             D_LEFT (distortion left), D_RIGHT (distortion right), R (extrinsic rotation), T (extrinsic translation).
             \warning Erroneous calibration values can lead to poor accuracy in all ZED SDK modules.
             </summary>
        </member>
        <member name="F:sl.InitParameters.openTimeoutSec">
             <summary>
             Define a timeout in seconds after which an error is reported if the sl.Camera.Open() method fails.
            
             Set to '-1' to try to open the camera endlessly without returning error in case of failure.
             \n Set to '0' to return error in case of failure at the first attempt.
             \n Default: 5.0
             \note This parameter only impacts the LIVE mode.
             </summary>
        </member>
        <member name="F:sl.InitParameters.asyncGrabCameraRecovery">
             <summary>
             Define the behavior of the automatic camera recovery during sl.Camera.Grab() method call.
            
             When async is enabled and there's an issue with the communication with the sl.Camera object,
             sl.Camera.Grab() will exit after a short period and return the \ref ERROR_CODE "sl.ERROR_CODE.CAMERA_REBOOTING" warning.
             \n The recovery will run in the background until the correct communication is restored.
             \n When \ref asyncGrabCameraRecovery is false, the sl.Camera.Grab() method is blocking and will return
             only once the camera communication is restored or the timeout is reached. 
             \n Default: false
             </summary>
        </member>
        <member name="F:sl.InitParameters.grabComputeCappingFPS">
             <summary>
             Define a computation upper limit to the grab frequency.
            
             This can be useful to get a known constant fixed rate or limit the computation load while keeping a short exposure time by setting a high camera capture framerate.
             \n The value should be inferior to the sl.InitParameters.camera_fps and strictly positive.
             \note  It has no effect when reading an SVO file.
            
             This is an upper limit and won't make a difference if the computation is slower than the desired compute capping FPS.
             \note Internally the sl.Camera.grab() method always tries to get the latest available image while respecting the desired FPS as much as possible.
             </summary>
        </member>
        <member name="F:sl.InitParameters.enableImageValidityCheck">
            <summary>
            Enable or disable the image validity verification.
            This will perform additional verification on the image to identify corrupted data.This verification is done in the grab function and requires some computations.
            If an issue is found, the grab function will output a warning as sl.ERROR_CODE.CORRUPTED_FRAME.
            This version doesn't detect frame tearing currently.
             \n default: disabled
            </summary>
        </member>
        <member name="M:sl.InitParameters.#ctor">
             <summary>
             Default constructor.
            
             All the parameters are set to their default and optimized values.
             </summary>
        </member>
        <member name="T:sl.INPUT_TYPE">
            \ingroup  Video_group
             <summary>
             Lists available input types in the ZED SDK.
             </summary>
        </member>
        <member name="F:sl.INPUT_TYPE.USB">
            <summary>
            USB input mode
            </summary>
        </member>
        <member name="F:sl.INPUT_TYPE.SVO">
            <summary>
            SVO file input mode
            </summary>
        </member>
        <member name="F:sl.INPUT_TYPE.STREAM">
            <summary>
            STREAM input mode (requires to use \ref Camera.EnableStreaming "EnableStreaming()" /
            \ref Camera.DisableStreaming "DisableStreaming()" on the "sender" side)
            </summary>
        </member>
        <member name="F:sl.INPUT_TYPE.GMSL">
            <summary>
            GMSL input mode
            </summary>
        </member>
        <member name="T:sl.BUS_TYPE">
            \ingroup Video_group
             <summary>
             Lists available LIVE input type in the ZED SDK.
             </summary>
        </member>
        <member name="F:sl.BUS_TYPE.USB">
            <summary>
            USB input mode
            </summary>
        </member>
        <member name="F:sl.BUS_TYPE.GMSL">
            <summary>
            GMSL input mode
            \note Only on NVIDIA Jetson.
            </summary>
        </member>
        <member name="F:sl.BUS_TYPE.AUTO">
            <summary>
            Automatically select the input type.\n Trying first for available USB cameras, then GMSL.
            </summary>
        </member>
        <member name="F:sl.BUS_TYPE.LAST">
            @cond SHOWHIDDEN 
        </member>
        <member name="T:sl.CAMERA_STATE">
            \ingroup  Video_group
             <summary>
             Lists possible camera states.
             </summary>
        </member>
        <member name="F:sl.CAMERA_STATE.AVAILABLE">
            <summary>
            The camera can be opened by the ZED SDK.
            </summary>
        </member>
        <member name="F:sl.CAMERA_STATE.NOT_AVAILABLE">
            <summary>
            The camera is already opened and unavailable.
            </summary>
        </member>
        <member name="T:sl.RecordingParameters">
            \ingroup  Video_group
             <summary>
             Structure containing the options used to record.
             \note For more info, read about the ZED SDK C++ class it mirrors:
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1RecordingParameters.html">RecordingParameters</a>
             </summary>
        </member>
        <member name="F:sl.RecordingParameters.videoFilename">
            <summary>
            Filename of the file to save the recording into.
            </summary>
        </member>
        <member name="F:sl.RecordingParameters.compressionMode">
             <summary>
             Compression mode the recording.
            
             Default: sl.SVO_COMPRESSION_MODE.H264_BASED
             </summary>
        </member>
        <member name="F:sl.RecordingParameters.targetFPS">
             <summary>
             Framerate for the recording file.
            
             Default: 0 (camera framerate will be taken)
             \warning This framerate must be below or equal to the camera framerate and camera framerate must be a multiple of the target framerate.
             \warning It means that it must respect <code> cameraFPS%targetFPS == 0</code>.
             \warning Allowed framerates are 15,30, 60 or 100 if possible.
             \warning Any other values will be discarded and camera FPS will be taken.
             </summary>
        </member>
        <member name="F:sl.RecordingParameters.bitrate">
             <summary>
             Overrides the default bitrate of the SVO file, in kbits/s.
            
             Default: 0 (the default values associated with the resolution)
             \note Only works if \ref compressionMode is sl.SVO_COMPRESSION_MODE.H264_BASED or sl.SVO_COMPRESSION_MODE.H265_BASED.
             \note Available range: 0 or [1000 - 60000]
             </summary>
        </member>
        <member name="F:sl.RecordingParameters.transcode">
             <summary>
             Defines whether to decode and re-encode a streaming source.
            
             Default: false
             \note If set to false, it will avoid decoding/re-encoding and convert directly streaming input into a SVO file.
             \note This saves a encoding session and can be especially useful on NVIDIA Geforce cards where the number of encoding session is limited.
             \note \ref compressionMode, \ref targetFPS and \ref bitrate will be ignored in this mode.
             </summary>
        </member>
        <member name="M:sl.RecordingParameters.#ctor(System.String,sl.SVO_COMPRESSION_MODE,System.UInt32,System.Int32,System.Boolean)">
             <summary>
             Default constructor.
            
             All the parameters are set to their default values.
             </summary>
        </member>
        <member name="T:sl.StreamingParameters">
            \ingroup  Video_group
             <summary>
             Structure containing the options used to stream with the ZED SDK.
             \note For more info, read about the ZED SDK C++ class it mirrors:
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1StreamingParameters.html">StreamingParameters</a>
             </summary>
        </member>
        <member name="F:sl.StreamingParameters.codec">
            <summary>
            Encoding used for streaming.
            </summary>
        </member>
        <member name="F:sl.StreamingParameters.port">
            <summary>
            Port used for streaming.
            \warning Port must be an even number. Any odd number will be rejected.
            \warning Port must be opened.
            </summary>
        </member>
        <member name="F:sl.StreamingParameters.bitrate">
            <summary>
            Defines the streaming bitrate in Kbits/s.
            | sl.STREAMING_CODEC  | sl.RESOLUTION   | FPS   | Bitrate (kbps) |
            |------------------|--------------|-------|----------------|
            | H264             |  HD2K        |   15  |     8500       |
            | H264             |  HD1080      |   30  |    12500       |
            | H264             |  HD720       |   60  |     7000       |
            | H265             |  HD2K        |   15  |     7000       |
            | H265             |  HD1080      |   30  |    11000       |
            | H265             |  HD720       |   60  |     6000       |
            Default: 0 (it will be set to the best value depending on your resolution/FPS)
            \note Available range: [1000 - 60000]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.StreamingParameters.gopSize" -->
        <member name="F:sl.StreamingParameters.adaptativeBitrate">
             <summary>
             Defines whether the adaptive bitrate is enable.
            
             Default: false
             \note Bitrate will be adjusted depending the number of packet dropped during streaming.
             \note If activated, the bitrate can vary between [bitrate/4, bitrate].
             \warning Currently, the adaptive bitrate only works when "sending" device is a NVIDIA Jetson (X1, X2, Xavier, Nano).
             </summary>
        </member>
        <member name="F:sl.StreamingParameters.chunkSize">
             <summary>
             Size of a single chunk.
            
             Default: 16084
             \note Stream buffers are divided into X number of chunks where each chunk is  \ref chunkSize bytes long.
             \note You can lower \ref chunkSize value if network generates a lot of packet lost: this will
             generates more chunk for a single image, but each chunk sent will be lighter to avoid inside-chunk corruption.
             \note Increasing this value can decrease latency.
            
             \n \note Available range: [1024 - 65000]
             </summary>
        </member>
        <member name="F:sl.StreamingParameters.targetFPS">
             <summary>
             Framerate for the streaming output.
            
             Default: 0 (camera framerate will be taken)
             \warning This framerate must be below or equal to the camera framerate.
             \warning Allowed framerates are 15, 30, 60 or 100 if possible.
             \warning Any other values will be discarded and camera FPS will be taken.
             </summary>
        </member>
        <member name="M:sl.StreamingParameters.#ctor(sl.STREAMING_CODEC,System.UInt16,System.UInt32,System.Int32,System.Boolean,System.UInt16,System.Int32)">
             <summary>
             Default constructor.
            
             All the parameters are set to their default values.
             </summary>
        </member>
        <member name="T:sl.DeviceProperties">
            \ingroup  Video_group
             <summary>
             Structure containing information about the properties of a camera.
             </summary>
             \note A \ref cameraModel sl.MODEL.ZED_M with an id '-1' can be due to an inverted USB-C cable.
        </member>
        <member name="F:sl.DeviceProperties.cameraState">
             <summary>
             State of the camera.
            
             Default: Default: sl.CAMERA_STATE.NOT_AVAILABLE
             </summary>
        </member>
        <member name="F:sl.DeviceProperties.id">
            <summary>
            Id of the camera.
            
            Default: -1
            </summary>
        </member>
        <member name="F:sl.DeviceProperties.path">
            <summary>
            System path of the camera.
            </summary>
        </member>
        <member name="F:sl.DeviceProperties.cameraModel">
            <summary>
            Model of the camera.
            </summary>
        </member>
        <member name="F:sl.DeviceProperties.sn">
             <summary>
             Serial number of the camera.
            
             Default: 0
             \warning Not provided for Windows.
             </summary>
        </member>
        <member name="F:sl.DeviceProperties.inputType">
            <summary>
            Input type of the camera.
            </summary>
        </member>
        <member name="T:sl.StreamingProperties">
            \ingroup  Video_group
             <summary>
             Structure containing information about the properties of a streaming device. 
             </summary>
        </member>
        <member name="F:sl.StreamingProperties.ip">
            <summary>
            IP address of the streaming device.
            </summary>
        </member>
        <member name="F:sl.StreamingProperties.port">
             <summary>
             Streaming port of the streaming device.
            
             Default: 0
             </summary>
        </member>
        <member name="F:sl.StreamingProperties.currentBitrate">
             <summary>
             Current bitrate of encoding of the streaming device.
            
             Default: 0
             </summary>
        </member>
        <member name="F:sl.StreamingProperties.codec">
             <summary>
             Current codec used for compression in streaming device.
            
             Default: sl.STREAMING_CODEC.H265_BASED
             </summary>
        </member>
        <member name="T:sl.RecordingStatus">
            \ingroup  Video_group
             <summary>
             Structure containing information about the status of the recording.
             \note For more info, read about the ZED SDK C++ struct it mirrors:
             <a href="https://www.stereolabs.com/docs/api/structsl_1_1RecordingStatus.html">RecordingStatus</a>
             </summary>
        </member>
        <member name="F:sl.RecordingStatus.is_recording">
            <summary>
            Report if the recording has been enabled.
            </summary>
        </member>
        <member name="F:sl.RecordingStatus.is_paused">
            <summary>
            Report if the recording has been paused.
            </summary>
        </member>
        <member name="F:sl.RecordingStatus.status">
             <summary>
             Status of current frame.
            
             True for success or false if the frame could not be written in the SVO file.
             </summary>
        </member>
        <member name="F:sl.RecordingStatus.current_compression_time">
            <summary>
            Compression time for the current frame in milliseconds.
            </summary>
        </member>
        <member name="F:sl.RecordingStatus.current_compression_ratio">
            <summary>
            Compression ratio (% of raw size) for the current frame.
            </summary>
        </member>
        <member name="F:sl.RecordingStatus.average_compression_time">
            <summary>
            Average compression time in milliseconds since beginning of recording.
            </summary>
        </member>
        <member name="F:sl.RecordingStatus.average_compression_ratio">
            <summary>
            Average compression ratio (% of raw size) since beginning of recording.
            </summary>
        </member>
        <member name="T:sl.RESOLUTION">
            \ingroup  Video_group
             <summary>
             Lists available resolutions.
             \note The VGA resolution does not respect the 640*480 standard to better fit the camera sensor (672*376 is used).
             \warning All resolutions are not available for every camera.
             \warning You can find the available resolutions for each camera in <a href="https://www.stereolabs.com/docs/video/camera-controls#selecting-a-resolution">our documentation</a>.
             </summary>
        </member>
        <member name="F:sl.RESOLUTION.HD4K">
            <summary>
            3856x2180 for imx678 mono
            \n Available FPS: 15
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.HD2K">
            <summary>
            2208*1242 (x2)
            \n Available FPS: 15
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.HD1080">
            <summary>
            1920*1080 (x2)
            \n Available FPS: 15, 30
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.HD1200">
            <summary>
            1920*1200 (x2)
            \n Available FPS: 15, 30, 60
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.HD720">
            <summary>
            1280*720 (x2)
            \n Available FPS: 15, 30, 60
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.HDSVGA">
            <summary>
            960*600 (x2)
            \n Available FPS: 15, 30, 60, 120
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.VGA">
            <summary>
            672*376 (x2)
            \n Available FPS: 15, 30, 60, 100
            </summary>
        </member>
        <member name="F:sl.RESOLUTION.AUTO">
            <summary>
            Select the resolution compatible with the camera:
            - ZED X/X Mini: HD1200
            - other cameras: HD720
            </summary>
        </member>
        <member name="T:sl.FLIP_MODE">
            \ingroup  Video_group
             <summary>
             Lists possible flip modes of the camera.
             </summary>
        </member>
        <member name="F:sl.FLIP_MODE.OFF">
            <summary>
            No flip applied. Default behavior.
            </summary>
        </member>
        <member name="F:sl.FLIP_MODE.ON">
            <summary>
            Images and camera sensors' data are flipped useful when your camera is mounted upside down.
            </summary>
        </member>
        <member name="F:sl.FLIP_MODE.AUTO">
            <summary>
            In LIVE mode, use the camera orientation (if an IMU is available) to set the flip mode.
            \n In SVO mode, read the state of this enum when recorded.
            </summary>
        </member>
        <member name="T:sl.MODEL">
            \ingroup  Video_group
             <summary>
             Lists ZED camera model. <a href="https://www.stereolabs.com/docs/api/c/types__c_8h.html#aa71ca736d522c5f280cf90450665e749">SL_MODEL</a> in C wrapper.
             </summary>
        </member>
        <member name="F:sl.MODEL.ZED">
            <summary>
            ZED camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED_M">
            <summary>
            ZED Mini (ZED M) camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED2">
            <summary>
            ZED 2 camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED2i">
            <summary>
            ZED 2i camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED_X">
            <summary>
            ZED X camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED_XM">
            <summary>
            ZED X Mini (ZED XM) camera model
            </summary>
        </member>
        <member name="F:sl.MODEL.VIRTUAL_ZED_X">
            <summary>
            Virtual ZED-X generated from 2 ZED-XOne
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED_XONE_GS">
            <summary>
            ZED XOne with global shutter AR0234 sensor 
            </summary>
        </member>
        <member name="F:sl.MODEL.ZED_XONE_UHD">
            <summary>
            ZED XOne with 4K rolling shutter IMX678 sensor
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:sl.VIEW" -->
        <member name="F:sl.VIEW.LEFT">
             <summary>
             Left BGRA image. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             </summary>
        </member>
        <member name="F:sl.VIEW.RIGHT">
             <summary>
              Right BGRA image. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             </summary>
        </member>
        <member name="F:sl.VIEW.LEFT_GREY">
             <summary>
             Left gray image. Each pixel contains 1 unsigned char.
            \n Type: sl.MAT_TYPE.MAT_8U_C1.
             </summary>
        </member>
        <member name="F:sl.VIEW.RIGHT_GREY">
             <summary>
             Right gray image. Each pixel contains 1 unsigned char.
            \n Type: sl.MAT_TYPE.MAT_8U_C1.
             </summary>
        </member>
        <member name="F:sl.VIEW.LEFT_UNRECTIFIED">
             <summary>
             Left BGRA unrectified image. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             </summary>
        </member>
        <member name="F:sl.VIEW.RIGHT_UNRECTIFIED">
             <summary>
             Right BGRA unrectified image. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             </summary>
        </member>
        <member name="F:sl.VIEW.LEFT_UNRECTIFIED_GREY">
             <summary>
             Left gray unrectified image. Each pixel contains 1 unsigned char.
            \n Type: sl.MAT_TYPE.MAT_8U_C1.
             </summary>
        </member>
        <member name="F:sl.VIEW.RIGHT_UNRECTIFIED_GREY">
             <summary>
             Right gray unrectified image. Each pixel contains 1 unsigned char.
            \n Type: sl.MAT_TYPE.MAT_8U_C1.
             </summary>
        </member>
        <member name="F:sl.VIEW.SIDE_BY_SIDE">
             <summary>
             Left and right image (the image width is therefore doubled). Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             </summary>
        </member>
        <member name="F:sl.VIEW.DEPTH">
             <summary>
             Color rendering of the depth. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             \note Use \ref MEASURE "sl.MEASURE.DEPTH" with sl.Camera.RetrieveMeasure() to get depth values.
             </summary>
        </member>
        <member name="F:sl.VIEW.CONFIDENCE">
             <summary>
             Color rendering of the depth confidence. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             \note Use \ref MEASURE "sl.MEASURE.CONFIDENCE" with sl.Camera.RetrieveMeasure() to get confidence values.
             </summary>
        </member>
        <member name="F:sl.VIEW.NORMALS">
             <summary>
             Color rendering of the normals. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             \note Use \ref MEASURE "sl.MEASURE.NORMALS" with sl.Camera.RetrieveMeasure() to get normal values.
             </summary>
        </member>
        <member name="F:sl.VIEW.DEPTH_RIGHT">
             <summary>
             Color rendering of the right depth mapped on right sensor. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             \note Use \ref MEASURE "sl.MEASURE.DEPTH_RIGHT" with sl.Camera.RetrieveMeasure() to get depth right values.
             </summary>
        </member>
        <member name="F:sl.VIEW.NORMALS_RIGHT">
             <summary>
             Color rendering of the normals mapped on right sensor. Each pixel contains 4 unsigned char (B, G, R, A).
            \n Type: sl.MAT_TYPE.MAT_8U_C4.
             \note Use \ref MEASURE "sl.MEASURE.NORMALS_RIGHT" with sl.Camera.RetrieveMeasure() to get normal right values.
             </summary>
        </member>
        <member name="T:sl.VIDEO_SETTINGS">
            \ingroup  Video_group
             <summary>
             Lists available camera settings for the camera (contrast, hue, saturation, gain, ...).
             \warning GAIN and EXPOSURE are linked in auto/default mode (see \ref sl.Camera.SetCameraSettings()).
             </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.BRIGHTNESS">
            <summary>
            Brightness control.
            \n Affected value should be between 0 and 8.
            \note Not available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.CONTRAST">
            <summary>
            Contrast control
            \n Affected value should be between 0 and 8.
            \note Not available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.HUE">
            <summary>
            Hue control
            \n Affected value should be between 0 and 11.
            \note Not available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.SATURATION">
            <summary>
            Saturation control
            \n Affected value should be between 0 and 8.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.SHARPNESS">
            <summary>
            Digital sharpening control
            \n Affected value should be between 0 and 8.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.GAMMA">
            <summary>
            ISP gamma control
            \n Affected value should be between 1 and 9.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.GAIN">
            <summary>
            Gain control
            \n Affected value should be between 0 and 100 for manual control.
            \note If EXPOSURE is set to -1 (automatic mode), then \ref VIDEO_SETTINGS.GAIN "GAIN" will be automatic as well.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.EXPOSURE">
            <summary>
            Exposure control
            \n Affected value should be between 0 and 100 for manual control.
            \n The exposition is mapped linearly in a percentage of the following max values.
            \n Special case for <code>EXPOSURE = 0</code> that corresponds to 0.17072ms.
            \n The conversion to milliseconds depends on the framerate: <ul>
            <li>15fps <code>EXPOSURE = 100</code> -> 19.97ms</li>
            <li>30fps <code>EXPOSURE = 100</code> -> 19.97ms</li>
            <li>60fps <code>EXPOSURE = 100</code> -> 10.84072ms</li>
            <li>100fps <code>EXPOSURE = 100</code> -> 10.106624ms</li></ul>
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.AEC_AGC">
            <summary>
            Defines if the \ref VIDEO_SETTINGS.GAIN "GAIN" and \ref VIDEO_SETTINGS.EXPOSURE "EXPOSURE" are in automatic mode or not.
            \n Setting \ref VIDEO_SETTINGS.GAIN "GAIN" or \ref VIDEO_SETTINGS.EXPOSURE "EXPOSURE" values will automatically set this value to 0.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.AEC_AGC_ROI">
            <summary>
            Defines the region of interest for automatic exposure/gain computation.
            \n To be used with overloaded \ref Camera.SetCameraSettings(VIDEO_SETTINGS,SIDE,Rect,bool) "SetCameraSettings()"
            / \ref Camera.GetCameraSettings(VIDEO_SETTINGS,SIDE,ref Rect) "GetCameraSettings()" methods.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.WHITEBALANCE_TEMPERATURE">
            <summary>
            Color temperature control
            \n Affected value should be between 2800 and 6500 with a step of 100.
            \note Setting a value will automatically set \ref sl.VIDEO_SETTINGS.WHITEBALANCE_AUTO "WHITEBALANCE_AUTO" to 0.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.WHITEBALANCE_AUTO">
            <summary>
            Defines if the white balance is in automatic mode or not.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.LED_STATUS">
            <summary>
            Status of the front LED of the camera.
            \n Set to 0 to disable the light, 1 to enable the light.
            \n Default value is on.
            \note Requires camera firmware 1523 at least.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.EXPOSURE_TIME">
            <summary>
            Real exposure time control in microseconds.
            \note Only available for ZED X/X Mini cameras.
            \note Replace \ref VIDEO_SETTINGS.EXPOSURE "EXPOSURE" setting.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.ANALOG_GAIN">
            <summary>
            Real analog gain (sensor) control in mDB.
            \n The range is defined by Jetson DTS and by default [1000-16000].
            \note Only available for ZED X/X Mini cameras.
            \note Replace \ref VIDEO_SETTINGS.GAIN "GAIN" settings.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.DIGITAL_GAIN">
            <summary>
            Real digital gain (ISP) as a factor.
            \n The range is defined by Jetson DTS and by default [1-256].
            \note Only available for ZED X/X Mini cameras.
            \note Replace \ref VIDEO_SETTINGS.GAIN "GAIN" settings.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.VIDEO_SETTINGS.AUTO_EXPOSURE_TIME_RANGE" -->
        <member name="F:sl.VIDEO_SETTINGS.AUTO_ANALOG_GAIN_RANGE">
            <summary>
            Range of sensor gain in automatic control.
            \n Used with \ref Camera.SetCameraSettings(VIDEO_SETTINGS,int,int) "SetCameraSettings()".
            \n Min/max range between max range defined in DTS.
            \n By default: [1000 - 16000] mdB.
            \note Only available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.AUTO_DIGITAL_GAIN_RANGE">
            <summary>
            Range of digital ISP gain in automatic control.
            \n Used with \ref Camera.SetCameraSettings(VIDEO_SETTINGS,int,int) "SetCameraSettings()".
            \n Min/max range between max range defined in DTS.
            \n By default: [1 - 256].
            \note Only available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.EXPOSURE_COMPENSATION">
            <summary>
            Exposure-target compensation made after auto exposure.
            \n Reduces the overall illumination target by factor of F-stops.
            \n Affected value should be between 0 and 100 (mapped between [-2.0,2.0]).
            \n Default value is 50, i.e. no compensation applied.
            \note Only available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.DENOISING">
            <summary>
            Level of denoising applied on both left and right images.
            \n Affected value should be between 0 and 100.
            \n Default value is 50.
            \note Only available for ZED X/X Mini cameras.
            </summary>
        </member>
        <member name="F:sl.VIDEO_SETTINGS.LAST">
            @cond SHOWHIDDEN 
        </member>
        <member name="T:sl.TIME_REFERENCE">
            \ingroup  Video_group
             <summary>
             Lists possible time references for timestamps or data.
             </summary>
        </member>
        <member name="F:sl.TIME_REFERENCE.IMAGE">
            <summary>
            The requested timestamp or data will be at the time of the frame extraction.
            </summary>
        </member>
        <member name="F:sl.TIME_REFERENCE.CURRENT">
            <summary>
            The requested timestamp or data will be at the time of the function call.
            </summary>
        </member>
        <member name="T:sl.SVO_COMPRESSION_MODE">
            \ingroup  Video_group
             <summary>
             Lists available compression modes for SVO recording.
             \note \ref sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED "LOSSLESS_BASED" is an improvement of previous lossless compression (used in ZED Explorer),
             even if size may be bigger, compression time is much faster.
             </summary>
        </member>
        <member name="F:sl.SVO_COMPRESSION_MODE.LOSSLESS_BASED">
            <summary>
            PNG/ZSTD (lossless) CPU based compression.
            \n Average size: 42% of RAW
            </summary>
        </member>
        <member name="F:sl.SVO_COMPRESSION_MODE.H264_BASED">
            <summary>
            H264 (AVCHD) GPU based compression.
            \n Average size: 1% of RAW
            \note Requires a NVIDIA GPU.
            </summary>
        </member>
        <member name="F:sl.SVO_COMPRESSION_MODE.H265_BASED">
            <summary>
            H265 (HEVC) GPU based compression.
            \n Average size: 1% of RAW
            \note Requires a NVIDIA GPU.
            </summary>
        </member>
        <member name="F:sl.SVO_COMPRESSION_MODE.H264_LOSSLESS_BASED">
            <summary>
            H264 Lossless GPU/Hardware based compression.
            \n Average size: 25% of RAW
            \n Provides a SSIM/PSNR result (vs RAW) >= 99.9%.
            \note Requires a NVIDIA GPU.
            </summary>
        </member>
        <member name="F:sl.SVO_COMPRESSION_MODE.H265_LOSSLESS_BASED">
            <summary>
            H265 Lossless GPU/Hardware based compression.
            \n Average size: 25% of RAW
            \n Provides a SSIM/PSNR result (vs RAW) >= 99.9%.
            \note Requires a NVIDIA GPU.
            </summary>
        </member>
        <member name="T:sl.STREAMING_CODEC">
            \ingroup  Video_group
             <summary>
             Lists the different encoding types for image streaming.
             </summary>
        </member>
        <member name="F:sl.STREAMING_CODEC.H264_BASED">
            <summary>
            AVCHD/H264 encoding
            </summary>
        </member>
        <member name="F:sl.STREAMING_CODEC.H265_BASED">
            <summary>
            HEVC/H265 encoding
            </summary>
        </member>
        <member name="T:sl.SIDE">
            <summary>
            Lists possible sides on which to get data from.
            </summary>
        </member>
        <member name="F:sl.SIDE.LEFT">
            <summary>
            Left side only.
            </summary>
        </member>
        <member name="F:sl.SIDE.RIGHT">
            <summary>
            Right side only.
            </summary>
        </member>
        <member name="F:sl.SIDE.BOTH">
            <summary>
            Left and right side.
            </summary>
        </member>
        <member name="T:sl.InputType">
            \ingroup Video_group
            <summary>
            Structure defining the input type used in the ZED SDK.
            </summary>
            It can be used to select a specific camera with an id or serial number, or from a SVO file.
        </member>
        <member name="F:sl.InputType.inputType">
            <summary>
            Current input type.
            </summary>
        </member>
        <member name="F:sl.InputType.serialNumber">
            <summary>
            Serial number of the camera.
            </summary>
        </member>
        <member name="F:sl.InputType.id">
            <summary>
            Id of the camera.
            </summary>
        </member>
        <member name="F:sl.InputType.svoInputFilename">
            <summary>
            Path to the SVO file.
            </summary>
        </member>
        <member name="F:sl.InputType.streamInputIp">
            <summary>
            IP address of the streaming camera.
            </summary>
        </member>
        <member name="F:sl.InputType.streamInputPort">
            <summary>
            Port of the streaming camera.
            </summary>
        </member>
        <member name="T:sl.PlaneDetectionParameters">
            \ingroup SpatialMapping_group
             <summary>
             Class containing a set of parameters for the plane detection functionality.
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be adjusted by the user.
        </member>
        <member name="F:sl.PlaneDetectionParameters.maxDistanceThreshold">
            <summary>
            Controls the spread of plane by checking the position difference.
            </summary>
            Default: 0.15 meters
        </member>
        <member name="F:sl.PlaneDetectionParameters.normalSimilarityThreshold">
            <summary>
            Controls the spread of plane by checking the angle difference.
            </summary>
            Default: 15 degrees
        </member>
        <member name="T:sl.SpatialMappingParameters">
            \ingroup SpatialMapping_group
             <summary>
             Class containing a set of parameters for the spatial mapping module.
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be adjusted by the user.
        </member>
        <member name="F:sl.SpatialMappingParameters.resolutionMeter">
            <summary>
            Spatial mapping resolution in meters.
            </summary>
        </member>
        <member name="F:sl.SpatialMappingParameters.rangeMeter">
            <summary>
             Depth range in meters.
            </summary>
            Can be different from the value set by sl.InitParameters.depthMaximumDistance.
            \note Set to 0 by default. In this case, the range is computed from \ref resolutionMeter
            and from the current internal parameters to fit your application.
        </member>
        <member name="F:sl.SpatialMappingParameters.saveTexture">
            <summary>
            Whether to save the texture.
            </summary>
            If set to true, you will be able to apply the texture to your mesh after it is created.
            \note This option will consume more memory.
            \note This option is only available for sl.SPATIAL_MAP_TYPE.MESH.
        </member>
        <member name="F:sl.SpatialMappingParameters.useChunkOnly">
            <summary>
            Whether to only use chunks.
            </summary>
            If set to false, you will ensure consistency between the mesh and its inner chunk data.
            \note Updating the mesh is time-consuming.
            \note Setting this to true results in better performance.
        </member>
        <member name="F:sl.SpatialMappingParameters.maxMemoryUsage">
            <summary>
            The maximum CPU memory (in MB) allocated for the meshing process.
            </summary>
        </member>
        <member name="F:sl.SpatialMappingParameters.reverseVertexOrder">
            <summary>
            Whether to inverse the order of the vertices of the triangles.
            </summary>
            If your display process does not handle front and back face culling, you can use this to correct it.
            \note This option is only available for sl.SPATIAL_MAP_TYPE.MESH.
        </member>
        <member name="F:sl.SpatialMappingParameters.map_type">
            <summary>
            The type of spatial map to be created. This dictates the format that will be used for the mapping(e.g. mesh, point cloud). See \ref SPATIAL_MAP_TYPE
            </summary>
        </member>
        <member name="F:sl.SpatialMappingParameters.stabilityCounter">
            <summary>
            Control the integration rate of the current depth into the mapping process.
            </summary>
            This parameter controls how many times a stable 3D points should be seen before it is integrated into the spatial mapping.
            \n Default: 0 (this will define the stability counter based on the mesh resolution, the higher the resolution, the higher the stability counter)
        </member>
        <member name="M:sl.SpatialMappingParameters.#ctor(System.Single,System.Single,System.Boolean,sl.SPATIAL_MAP_TYPE,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            Sets all parameters to their default and optimized values.
        </member>
        <member name="M:sl.SpatialMappingParameters.get(sl.MAPPING_RESOLUTION)">
            <summary>
            Returns the value corresponding to a sl.MAPPING_RESOLUTION preset in meters.
            </summary>
            <param name="mappingResolution">The desired sl.MAPPING_RESOLUTION. Default: sl.MAPPING_RESOLUTION.MEDIUM</param>
            <returns>The value of \b mappingResolution in meters.</returns>
        </member>
        <member name="M:sl.SpatialMappingParameters.get(sl.MAPPING_RANGE)">
            <summary>
            Returns the value corresponding to a sl.MAPPING_RANGE preset in meters.
            </summary>
            <param name="mappingRange">The desired sl.MAPPING_RANGE. Default: sl.MAPPING_RANGE.MEDIUM</param>
            <returns>The value of \b mappingRange in meters.</returns>
        </member>
        <member name="M:sl.SpatialMappingParameters.set(sl.MAPPING_RESOLUTION)">
            <summary>
            Sets the resolution to a sl.MAPPING_RESOLUTION preset.
            </summary>
            <param name="mappingResolution">The desired sl.MAPPING_RESOLUTION. Default: sl.MAPPING_RESOLUTION.MEDIUM</param>
        </member>
        <member name="M:sl.SpatialMappingParameters.set(sl.MAPPING_RANGE)">
            <summary>
            Sets the range to a sl.MAPPING_RANGE preset.
            </summary>
            <param name="mappingRange">The desired sl.MAPPING_RANGE. Default: sl.MAPPING_RANGE.MEDIUM</param>
        </member>
        <member name="T:sl.AREA_EXPORTING_STATE">
            \ingroup SpatialMapping_group
             <summary>
             Lists the different states of spatial memory area export.
             </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.SUCCESS">
            <summary>
            The spatial memory file has been successfully created.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.RUNNING">
            <summary>
            The spatial memory is currently being written.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.NOT_STARTED">
            <summary>
            The spatial memory file exportation has not been called.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.FILE_EMPTY">
            <summary>
            The spatial memory contains no data, the file is empty.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.FILE_ERROR">
            <summary>
            The spatial memory file has not been written because of a wrong file name.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORTING_STATE.SPATIAL_MEMORY_DISABLED">
            <summary>
            The spatial memory learning is disabled. No file can be created.
            </summary>
        </member>
        <member name="T:sl.MAPPING_RESOLUTION">
            \ingroup SpatialMapping_group
             <summary>
             Lists the spatial mapping resolution presets.
             </summary>
        </member>
        <member name="F:sl.MAPPING_RESOLUTION.HIGH">
            <summary>
            Creates a detailed geometry.
            \n Requires lots of memory.
            </summary>
        </member>
        <member name="F:sl.MAPPING_RESOLUTION.MEDIUM">
            <summary>
            Small variations in the geometry will disappear.
            \n Useful for big objects.
            </summary>
        </member>
        <member name="F:sl.MAPPING_RESOLUTION.LOW">
            <summary>
            Keeps only huge variations of the geometry.
            \n Useful for outdoor purposes.
            </summary>
        </member>
        <member name="T:sl.MAPPING_RANGE">
            \ingroup SpatialMapping_group
             <summary>
             Lists the spatial mapping depth range presets.
             </summary>
        </member>
        <member name="F:sl.MAPPING_RANGE.NEAR">
            <summary>
            Geometry within 3.5 meters of the camera will be mapped.
            </summary>
        </member>
        <member name="F:sl.MAPPING_RANGE.MEDIUM">
            <summary>
            Geometry within 5 meters of the camera will be mapped.
            </summary>
        </member>
        <member name="F:sl.MAPPING_RANGE.FAR">
            <summary>
            Objects as far as 10 meters away are mapped.
            \n Useful for outdoors.
            </summary>
        </member>
        <member name="T:sl.SPATIAL_MAP_TYPE">
            \ingroup SpatialMapping_group
             <summary>
             Lists the types of spatial maps that can be created.
             </summary>
        </member>
        <member name="F:sl.SPATIAL_MAP_TYPE.MESH">
            <summary>
            The geometry is represented by a set of vertices connected by edges and forming faces.
            \n No color information is available.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MAP_TYPE.FUSED_POINT_CLOUD">
            <summary>
            The geometry is represented by a set of 3D colored points.
            </summary>
        </member>
        <member name="T:sl.MESH_FILE_FORMAT">
            \ingroup SpatialMapping_group
             <summary>
             Lists available mesh file formats.
             </summary>
        </member>
        <member name="F:sl.MESH_FILE_FORMAT.PLY">
            <summary>
            Contains only vertices and faces.
            </summary>
        </member>
        <member name="F:sl.MESH_FILE_FORMAT.BIN">
            <summary>
            Contains only vertices and faces encoded in binary.
            </summary>
        </member>
        <member name="F:sl.MESH_FILE_FORMAT.OBJ">
            <summary>
            Contains vertices, normals, faces, and texture information (if possible).
            </summary>
        </member>
        <member name="T:sl.MESH_FILTER">
            \ingroup SpatialMapping_group
             <summary>
             Lists available mesh filtering intensities.
             </summary>
        </member>
        <member name="F:sl.MESH_FILTER.LOW">
            <summary>
            Clean the mesh by closing small holes and removing isolated faces.
            </summary>
        </member>
        <member name="F:sl.MESH_FILTER.MEDIUM">
            <summary>
            Soft faces decimation and smoothing.
            </summary>
        </member>
        <member name="F:sl.MESH_FILTER.HIGH">
            <summary>
            Drastically reduce the number of faces and apply a soft smooth.
            </summary>
        </member>
        <member name="T:sl.SPATIAL_MAPPING_STATE">
            \ingroup SpatialMapping_group
             <summary>
             Lists the different states of spatial mapping.
             </summary>
        </member>
        <member name="F:sl.SPATIAL_MAPPING_STATE.INITIALIZING">
            <summary>
            The spatial mapping is initializing.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MAPPING_STATE.OK">
            <summary>
            The depth and tracking data were correctly integrated in the mapping algorithm.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MAPPING_STATE.NOT_ENOUGH_MEMORY">
            <summary>
            The maximum memory dedicated to the scanning has been reached.
            \n The mesh will no longer be updated.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MAPPING_STATE.NOT_ENABLED">
            <summary>
            sl.Camera.EnableSpatialMapping() wasn't called or the scanning was stopped and not relaunched.
            </summary>
        </member>
        <member name="F:sl.SPATIAL_MAPPING_STATE.FPS_TOO_LOW">
            <summary>
            The effective FPS is too low to give proper results for spatial mapping.
            \n Consider using performance parameters (sl.DEPTH_MODE.PERFORMANCE, sl.MAPPING_RESOLUTION.LOW,
            low camera resolution (sl.RESOLUTION.VGA / sl.RESOLUTION.HDSVGA or sl.RESOLUTION.HD720).
            </summary>
        </member>
        <member name="T:sl.UNIT">
            \ingroup Core_group
             <summary>
             Lists available units for measures.
             </summary>
        </member>
        <member name="F:sl.UNIT.MILLIMETER">
            <summary>
            International System (1/1000 meters)
            </summary>
        </member>
        <member name="F:sl.UNIT.CENTIMETER">
            <summary>
            International System (1/100 meters)
            </summary>
        </member>
        <member name="F:sl.UNIT.METER">
            <summary>
            International System (1 meter)
            </summary>
        </member>
        <member name="F:sl.UNIT.INCH">
            <summary>
             Imperial Unit (1/12 foot)
            </summary>
        </member>
        <member name="F:sl.UNIT.FOOT">
            <summary>
             Imperial Unit (1 feet)
            </summary>
        </member>
        <member name="T:sl.PLANE_TYPE">
            \ingroup SpatialMapping_group
             <summary>
             Lists the available plane types detected based on its orientation and whether detected by 
             sl.Camera.FindFloorPlane() or sl.Camera.FindPlaneAtHit().
             </summary>
        </member>
        <member name="F:sl.PLANE_TYPE.FLOOR">
            <summary>
            Floor plane of a scene.
            \n Retrieved by sl.Camera.FindFloorPlane().
            </summary>
        </member>
        <member name="F:sl.PLANE_TYPE.HIT_HORIZONTAL">
            <summary>
            Horizontal plane, such as a tabletop, floor, etc.
            \n Detected with sl.Camera.FindPlaneAtHit() using screen-space coordinates.
            </summary>
        </member>
        <member name="F:sl.PLANE_TYPE.HIT_VERTICAL">
            <summary>
            Vertical plane, such as a wall.
            \n Detected with sl.Camera.FindPlaneAtHit() using screen-space coordinates.
            </summary>
        </member>
        <member name="F:sl.PLANE_TYPE.HIT_UNKNOWN">
            <summary>
            Plane at an angle neither parallel nor perpendicular to the floor.
            \n Detected with sl.Camera.FindPlaneAtHit() using screen-space coordinates.
            </summary>
        </member>
        <member name="T:sl.AREA_EXPORT_STATE">
            \ingroup SpatialMapping_group
             <summary>
              Possible states of the ZED's spatial memory area export, for saving 3D features used
              by the tracking system to relocalize the camera. This is used when saving a mesh generated
              by spatial mapping when Save Mesh is enabled - a .area file is saved as well.
             </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SUCCESS">
            <summary>
            Spatial memory file has been successfully created.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_RUNNING">
            <summary>
            Spatial memory file is currently being written to.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_NOT_STARTED">
            <summary>
            Spatial memory file export has not been called.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_EMPTY">
            <summary>
            Spatial memory contains no data; the file is empty.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_FILE_ERROR">
            <summary>
            Spatial memory file has not been written to because of a bad file name.
            </summary>
        </member>
        <member name="F:sl.AREA_EXPORT_STATE.AREA_EXPORT_STATE_SPATIAL_MEMORY_DISABLED">
            <summary>
            Spatial memory has been disabled, so no file can be created.
            </summary>
        </member>
        <member name="T:sl.Mesh">
            \ingroup SpatialMapping_group
             <summary>
             Class representing a mesh and containing the geometric (and optionally texture) data of the scene captured by the spatial mapping module.
             </summary>
             By default the mesh is defined as a set of chunks.
             \n This way we update only the data that has to be updated avoiding a time consuming remapping process every time a small part of the sl.Mesh is updated.
        </member>
        <member name="F:sl.Mesh.nbVerticesInSubmesh">
            <summary>
            Number of vertices per chunk/sub-mesh.
            </summary>
        </member>
        <member name="F:sl.Mesh.nbTrianglesInSubmesh">
            <summary>
            Number of triangles per chunk/sub-mesh.
            </summary>
        </member>
        <member name="F:sl.Mesh.updatedIndices">
            <summary>
            Number of indices per chunk/sub-mesh.
            </summary>
        </member>
        <member name="F:sl.Mesh.nbVertices">
            <summary>
            Vertices count in current sub-mesh.
            </summary>
        </member>
        <member name="F:sl.Mesh.nbTriangles">
            <summary>
            Triangle count in current sub-mesh.
            </summary>
            Every three values of \ref triangles are the indexes of the three vertices constituting a triangular face.
        </member>
        <member name="F:sl.Mesh.nbUpdatedSubmesh">
            <summary>
            Number of updated sub-meshes.
            </summary>
        </member>
        <member name="F:sl.Mesh.vertices">
            <summary>
            Vector of vertices.
            </summary>
        </member>
        <member name="F:sl.Mesh.triangles">
            <summary>
            Vector of of triangles/faces.
            </summary>
            Triangles are defined as a set of three vertices indexes ```{v1, v2, v3}```.
        </member>
        <member name="F:sl.Mesh.colors">
            <summary>
            Vector of colors.
            </summary>
        </member>
        <member name="F:sl.Mesh.uvs">
            <summary>
            UVs defines the 2D projection of each vertices onto the texture.
            </summary>
            Values are normalized [0, 1] and start from the bottom left corner of the texture (as requested by OpenGL).
            In order to display a textured mesh you need to bind the texture and then draw each triangle by picking its uv values.
        </member>
        <member name="F:sl.Mesh.textures">
            <summary>
            Texture of the sl.Mesh.
            </summary>
        </member>
        <member name="F:sl.Mesh.texturesSize">
            <summary>
            Width and height of the sl.Mesh texture, if any.
            </summary>
        </member>
        <member name="F:sl.Mesh.chunks">
            <summary>
            Dictionary of all existing chunks.
            </summary>
        </member>
        <member name="T:sl.FusedPointCloud">
            <summary>
            A fused point cloud contains both geometric and color data of the scene captured by spatial mapping.
            </summary>
        </member>
        <member name="F:sl.FusedPointCloud.vertices">
            <summary>
            Array of vertices.
            </summary>
            Vertices are defined by colored 3D points ```{x, y, z, rgba}```.
        </member>
        <member name="T:sl.Chunk">
            \ingroup SpatialMapping_group
             <summary>
             Class representing a sub-mesh containing local vertices and triangles.
             </summary>
        </member>
        <member name="F:sl.Chunk.vertices">
            <summary>
            Array of vertices.
            </summary>
            Vertices are defined by a 3D point.
        </member>
        <member name="F:sl.Chunk.triangles">
            <summary>
            Triangles (or faces) contains the index of its three vertices.
            </summary>
            It corresponds to the 3 vertices of the triangle ```{v1, v2, v3}```.
        </member>
        <member name="F:sl.Chunk.colors">
            <summary>
            Colors of the vertices.
            </summary>
        </member>
        <member name="T:sl.PlaneData">
            <summary>
            Structure representing a plane defined by a point and a normal, or a plane equation.
            </summary>
            \note The plane measurements are expressed in reference defined by sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.PlaneData.ErrorCode">
            <summary>
            sl.ERROR_CODE returned by the ZED SDK when the plane detection was attempted.
            </summary>
        </member>
        <member name="F:sl.PlaneData.Type">
            <summary>
            Type of the plane defined by its orientation.
            </summary>
            \note It is deduced from the gravity vector and is therefore not available with on sl.MODEL.ZED.
        </member>
        <member name="F:sl.PlaneData.PlaneNormal">
            <summary>
            Plane normalized normal vector.
            </summary>
        </member>
        <member name="F:sl.PlaneData.PlaneCenter">
            <summary>
            Plane center point.
            </summary>
        </member>
        <member name="F:sl.PlaneData.PlaneTransformPosition">
            <summary>
            Plane position relative to the global reference frame.
            </summary>
        </member>
        <member name="F:sl.PlaneData.PlaneTransformOrientation">
            <summary>
            Plane orientation relative to the global reference frame.
            </summary>
        </member>
        <member name="F:sl.PlaneData.PlaneEquation">
            <summary>
            Plane equation coefficients ```{a, b, c, d}```.
            </summary>
            \note The plane equation has the following form: ```ax + by + cz = d```.
        </member>
        <member name="F:sl.PlaneData.Extents">
            <summary>
            Gets the width and height of the bounding rectangle around the plane contours.
            </summary>
        </member>
        <member name="F:sl.PlaneData.BoundsSize">
            <summary>
            Size of \ref Bounds.
            </summary>
        </member>
        <member name="T:sl.BatchParameters">
            \ingroup Object_group
            <summary>
            Structure containing a set of parameters for batch object detection.
            </summary>
            The default constructor sets all parameters to their default settings.
            \note Parameters can be user adjusted.
        </member>
        <member name="F:sl.BatchParameters.enable">
             <summary>
             Whether to enable the batch option in the object detection module.
             </summary>
             Batch queueing system provides:
             - deep-learning based re-identification
             - trajectory smoothing and filtering
            
             Default: false
             \note To activate this option, \ref enable must be set to true.
        </member>
        <member name="F:sl.BatchParameters.idRetentionTime">
            <summary>
            Max retention time in seconds of a detected object.
            </summary>
            After this time, the same object will mostly have a different id.
        </member>
        <member name="F:sl.BatchParameters.latency">
            <summary>
            Trajectories will be output in batch with the desired latency in seconds.
            </summary>
            During this waiting time, re-identification of objects is done in the background.
            \note Specifying a short latency will limit the search (falling in timeout) for previously seen object ids but will be closer to real time output.
            \note Specifying a long latency will reduce the change of timeout in re-identification but increase difference with live output.
        </member>
        <member name="T:sl.AI_Model_status">
            <summary>
            Structure containing AI model status.
            </summary>
        </member>
        <member name="F:sl.AI_Model_status.downloaded">
            <summary>
            The model file is currently present on the host.
            </summary>
        </member>
        <member name="F:sl.AI_Model_status.optimized">
            <summary>
            An engine file with the expected architecture is found.
            </summary>
        </member>
        <member name="T:sl.ObjectDetectionParameters">
            \ingroup Object_group
             <summary>
             Structure containing a set of parameters for the object detection module.
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be user adjusted.
        </member>
        <member name="F:sl.ObjectDetectionParameters.instanceModuleId">
            <summary>
            Id of the module instance.
            </summary>
            This is used to identify which object detection module instance is used.
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.ObjectDetectionParameters.enableObjectTracking" -->
        <member name="F:sl.ObjectDetectionParameters.enableSegmentation">
            <summary>
            Whether the object masks will be computed.
            </summary>
            Default: false
        </member>
        <member name="F:sl.ObjectDetectionParameters.detectionModel">
            <summary>
            sl.OBJECT_DETECTION_MODEL to use.
            </summary>
            Default: sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_FAST
        </member>
        <member name="F:sl.ObjectDetectionParameters.maxRange">
            <summary>
            Upper depth range for detections.
            </summary>
            Default: -1 (value set in sl.InitParameters.depthMaximumDistance)
            \note The value cannot be greater than sl.InitParameters.depthMaximumDistance and its unit is defined in sl.InitParameters.coordinateUnits.
        </member>
        <member name="F:sl.ObjectDetectionParameters.batchParameters">
            <summary>
            Batching system parameters.
            </summary>
            Batching system (introduced in 3.5) performs short-term re-identification with deep-learning and trajectories filtering.
            \n sl.BatchParameters.enable must to be true to use this feature (by default disabled).
        </member>
        <member name="F:sl.ObjectDetectionParameters.filteringMode">
            <summary>
            Filtering mode that should be applied to raw detections.
            </summary>
            Default: sl.OBJECT_FILTERING_MODE.NMS3D (same behavior as previous ZED SDK version)
            \note This parameter is only used in detection model [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL)
            and sl.OBJECT_DETECTION_MODEL.CUSTOM_BOX_OBJECTS.
            \note For custom object, it is recommended to use sl.OBJECT_FILTERING_MODE.NMS3D_PER_CLASS or sl.OBJECT_FILTERING_MODE.NONE.
            \note In this case, you might need to add your own NMS filter before ingesting the boxes into the object detection module.
        </member>
        <member name="F:sl.ObjectDetectionParameters.predictionTimeout_s">
            <summary>
            Prediction duration of the ZED SDK when an object is not detected anymore before switching its state to sl.OBJECT_TRACKING_STATE.SEARCHING.
            </summary>
            It prevents the jittering of the object state when there is a short misdetection.
            \n The user can define their own prediction time duration.
            \n Default: 0.2f
            \note During this time, the object will have sl.OBJECT_TRACKING_STATE.OK state even if it is not detected.
            \note The duration is expressed in seconds.
            \warning \ref predictionTimeout_s will be clamped to 1 second as the prediction is getting worse with time.
            \warning Setting this parameter to 0 disables the ZED SDK predictions.
        </member>
        <member name="F:sl.ObjectDetectionParameters.allowReducedPrecisionInference">
            <summary>
            Whether to allow inference to run at a lower precision to improve runtime and memory usage.
            </summary>
            It might increase the initial optimization time and could include downloading calibration data or calibration cache and slightly reduce the accuracy.
            \note The fp16 is automatically enabled if the GPU is compatible and provides a speed up of almost x2 and reduce memory usage by almost half, no precision loss.
            \note This setting allow int8 precision which can speed up by another x2 factor (compared to fp16, or x4 compared to fp32) and half the fp16 memory usage, however some accuracy could be lost.
            \note The accuracy loss should not exceed 1-2% on the compatible models.
            \note The current compatible models are all [sl.AI_MODELS.HUMAN_BODY_XXXX](\ref AI_MODELS).
        </member>
        <member name="T:sl.ObjectDetectionRuntimeParameters">
            \ingroup Object_group
             <summary>
             Structure containing a set of runtime parameters for the object detection module.
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be adjusted by the user.
        </member>
        <member name="F:sl.ObjectDetectionRuntimeParameters.detectionConfidenceThreshold">
            <summary>
            Confidence threshold.
            </summary>
            From 1 to 100, with 1 meaning a low threshold, more uncertain objects and 99 very few but very precise objects.
            \n Default: 20.f
            \note If the scene contains a lot of objects, increasing the confidence can slightly speed up the process, since every object instance is tracked.
            \note \ref detectionConfidenceThreshold is used as a fallback when sl::ObjectDetectionRuntimeParameters.objectConfidenceThreshold is partially set.
        </member>
        <member name="F:sl.ObjectDetectionRuntimeParameters.objectClassFilter">
             <summary>
             Defines which object types to detect and track.
             </summary>
             Default: ```new int[(int)sl.OBJECT_CLASS.LAST)]``` (all classes are tracked)
             \note Fewer object types can slightly speed up the process since every object is tracked.
             \note Will output only the selected classes.
            
             In order to get all the available classes, the filter list must be empty :
             \code
             objectClassFilter = new int[(int)sl.OBJECT_CLASS.LAST)];
             \endcode
            
             To select a set of specific object classes, like vehicles, persons and animals for instance:
             \code
             objectClassFilter[(int)sl.OBJECT_CLASS.PERSON] = Convert.ToInt32(true);
             objectClassFilter[(int)sl.OBJECT_CLASS.VEHICLE] = Convert.ToInt32(true);
             objectClassFilter[(int)sl.OBJECT_CLASS.ANIMAL] = Convert.ToInt32(true);
             \endcode
        </member>
        <member name="F:sl.ObjectDetectionRuntimeParameters.objectConfidenceThreshold">
            <summary>
            Array of confidence thresholds for each class (can be empty for some classes).
            </summary>
            \note sl::ObjectDetectionRuntimeParameters.detectionConfidenceThreshold will be taken as fallback/default value.
        </member>
        <member name="T:sl.BodyTrackingParameters">
            \ingroup Body_group
             <summary>
             Structure containing a set of parameters for the body tracking module.
             </summary>
             The default constructor sets all parameters to their default settings.
             \note Parameters can be user adjusted.
        </member>
        <member name="F:sl.BodyTrackingParameters.instanceModuleId">
            <summary>
            Id of the module instance.
            </summary>
            This is used to identify which body tracking module instance is used.
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.BodyTrackingParameters.enableObjectTracking" -->
        <member name="F:sl.BodyTrackingParameters.enableSegmentation">
            <summary>
            Whether the body/person masks will be computed.
            </summary>
            Default: false
        </member>
        <member name="F:sl.BodyTrackingParameters.detectionModel">
            <summary>
            sl.BODY_TRACKING_MODEL to use.
            </summary>
            Default: sl.BODY_TRACKING_MODEL.HUMAN_BODY_ACCURATE
        </member>
        <member name="F:sl.BodyTrackingParameters.enableBodyFitting">
            <summary>
            Whether to apply the body fitting.
            </summary>
            Default: false
        </member>
        <member name="F:sl.BodyTrackingParameters.bodyFormat">
            <summary>
            Body format to be outputted by the ZED SDK with sl.Camera.RetrieveBodies().
            </summary>
        </member>
        <member name="F:sl.BodyTrackingParameters.bodySelection">
            <summary>
            Selection of keypoints to be outputted by the ZED SDK with \ref sl_retrieve_bodies().
            </summary>
            Default: SL_BODY_KEYPOINTS_SELECTION_FULL
        </member>
        <member name="F:sl.BodyTrackingParameters.maxRange">
            <summary>
            Upper depth range for detections.
            </summary>
            Default: -1 (value set in sl.InitParameters.depthMaximumDistance)
            \note The value cannot be greater than sl.InitParameters.depthMaximumDistance and its unit is defined in sl.InitParameters.coordinateUnits.
        </member>
        <member name="F:sl.BodyTrackingParameters.predictionTimeout_s">
            <summary>
            Prediction duration of the ZED SDK when an object is not detected anymore before switching its state to sl.OBJECT_TRACKING_STATE.SEARCHING.
            </summary>
            It prevents the jittering of the object state when there is a short misdetection.
            \n The user can define their own prediction time duration.
            \n Default: 0.2f
            \note During this time, the object will have sl.OBJECT_TRACKING_STATE.OK state even if it is not detected.
            \note The duration is expressed in seconds.
            \warning \ref predictionTimeout_s will be clamped to 1 second as the prediction is getting worse with time.
            \warning Setting this parameter to 0 disables the ZED SDK predictions.
        </member>
        <member name="F:sl.BodyTrackingParameters.allowReducedPrecisionInference">
            <summary>
            Whether to allow inference to run at a lower precision to improve runtime and memory usage.
            </summary>
            It might increase the initial optimization time and could include downloading calibration data or calibration cache and slightly reduce the accuracy.
            \note The fp16 is automatically enabled if the GPU is compatible and provides a speed up of almost x2 and reduce memory usage by almost half, no precision loss.
            \note This setting allow int8 precision which can speed up by another x2 factor (compared to fp16, or x4 compared to fp32) and half the fp16 memory usage, however some accuracy could be lost.
            \note The accuracy loss should not exceed 1-2% on the compatible models.
            \note The current compatible models are all [sl.AI_MODELS.HUMAN_BODY_XXXX](\ref AI_MODELS).
        </member>
        <member name="T:sl.BodyTrackingRuntimeParameters">
            \ingroup Body_group
            <summary>
            Structure containing a set of runtime parameters for the body tracking module.
            </summary>
            The default constructor sets all parameters to their default settings.
            \note Parameters can be adjusted by the user.
        </member>
        <member name="F:sl.BodyTrackingRuntimeParameters.detectionConfidenceThreshold">
            <summary>
            Confidence threshold.
            </summary>
            From 1 to 100, with 1 meaning a low threshold, more uncertain objects and 99 very few but very precise objects.
            \n Default: 20.f
            \note If the scene contains a lot of objects, increasing the confidence can slightly speed up the process, since every object instance is tracked.
        </member>
        <member name="F:sl.BodyTrackingRuntimeParameters.minimumKeypointsThreshold">
            <summary>
            Minimum threshold for the keypoints.
            </summary>
            The ZED SDK will only output the keypoints of the skeletons with threshold greater than this value.
            \n Default: 0
            \note It is useful, for example, to remove unstable fitting results when a skeleton is partially occluded.
        </member>
        <member name="F:sl.BodyTrackingRuntimeParameters.skeletonSmoothing">
            <summary>
            Control of the smoothing of the fitted fused skeleton.
            </summary>
            It is ranged from 0 (low smoothing) and 1 (high smoothing).
            \n Default: 0
        </member>
        <member name="T:sl.ObjectData">
            \ingroup Object_group
             <summary>
             Structure containing data of a detected object such as its \ref boundingBox, \ref label, \ref id and its 3D \ref position.
             </summary>
        </member>
        <member name="F:sl.ObjectData.id">
            <summary>
            Object identification number.
            </summary>
            It is used as a reference when tracking the object through the frames.
            \note Only available if sl.ObjectDetectionParameters.enableTracking is activated.
            \note Otherwise, it will be set to -1.
        </member>
        <member name="F:sl.ObjectData.uniqueObjectId">
            <summary>
            Unique id to help identify and track AI detections.
            </summary>
            It can be either generated externally, or by using sl.Camera.GenerateUniqueID() or left empty.
        </member>
        <member name="F:sl.ObjectData.rawLabel">
            <summary>
            Object raw label.
            </summary>
            It is forwarded from sl.CustomBoxObjectData when using sl.OBJECT_DETECTION_MODEL.CUSTOM_BOX_OBJECTS.
        </member>
        <member name="F:sl.ObjectData.label">
            <summary>
            Object class/category to identify the object type.
            </summary>
        </member>
        <member name="F:sl.ObjectData.sublabel">
            <summary>
            Object sub-class/sub-category to identify the object type.
            </summary>
        </member>
        <member name="F:sl.ObjectData.objectTrackingState">
            <summary>
            Object tracking state.
            </summary>
        </member>
        <member name="F:sl.ObjectData.actionState">
            <summary>
            Object action state.
            </summary>
        </member>
        <member name="F:sl.ObjectData.position">
            <summary>
            Object 3D centroid.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.ObjectData.confidence">
            <summary>
            Detection confidence value of the object.
            </summary>
            From 0 to 100, a low value means the object might not be localized perfectly or the label (sl.OBJECT_CLASS) is uncertain.
        </member>
        <member name="F:sl.ObjectData.mask">
            <summary>
            Pointer of the sl.Mat representing the mask defining which pixels which belong to the object (in \ref boundingBox and set to 255) and those of the background (set to 0).
            To access the pixels values, create a new sl.Mat from that IntPtr. Ex: sl.Mat mat = new sl.Mat(mask);
            </summary>
            \warning The mask information is only available for tracked objects (sl.OBJECT_TRACKING_STATE.OK) that have a valid depth.
            \warning Otherwise, the mask will not be initialized.
        </member>
        <member name="F:sl.ObjectData.boundingBox2D">
            <summary>
            2D bounding box of the object represented as four 2D points starting at the top left corner and rotation clockwise.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \code
            A ------ B
            | Object |
            D ------ C
            \endcode
        </member>
        <member name="F:sl.ObjectData.headPosition">
            <summary>
            3D centroid of the head of the object (a person).
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="F:sl.ObjectData.velocity">
            <summary>
            Object 3D velocity.
            </summary>
            \note It is defined in ```sl.InitParameters.coordinateUnits / s``` and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.ObjectData.dimensions">
            <summary>
            3D object dimensions: width, height, length.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.ObjectData.boundingBox">
            <summary>
            3D bounding box of the object represented as eight 3D points.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \code
               1 ------ 2
              /        /|
             0 ------ 3 |
             | Object | 6
             |        |/
             4 ------ 7
            \endcode
        </member>
        <member name="F:sl.ObjectData.headBoundingBox">
            <summary>
            3D bounding box of the head of the object (a person) represented as eight 3D points.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="F:sl.ObjectData.headBoundingBox2D">
            <summary>
            2D bounding box of the head of the object (a person) represented as four 2D points starting at the top left corner and rotation clockwise.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="F:sl.ObjectData.positionCovariance">
            <summary>
            Covariance matrix of the 3D position.
            </summary>
            \note It is represented by its upper triangular matrix value
            \code
                 = [p0, p1, p2]
                   [p1, p3, p4]
                   [p2, p4, p5]
            \endcode
            where pi is ```positionCovariance[i]```
        </member>
        <member name="T:sl.CustomBoxObjectData">
            \ingroup Object_group
             <summary>
             Structure that store externally detected objects.
             </summary>
             The objects can be ingested with sl.Camera.IngestCustomBoxObjects() to extract 3D and tracking information over time.
        </member>
        <member name="F:sl.CustomBoxObjectData.uniqueObjectID">
            <summary>
            Unique id to help identify and track AI detections.
            </summary>
            It can be either generated externally, or by using sl.Camera.GenerateUniqueID() or left empty.
        </member>
        <member name="F:sl.CustomBoxObjectData.boundingBox2D">
            <summary>
            2D bounding box of the object represented as four 2D points starting at the top left corner and rotation clockwise.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \code
            A ------ B
            | Object |
            D ------ C
            \endcode
        </member>
        <member name="F:sl.CustomBoxObjectData.label">
            <summary>
            Object label.
            </summary>
            This information is passed-through and can be used to improve object tracking.
            \note It should define an object class. This means that any similar object (in classification) should share the same label number.
        </member>
        <member name="F:sl.CustomBoxObjectData.probability">
            <summary>
            Detection confidence value of the object.
            </summary>
            \note The value should be in ```[0-1]```.
            \note It can be used to improve the object tracking.
        </member>
        <member name="F:sl.CustomBoxObjectData.isGrounded">
             <summary>
             Provide hypothesis about the object movements (degrees of freedom or DoF) to improve the object tracking.
             </summary>
             - true: 2 DoF projected alongside the floor plane. Case for object standing on the ground such as person, vehicle, etc. 
             \n The projection implies that the objects cannot be superposed on multiple horizontal levels. 
             - false: 6 DoF (full 3D movements are allowed).
            
             \note This parameter cannot be changed for a given object tracking id.
             \note It is advised to set it by labels to avoid issues.
        </member>
        <!-- Badly formed XML comment ignored for member "T:sl.Objects" -->
        <member name="F:sl.Objects.numObject">
            <summary>
            Number of detected objects.
            </summary>
            \note You can use it to iterate through the \ref objectData array.
        </member>
        <member name="F:sl.Objects.timestamp">
            <summary>
            Timestamp corresponding to the frame acquisition.
            </summary>
            This value is especially useful for the async mode to synchronize the data.
        </member>
        <member name="F:sl.Objects.isNew">
            <summary>
            Whether \ref objectData has already been retrieved or not.
            </summary>
        </member>
        <member name="F:sl.Objects.isTracked">
            <summary>
            Whether both the object tracking and the world orientation has been setup.
            </summary>
        </member>
        <member name="F:sl.Objects.detectionModel">
            <summary>
            Current sl.OBJECT_DETECTION_MODEL used.
            </summary>
        </member>
        <member name="F:sl.Objects.objectData">
            <summary>
            Array of detected objects.
            </summary>
            \note Since the data is transmitted from C++ to C#, the size of the structure must be constant.
            \note Therefore, there is a limitation of 75 (sl.Constant.MAX_OBJECTS) objects in the image.
        </member>
        <member name="M:sl.Objects.GetObjectDataFromId(sl.ObjectData@,System.Int32)">
            <summary>
            Function that looks for a given object id in the current objects list.
            </summary>
            <param name="objectData">[Out] sl.ObjectData to fill if the search succeeded.</param>
            <param name="objectDataId">[In] Id of the sl.ObjectData to search.</param>
            <returns>True if found, otherwise False.</returns>
        </member>
        <member name="T:sl.CovarMatrix">
            <summary>
            Full covariance matrix for position (3x3). Only 6 values are necessary
            [p0, p1, p2]
            [p1, p3, p4]
            [p2, p4, p5]
            </summary>
        </member>
        <member name="T:sl.BodyData">
            \ingroup Body_group
            <summary>
            Structure containing data of a detected body/person such as its \ref headBoundingBox, \ref id and its 3D \ref position.
            </summary>
        </member>
        <member name="F:sl.BodyData.id">
            <summary>
            Body/person identification number.
            </summary>
            It is used as a reference when tracking the body through the frames.
            \note Only available if sl.BodyTrackingParameters.enableTracking is activated.
            \note Otherwise, it will be set to -1.
        </member>
        <member name="F:sl.BodyData.uniqueObjectId">
            <summary>
            Unique id to help identify and track AI detections.
            </summary>
            It can be either generated externally, or by using sl.Camera.GenerateUniqueID() or left empty.
        </member>
        <member name="F:sl.BodyData.trackingState">
            <summary>
            Body/person tracking state.
            </summary>
        </member>
        <member name="F:sl.BodyData.actionState">
            <summary>
            Body/person action state.
            </summary>
        </member>
        <member name="F:sl.BodyData.position">
            <summary>
            Body/person 3D centroid.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.BodyData.velocity">
            <summary>
            Body/person 3D velocity.
            </summary>
            \note It is defined in ```sl.InitParameters.coordinateUnits / s``` and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.BodyData.positionCovariance">
            <summary>
            Covariance matrix of the 3D position.
            </summary>
            \note It is represented by its upper triangular matrix value
            \code
                 = [p0, p1, p2]
                   [p1, p3, p4]
                   [p2, p4, p5]
            \endcode
            where pi is ```positionCovariance[i]```
        </member>
        <member name="F:sl.BodyData.confidence">
            <summary>
            Detection confidence value of the body/person.
            </summary>
            From 0 to 100, a low value means the body might not be localized perfectly.
        </member>
        <member name="F:sl.BodyData.mask">
            <summary>
            Mask defining which pixels which belong to the body/person (in \ref boundingBox and set to 255) and those of the background (set to 0).
            </summary>
            \warning The mask information is only available for tracked bodies (sl.OBJECT_TRACKING_STATE.OK) that have a valid depth.
            \warning Otherwise, the mask will not be initialized.
        </member>
        <member name="F:sl.BodyData.boundingBox2D">
            <summary>
            2D bounding box of the body/person represented as four 2D points starting at the top left corner and rotation clockwise.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \code
            A ------ B
            | Object |
            D ------ C
            \endcode
        </member>
        <member name="F:sl.BodyData.headPosition">
            <summary>
            3D centroid of the head of the body/person.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.BodyData.dimensions">
            <summary>
            3D body/person dimensions: width, height, length.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.BodyData.boundingBox">
            <summary>
            3D bounding box of the body/person represented as eight 3D points.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \code
               1 ------ 2
              /        /|
             0 ------ 3 |
             | Object | 6
             |        |/
             4 ------ 7
            \endcode
        </member>
        <member name="F:sl.BodyData.headBoundingBox">
            <summary>
            3D bounding box of the head of the body/person represented as eight 3D points.
            </summary>
            \note It is defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
        </member>
        <member name="F:sl.BodyData.headBoundingBox2D">
            <summary>
            2D bounding box of the head of the body/person represented as four 2D points starting at the top left corner and rotation clockwise.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
        </member>
        <member name="F:sl.BodyData.keypoints2D">
            <summary>
            Set of useful points representing the human body in 2D.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \warning In some cases, eg. body partially out of the image, some keypoints can not be detected. They will have negatives coordinates.
        </member>
        <member name="F:sl.BodyData.keypoints">
            <summary>
            Set of useful points representing the human body in 3D.
            </summary>
            \note They are defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \warning In some cases, eg. body partially out of the image or missing depth data, some keypoints can not be detected. They will have non finite values.
        </member>
        <member name="F:sl.BodyData.keypointConfidence">
            <summary>
            Array of detection confidences for each keypoint.
            </summary>
            \note They can not be lower than the sl.BodyTrackingRuntimeParameters.detectionConfidenceThreshold.
            \warning In some cases, eg. body partially out of the image or missing depth data, some keypoints can not be detected. They will have non finite values.
        </member>
        <member name="F:sl.BodyData.keypointCovariances">
            <summary>
            Array of detection covariance for each keypoint.
            </summary>
            \warning In some cases, eg. body partially out of the image or missing depth data, some keypoints can not be detected. Their covariances will be 0.
        </member>
        <member name="F:sl.BodyData.localPositionPerJoint">
            <summary>
            Array of local position (position of the child keypoint with respect to its parent expressed in its parent coordinate frame) for each keypoint.
            </summary>
            \note They are expressed in sl.REFERENCE_FRAME.CAMERA or sl.REFERENCE_FRAME.WORLD.
            \warning Not available with sl.BODY_FORMAT.BODY_18.
        </member>
        <member name="F:sl.BodyData.localOrientationPerJoint">
            <summary>
            Array of local orientation for each keypoint.
            </summary>
            \note The orientation is represented by a quaternion.
            \warning Not available with sl.BODY_FORMAT.BODY_18.
        </member>
        <member name="F:sl.BodyData.globalRootOrientation">
            <summary>
            Global root orientation of the skeleton.
            </summary>
            The orientation is also represented by a quaternion.
            \note The global root position is already accessible in \ref keypoint attribute by using the root index of a given sl.BODY_FORMAT.
            \warning Not available with sl.BODY_FORMAT.BODY_18.
        </member>
        <member name="T:sl.Bodies">
            \ingroup Body_group
            <summary>
            Structure containing the results of the body tracking module.
            </summary>
            The detected bodies/persons are listed in \ref bodiesList.
        </member>
        <member name="F:sl.Bodies.nbBodies">
            <summary>
            Number of detected bodies/persons.
            </summary>
            \note You can use it to iterate through the \ref bodiesList array.
        </member>
        <member name="F:sl.Bodies.timestamp">
            <summary>
            Timestamp corresponding to the frame acquisition.
            </summary>
            This value is especially useful for the async mode to synchronize the data.
        </member>
        <member name="F:sl.Bodies.isNew">
            <summary>
            Whether \ref bodiesList has already been retrieved or not.
            </summary>
        </member>
        <member name="F:sl.Bodies.isTracked">
            <summary>
            Whether both the body tracking and the world orientation has been setup.
            </summary>
        </member>
        <member name="F:sl.Bodies.bodiesList">
            <summary>
            Array of detected bodies/persons.
            </summary>
            \note Since the data is transmitted from C++ to C#, the size of the structure must be constant.
            \note Therefore, there is a limitation of 75 (sl.Constant.MAX_OBJECTS) objects in the image.
        </member>
        <member name="T:sl.BODY_FORMAT">
            \ingroup Body_group
             <summary>
             Lists supported skeleton body models.
             </summary>
        </member>
        <member name="F:sl.BODY_FORMAT.BODY_18">
            <summary>
            18-keypoint model
            \n Basic body model
            </summary>
        </member>
        <member name="F:sl.BODY_FORMAT.BODY_34">
            <summary>
            34-keypoint model
            \note Requires body fitting enabled.
            </summary>
        </member>
        <member name="F:sl.BODY_FORMAT.BODY_38">
            <summary>
            38-keypoint model
            \n Including simplified face, hands and feet.
            \note Early Access
            </summary>
        </member>
        <member name="T:sl.BODY_KEYPOINTS_SELECTION">
            \ingroup Body_group
             <summary>
             Lists supported models for skeleton keypoints selection.
             </summary>
        </member>
        <member name="F:sl.BODY_KEYPOINTS_SELECTION.FULL">
            <summary>
            Full keypoint model
            </summary>
        </member>
        <member name="F:sl.BODY_KEYPOINTS_SELECTION.UPPER_BODY">
            <summary>
            Upper body keypoint model
            \n Will output only upper body (from hip).
            </summary>
        </member>
        <member name="T:sl.OBJECT_CLASS">
            \ingroup Object_group
             <summary>
             Lists available object classes.
             </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.PERSON">
            <summary>
            For people detection
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.VEHICLE">
            <summary>
            For vehicle detection (cars, trucks, buses, motorcycles, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.BAG">
            <summary>
            For bag detection (backpack, handbag, suitcase, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.ANIMAL">
            <summary>
            For animal detection (cow, sheep, horse, dog, cat, bird, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.ELECTRONICS">
            <summary>
            For electronic device detection (cellphone, laptop, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.FRUIT_VEGETABLE">
            <summary>
            For fruit and vegetable detection (banana, apple, orange, carrot, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.SPORT">
            <summary>
            For sport-related object detection (sport ball, etc.)
            </summary>
        </member>
        <member name="F:sl.OBJECT_CLASS.LAST">
            @cond SHOWHIDDEN
        </member>
        <member name="T:sl.OBJECT_SUBCLASS">
            \ingroup Object_group
             <summary>
             List available object subclasses.
            
             Given as hint, when using object tracking an object can change of sl.OBJECT_SUBCLASS while keeping the same sl.OBJECT_CLASS
             (i.e.: frame n: sl.OBJECT_SUBCLASS.MOTORBIKE, frame n+1: sl.OBJECT_SUBCLASS.BICYCLE).
             </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.PERSON">
            <summary>
            sl.OBJECT_CLASS.PERSON
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BICYCLE">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.CAR">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.MOTORBIKE">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BUS">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.TRUCK">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BOAT">
            <summary>
            sl.OBJECT_CLASS.VEHICLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BACKPACK">
            <summary>
            sl.OBJECT_CLASS.BAG
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.HANDBAG">
            <summary>
            sl.OBJECT_CLASS.BAG
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.SUITCASE">
            <summary>
            sl.OBJECT_CLASS.BAG
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BIRD">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.CAT">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.DOG">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.HORSE">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.SHEEP">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.COW">
            <summary>
            sl.OBJECT_CLASS.ANIMAL
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.CELLPHONE">
            <summary>
            sl.OBJECT_CLASS.ELECTRONICS
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.LAPTOP">
            <summary>
            sl.OBJECT_CLASS.ELECTRONICS
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.BANANA">
            <summary>
            sl.OBJECT_CLASS.FRUIT_VEGETABLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.APPLE">
            <summary>
            sl.OBJECT_CLASS.FRUIT_VEGETABLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.ORANGE">
            <summary>
            sl.OBJECT_CLASS.FRUIT_VEGETABLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.CARROT">
            <summary>
            sl.OBJECT_CLASS.FRUIT_VEGETABLE
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.PERSON_HEAD">
            <summary>
            sl.OBJECT_CLASS.PERSON
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.SPORTSBALL">
            <summary>
            sl.OBJECT_CLASS.SPORT
            </summary>
        </member>
        <member name="F:sl.OBJECT_SUBCLASS.LAST">
            @cond SHOWHIDDEN
        </member>
        <member name="T:sl.OBJECT_TRACKING_STATE">
            \ingroup Object_group
             <summary>
             Lists the different states of object tracking.
             </summary>
        </member>
        <member name="F:sl.OBJECT_TRACKING_STATE.OFF">
            <summary>
            The tracking is not yet initialized.
            \n The object id is not usable.
            </summary>
        </member>
        <member name="F:sl.OBJECT_TRACKING_STATE.OK">
            <summary>
            The object is tracked.
            </summary>
        </member>
        <member name="F:sl.OBJECT_TRACKING_STATE.SEARCHING">
            <summary>
            The object could not be detected in the image and is potentially occluded.
            \n The trajectory is estimated.
            </summary>
        </member>
        <member name="F:sl.OBJECT_TRACKING_STATE.TERMINATE">
            <summary>
            This is the last searching state of the track.
            \n The track will be deleted in the next sl.Camera.RetrieveObjects().
            </summary>
        </member>
        <member name="T:sl.OBJECT_ACTION_STATE">
            \ingroup Object_group
             <summary>
             Lists the different states of an object's actions.
             </summary>
        </member>
        <member name="F:sl.OBJECT_ACTION_STATE.IDLE">
            <summary>
            The object is staying static.
            </summary>
        </member>
        <member name="F:sl.OBJECT_ACTION_STATE.MOVING">
            <summary>
            The object is moving.
            </summary>
        </member>
        <member name="T:sl.OBJECT_DETECTION_MODEL">
            \ingroup Object_group
             <summary>
             Lists available models for the object detection module.
             </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_FAST">
            <summary>
            Any objects, bounding box based.
            </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_MEDIUM">
            <summary>
            Any objects, bounding box based, compromise between accuracy and speed.
            </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_ACCURATE">
            <summary>
            Any objects, bounding box based, more accurate but slower than the base model.
            </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.PERSON_HEAD_BOX_FAST">
            <summary>
            Bounding box detector specialized in person heads particularly well suited for crowded environments.
            The person localization is also improved.
            </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.PERSON_HEAD_BOX_ACCURATE">
            <summary>
            Bounding box detector specialized in person heads, particularly well suited for crowded environments.
            The person localization is also improved, more accurate but slower than the base model.
            </summary>
        </member>
        <member name="F:sl.OBJECT_DETECTION_MODEL.CUSTOM_BOX_OBJECTS">
            <summary>
            For external inference, using your own custom model and/or frameworks.
            This mode disables the internal inference engine, the 2D bounding box detection must be provided.
            </summary>
        </member>
        <member name="T:sl.BODY_TRACKING_MODEL">
            \ingroup Body_group
             <summary>
             Lists available models for the body tracking module.
             </summary>
        </member>
        <member name="F:sl.BODY_TRACKING_MODEL.HUMAN_BODY_FAST">
            <summary>
            Keypoints based, specific to human skeleton, real time performance even on Jetson or low end GPU cards.
            </summary>
        </member>
        <member name="F:sl.BODY_TRACKING_MODEL.HUMAN_BODY_MEDIUM">
            <summary>
            Keypoints based, specific to human skeleton, compromise between accuracy and speed.
            </summary>
        </member>
        <member name="F:sl.BODY_TRACKING_MODEL.HUMAN_BODY_ACCURATE">
            <summary>
            Keypoints based, specific to human skeleton, state of the art accuracy, requires powerful GPU.
            </summary>
        </member>
        <member name="T:sl.AI_MODELS">
            <summary>
            Lists available  AI models.
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.MULTI_CLASS_DETECTION">
            <summary>
            Related to sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_FAST
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.MULTI_CLASS_MEDIUM_DETECTION">
            <summary>
            Related to sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_MEDIUM
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.MULTI_CLASS_ACCURATE_DETECTION">
            <summary>
            Related to sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_ACCURATE
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_FAST_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_FAST
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_MEDIUM_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_MEDIUM
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_ACCURATE_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_ACCURATE
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_38_FAST_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_FAST
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_38_MEDIUM_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_MEDIUM
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.HUMAN_BODY_38_ACCURATE_DETECTION">
            <summary>
            Related to sl.BODY_TRACKING_MODEL.HUMAN_BODY_ACCURATE
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.PERSON_HEAD_DETECTION">
            <summary>
            Related to sl.OBJECT_DETECTION_MODEL.PERSON_HEAD_BOX_FAST
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.PERSON_HEAD_ACCURATE_DETECTION">
            <summary>
            Related to sl.OBJECT_DETECTION_MODEL.PERSON_HEAD_BOX_ACCURATE
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.REID_ASSOCIATION">
            <summary>
            Related to sl.BatchParameters.enable
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.NEURAL_DEPTH">
            <summary>
            Related to sl.DEPTH_MODE.NEURAL
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.NEURAL_PLUS_DEPTH">
            <summary>
            Related to sl.DEPTH_MODE.NEURAL_PLUS
            </summary>
        </member>
        <member name="F:sl.AI_MODELS.LAST">
            @cond SHOWHIDDEN
        </member>
        <member name="T:sl.OBJECT_FILTERING_MODE">
            <summary>
            Lists supported bounding box preprocessing.
            </summary>
        </member>
        <member name="F:sl.OBJECT_FILTERING_MODE.NONE">
            <summary>
            The ZED SDK will not apply any preprocessing to the detected objects.
            </summary>
        </member>
        <member name="F:sl.OBJECT_FILTERING_MODE.NMS3D">
            <summary>
            The ZED SDK will remove objects that are in the same 3D position as an already tracked object (independent of class id).
            </summary>
        </member>
        <member name="F:sl.OBJECT_FILTERING_MODE.NMS3D_PER_CLASS">
            <summary>
            The ZED SDK will remove objects that are in the same 3D position as an already tracked object of the same class id.
            </summary>
        </member>
        <member name="T:sl.BODY_18_PARTS">
            \ingroup Body_group
             <summary>
             Semantic of human body parts and order of \ref sl.BodyData.keypoints for \ref sl.BODY_FORMAT.BODY_18.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.NECK" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.RIGHT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LEFT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_18_PARTS.LAST" -->
        <member name="T:sl.BODY_34_PARTS">
            \ingroup Body_group
             <summary>
             Semantic of human body parts and order of \ref sl.BodyData.keypoints for \ref sl.BODY_FORMAT.BODY_34.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.NAVAL_SPINE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.CHEST_SPINE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.NECK" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_CLAVICLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_HAND" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_HANDTIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_THUMB" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_CLAVICLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_HAND" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_HANDTIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_THUMB" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_FOOT" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_FOOT" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.HEAD" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.NOSE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LEFT_HEEL" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.RIGHT_HEEL" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_34_PARTS.LAST" -->
        <member name="T:sl.BODY_38_PARTS">
            \ingroup Body_group
             <summary>
             Semantic of human body parts and order of \ref sl.BodyData.keypoints for \ref sl.BODY_FORMAT.BODY_38.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.SPINE_1" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.SPINE_2" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.SPINE_3" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.NECK" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.NOSE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_EYE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_EAR" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_CLAVICLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_CLAVICLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_SHOULDER" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_ELBOW" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_WRIST" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HIP" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_KNEE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_ANKLE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_BIG_TOE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_BIG_TOE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_SMALL_TOE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_SMALL_TOE" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HEEL" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HEEL" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HAND_THUMB_4" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HAND_THUMB_4" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HAND_INDEX_1" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HAND_INDEX_1" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HAND_MIDDLE_4" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HAND_MIDDLE_4" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LEFT_HAND_PINKY_1" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.RIGHT_HAND_PINKY_1" -->
        <!-- Badly formed XML comment ignored for member "F:sl.BODY_38_PARTS.LAST" -->
        <member name="T:sl.ObjectsBatch">
            \ingroup Object_group
             <summary>
             Class containing batched data of a detected objects from the object detection module.
             </summary>
             This class can be used to store trajectories.
        </member>
        <member name="F:sl.ObjectsBatch.numData">
            <summary>
            Number of objects in the sl.ObjectsBatch.
            </summary>
            Use this to iterate through the top of \ref positions / \ref velocities / \ref boundingBoxes / etc.
            \note Objects with greater indexes are empty.
        </member>
        <member name="F:sl.ObjectsBatch.id">
            <summary>
            Id of the batch.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.label">
            <summary>
            Objects class/category to identify the object type.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.sublabel">
            <summary>
            Objects sub-class/sub-category to identify the object type.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.trackingState">
            <summary>
            Objects tracking state.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.positions">
            <summary>
            Array of positions for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.positionCovariances">
            <summary>
            Array of positions' covariances for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.velocities">
            <summary>
            Array of 3D velocities for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.timestamps">
            <summary>
            Array of timestamps for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.boundingBoxes">
            <summary>
            Array of 3D bounding boxes for each object.
            \note They are defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \code
               1 ------ 2
              /        /|
             0 ------ 3 |
             | Object | 6
             |        |/
             4 ------ 7
            \endcode
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.boundingBoxes2D">
            <summary>
            Array of 2D bounding boxes for each object.
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \code
            A ------ B
            | Object |
            D ------ C
            \endcode
        </member>
        <member name="F:sl.ObjectsBatch.confidences">
            <summary>
            Array of confidences for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.actionStates">
            <summary>
            Array of action states for each object.
            </summary>
        </member>
        <member name="F:sl.ObjectsBatch.headBoundingBoxes2D">
            <summary>
            Array of 2D bounding box of the head for each object (person).
            </summary>
            \note Expressed in pixels on the original image resolution, ```[0, 0]``` is the top left corner.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="F:sl.ObjectsBatch.headBoundingBoxes">
            <summary>
            Array of 3D bounding box of the head for each object (person).
            </summary>
            \note They are defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="F:sl.ObjectsBatch.headPositions">
            <summary>
            Array of 3D centroid of the head for each object (person).
            </summary>
            \note They are defined in sl.InitParameters.coordinateUnits and expressed in sl.RuntimeParameters.measure3DReferenceFrame.
            \warning Not available with [sl.OBJECT_DETECTION_MODEL.MULTI_CLASS_BOX_XXX](\ref OBJECT_DETECTION_MODEL).
        </member>
        <member name="T:sl.FUSION_ERROR_CODE">
            \ingroup Fusion_group
            <summary>
            Lists the types of error that can be raised by the Fusion.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.GNSS_DATA_COVARIANCE_MUST_VARY">
            <summary>
            Ingested covariance data must vary between ingest.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.BODY_FORMAT_MISMATCH">
            <summary>
            The senders are using different body formats.
            \n Consider changing them.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.MODULE_NOT_ENABLED">
            <summary>
            The following module was not enabled.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.SOURCE_MISMATCH">
            <summary>
            Some sources are provided by SVO and others by LIVE stream.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.CONNECTION_TIMED_OUT">
            <summary>
            Connection timed out. Unable to reach the sender.
            \n Verify the sender's IP/port.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.MEMORY_ALREADY_USED">
            <summary>
            Intra-process shared memory allocation issue.
            \n Multiple connections to the same data.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.INVALID_IP_ADDRESS">
            <summary>
            The provided IP address format is incorrect.
            \n Please provide the IP in the format 'a.b.c.d', where (a, b, c, d) are numbers between 0 and 255.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.FAILURE">
            <summary>
            Standard code for unsuccessful behavior.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.SUCCESS">
            <summary>
            Standard code for successful behavior.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.FUSION_INCONSISTENT_FPS">
            <summary>
            Significant differences observed between sender's FPS.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.FPS_TOO_LOW">
            <summary>
            At least one sender has an FPS lower than 10 FPS.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.INVALID_TIMESTAMP">
            <summary>
            Problem detected with the ingested timestamp.
            \n Sample data will be ignored.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.INVALID_COVARIANCE">
            <summary>
            Problem detected with the ingested covariance.
            \n Sample data will be ignored.
            </summary>
        </member>
        <member name="F:sl.FUSION_ERROR_CODE.NO_NEW_DATA_AVAILABLE">
            <summary>
            All data from all sources has been consumed.
            \n No new data is available for processing.
            </summary>
        </member>
        <member name="T:sl.SENDER_ERROR_CODE">
            \ingroup Fusion_group
            <summary>
            Lists the types of error that can be raised during the Fusion by senders.
            </summary>
        </member>
        <member name="F:sl.SENDER_ERROR_CODE.DISCONNECTED">
            <summary>
            The sender has been disconnected.
            </summary>
        </member>
        <member name="F:sl.SENDER_ERROR_CODE.SUCCESS">
            <summary>
             Standard code for successful behavior.
            </summary>
        </member>
        <member name="F:sl.SENDER_ERROR_CODE.GRAB_ERROR">
            <summary>
            The sender encountered a grab error.
            </summary>
        </member>
        <member name="F:sl.SENDER_ERROR_CODE.INCONSISTENT_FPS">
            <summary>
            The sender does not run with a constant frame rate.
            </summary>
        </member>
        <member name="F:sl.SENDER_ERROR_CODE.FPS_TOO_LOW">
            <summary>
            The frame rate of the sender is lower than 10 FPS.
            </summary>
        </member>
        <member name="T:sl.InitFusionParameters">
            \ingroup Fusion_group
            <summary>
            Holds the options used to initialize the \ref Fusion object.
            </summary>
        </member>
        <member name="F:sl.InitFusionParameters.coordinateUnits">
            <summary>
            This parameter allows you to select the unit to be used for all metric values of the SDK (depth, point cloud, tracking, mesh, and others).
            Default : \ref UNIT "UNIT::MILLIMETER"
            </summary>
        </member>
        <member name="F:sl.InitFusionParameters.coordinateSystem">
            <summary>
            Positional tracking, point clouds and many other features require a given \ref COORDINATE_SYSTEM to be used as reference.
            This parameter allows you to select the \ref COORDINATE_SYSTEM used by the \ref Camera to return its measures.
            \n This defines the order and the direction of the axis of the coordinate system.
            \n Default : \ref COORDINATE_SYSTEM "COORDINATE_SYSTEM::IMAGE"
            </summary>
        </member>
        <member name="F:sl.InitFusionParameters.outputPerformanceMetrics">
            <summary>
            It allows users to extract some stats of the Fusion API like drop frame of each camera, latency, etc...
            </summary>
        </member>
        <member name="F:sl.InitFusionParameters.verbose">
            <summary>
            Enable the verbosity mode of the SDK.
            </summary>
        </member>
        <member name="F:sl.InitFusionParameters.timeoutPeriodsNumber">
            <summary>
            If specified change the number of period necessary for a source to go in timeout without data. For example, if you set this to 5
            then, if any source do not receive data during 5 period, these sources will go to timeout and will be ignored.	    /// if any source does not receive data during 5 periods, these sources will go into timeout and will be ignored.
            </summary>
        </member>
        <member name="T:sl.COMM_TYPE">
            \ingroup Fusion_group
            <summary>
            Lists the different types of communications available for Fusion module.
            </summary>
        </member>
        <member name="F:sl.COMM_TYPE.LOCAL_NETWORK">
            <summary>
            The sender and receiver are on the same local network and communicate by RTP.
            \n The communication can be affected by the local network load.
            </summary>
        </member>
        <member name="F:sl.COMM_TYPE.INTRA_PROCESS">
            <summary>
            Both sender and receiver are declared by the same process and can be in different threads.
            \n This type of communication is optimized.
            </summary>
        </member>
        <member name="T:sl.CommunicationParameters">
            \ingroup Fusion_group
            <summary>
            Holds the communication parameter to configure the connection between senders and receiver
            </summary>
        </member>
        <member name="F:sl.CommunicationParameters.communicationType">
            <summary>
            Type of communication
            </summary>
        </member>
        <member name="F:sl.CommunicationParameters.ipPort">
            <summary>
            The comm port used for streaming the data
            </summary>
        </member>
        <member name="F:sl.CommunicationParameters.ipAdd">
            <summary>
            The IP address of the sender
            </summary>
        </member>
        <member name="T:sl.FusionConfiguration">
            \ingroup Fusion_group
            <summary>
            Stores the Fusion configuration, can be read from /write to a Json file.
            </summary>
        </member>
        <member name="F:sl.FusionConfiguration.serialnumber">
            <summary>
            The serial number of the used ZED camera.
            </summary>
        </member>
        <member name="F:sl.FusionConfiguration.commParam">
            <summary>
            The communication parameters to connect this camera to the Fusion.
            </summary>
        </member>
        <member name="F:sl.FusionConfiguration.position">
            <summary>
            The WORLD position of the camera for Fusion.
            </summary>
        </member>
        <member name="F:sl.FusionConfiguration.rotation">
            <summary>
            The WORLD rotation of the camera for Fusion.
            </summary>
        </member>
        <member name="F:sl.FusionConfiguration.inputType">
            <summary>
            The input type for the current camera.
            </summary>
        </member>
        <member name="T:sl.BodyTrackingFusionParameters">
            \ingroup Fusion_group
            <summary>
            Holds the options used to initialize the body tracking module of the \ref Fusion.
            </summary>
        </member>
        <member name="F:sl.BodyTrackingFusionParameters.enableTracking">
             <summary>
             Defines if the object detection will track objects across images flow.
            
             Default: true
             </summary>
        </member>
        <member name="F:sl.BodyTrackingFusionParameters.enableBodyFitting">
             <summary>
             Defines if the body fitting will be applied.
            
             Default: false
             \note If you enable it and the camera provides data as BODY_18 the fused body format will be BODY_34.
             </summary>
        </member>
        <member name="T:sl.BodyTrackingFusionRuntimeParameters">
            \ingroup Fusion_group
            <summary>
            Holds the options used to change the behavior of the body tracking module at runtime.
            </summary>
        </member>
        <member name="F:sl.BodyTrackingFusionRuntimeParameters.skeletonMinimumAllowedKeypoints">
             <summary>
             If the fused skeleton has less than skeleton_minimum_allowed_keypoints keypoints, it will be discarded.
            
             Default: -1.
             </summary>
        </member>
        <member name="F:sl.BodyTrackingFusionRuntimeParameters.skeletonMinimumAllowedCameras">
             <summary>
             If a skeleton was detected in less than skeleton_minimum_allowed_camera cameras, it will be discarded.
            
             Default: -1.
             </summary>
        </member>
        <member name="F:sl.BodyTrackingFusionRuntimeParameters.skeletonSmoothing">
             <summary>
             This value controls the smoothing of the tracked or fitted fused skeleton.
            
             It is ranged from 0 (low smoothing) and 1 (high smoothing).
             \n Default: 0.
             </summary>
        </member>
        <member name="T:sl.CameraIdentifier">
            \ingroup Fusion_group
            <summary>
            Used to identify a specific camera in the Fusion API
            </summary>
        </member>
        <member name="F:sl.CameraIdentifier.sn">
            <summary>
            Serial Number of the camera.
            </summary>
        </member>
        <member name="T:sl.CameraMetrics">
            \ingroup Fusion_group
            <summary>
            Holds the metrics of a sender in the fusion process.
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.receivedFps">
            <summary>
            FPS of the received data.
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.receivedLatency">
            <summary>
            Latency (in seconds) of the received data.
            Timestamp difference between the time when the data are sent and the time they are received (mostly introduced when using the local network workflow).
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.syncedLatency">
            <summary>
            Latency (in seconds) after Fusion synchronization.
            Difference between the timestamp of the data received and the timestamp at the end of the Fusion synchronization.
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.isPresent">
            <summary>
            Is set to false if no data in this batch of metrics.
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.ratioDetection">
            <summary>
            Skeleton detection percent during the last second.
            Number of frames with at least one detection / number of frames, over the last second.
            A low value means few detections occured lately for this sender.
            </summary>
        </member>
        <member name="F:sl.CameraMetrics.deltaTs">
            <summary>
            Average data acquisition timestamp difference.
            Average standard deviation of sender's period since the start.
            </summary>
        </member>
        <member name="T:sl.FusionMetrics">
            \ingroup Fusion_group
            <summary>
            Holds the metrics of the fusion process.
            </summary>
        </member>
        <member name="F:sl.FusionMetrics.meanCameraFused">
            <summary>
            Mean number of camera that provides data during the past second.
            </summary>
        </member>
        <member name="F:sl.FusionMetrics.meanStdevBetweenCamera">
            <summary>
            Standard deviation of the data timestamp fused, the lower the better.
            </summary>
        </member>
        <member name="F:sl.FusionMetrics.cameraIndividualStats">
            <summary>
            Sender metrics.
            </summary>
        </member>
        <member name="T:sl.GNSS_FUSION_STATUS">
            \ingroup Fusion_group
            <summary>
            Lists the different states of the GNSS fusion.
            </summary>
        </member>
        <member name="F:sl.GNSS_FUSION_STATUS.OK">
            <summary>
            The GNSS fusion module is calibrated and working successfully.
            </summary>
        </member>
        <member name="F:sl.GNSS_FUSION_STATUS.OFF">
            <summary>
            The GNSS fusion module is not enabled.
            </summary>
        </member>
        <member name="F:sl.GNSS_FUSION_STATUS.CALIBRATION_IN_PROGRESS">
            <summary>
            Calibration of the GNSS/VIO fusion module is in progress.
            </summary>
        </member>
        <member name="F:sl.GNSS_FUSION_STATUS.RECALIBRATION_IN_PROGRESS">
            <summary>
            Re-alignment of GNSS/VIO data is in progress, leading to potentially inaccurate global position
            </summary>
        </member>
        <member name="T:sl.FusedPositionalTrackingStatus">
            <summary>
            Class containing the overall position fusion status
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.odometryStatus">
            <summary>
            Represents the current state of Visual-Inertial Odometry (VIO) tracking between the previous frame and the current frame.
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.spatialMemoryStatus">
            <summary>
            Represents the current state of camera tracking in the global map.
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.gnssStatus">
            <summary>
            Represents the current state of GNSS.
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.gnssMode">
            <summary>
            Represents the current mode of GNSS.
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.gnssFusionStatus">
            <summary>
            Represents the current state of GNSS fusion for global localization.
            </summary>
        </member>
        <member name="F:sl.FusedPositionalTrackingStatus.trackingFusionStatus">
            <summary>
            Represents the current state of positional tracking fusion.
            </summary>
        </member>
        <member name="T:sl.GNSS_STATUS">
                 \class GNSS_STATUS
                 \ingroup Sensors_group
                 \brief Class representing the fix quality of GNSS signal.
        </member>
        <member name="F:sl.GNSS_STATUS.UNKNOWN">
            <summary>
            No GNSS fix data is available.
            </summary>
        </member>
        <member name="F:sl.GNSS_STATUS.SINGLE">
            <summary>
            Single Point Positioning.
            </summary>
        </member>
        <member name="F:sl.GNSS_STATUS.DGNSS">
            <summary>
            Differential GNSS.
            </summary>
        </member>
        <member name="F:sl.GNSS_STATUS.RTK_FIX">
            <summary>
            Real-Time Kinematic (RTK) GNSS fix in fixed mode.
            </summary>
        </member>
        <member name="F:sl.GNSS_STATUS.RTK_FLOAT">
            <summary>
            Real-Time Kinematic (RTK) GNSS fix in float mode. 
            </summary>
        </member>
        <member name="F:sl.GNSS_STATUS.PPS">
            <summary>
            Precise Positioning Service.
            </summary>
        </member>
        <member name="F:sl.GNSS_MODE.UNKNOWN">
            <summary>
             No GNSS fix data is available. 
            </summary>
        </member>
        <member name="F:sl.GNSS_MODE.NO_FIX">
            <summary>
            No GNSS fix is available.
            </summary>
        </member>
        <member name="F:sl.GNSS_MODE.FIX_2D">
            <summary>
            2D GNSS fix, providing latitude and longitude coordinates but without altitude information.
            </summary>
        </member>
        <member name="F:sl.GNSS_MODE.FIX_3D">
            <summary>
            3D GNSS fix, providing latitude, longitude, and altitude coordinates. 
            </summary>
        </member>
        <member name="T:sl.GNSSData">
            \ingroup Sensor_group
            <summary>
            Structure containing GNSS data to be used for positional tracking as prior.
            </summary>
        </member>
        <member name="F:sl.GNSSData.longitude">
            <summary>
            Longitude in radian.
            </summary>
        </member>
        <member name="F:sl.GNSSData.latitude">
            <summary>
            Latitude in radian.
            </summary>
        </member>
        <member name="F:sl.GNSSData.altitude">
            <summary>
            Altitude in meter.
            </summary>
        </member>
        <member name="F:sl.GNSSData.ts">
            <summary>
            Timestamp of the GNSS position in nanoseconds (must be aligned with the camera time reference).
            </summary>
        </member>
        <member name="F:sl.GNSSData.positionCovariance">
            <summary>
            Covariance of the position in meter (must be expressed in the ENU coordinate system).
            </summary>
            For eph, epv GNSS sensors, set it as follow: ```{eph*eph, 0, 0, 0, eph*eph, 0, 0, 0, epv*epv}```.
        </member>
        <member name="F:sl.GNSSData.longitudeStd">
            <summary>
            Longitude standard deviation.
            </summary>
        </member>
        <member name="F:sl.GNSSData.latitudeStd">
            <summary>
            Latitude standard deviation.
            </summary>
        </member>
        <member name="F:sl.GNSSData.altitudeStd">
            <summary>
            Altitude standard deviation.
            </summary>
        </member>
        <member name="T:sl.GeoPose">
            \ingroup Fusion_group
            <summary>
            Holds Geo reference position.
            </summary>
        </member>
        <member name="F:sl.GeoPose.translation">
            <summary>
            The translation defining the pose in ENU.
            </summary>
        </member>
        <member name="F:sl.GeoPose.rotation">
            <summary>
            The rotation defining the pose in ENU.
            </summary>
        </member>
        <member name="F:sl.GeoPose.poseCovariance">
            <summary>
            The pose covariance in ENU.
            </summary>
        </member>
        <member name="F:sl.GeoPose.horizontalAccuracy">
            <summary>
            The horizontal accuracy.
            </summary>
        </member>
        <member name="F:sl.GeoPose.verticalAccuracy">
            <summary>
            The vertical accuracy.
            </summary>
        </member>
        <member name="F:sl.GeoPose.latCoordinate">
            <summary>
            The latitude, longitude, altitude.
            </summary>
        </member>
        <member name="F:sl.GeoPose.heading">
            <summary>
            The heading.
            </summary>
        </member>
        <member name="F:sl.GeoPose.timestamp">
            <summary>
            The timestamp of GeoPose.
            </summary>
        </member>
        <member name="T:sl.ECEF">
            \ingroup Fusion_group
            <summary>
            Represents a world position in ECEF format.
            </summary>
        </member>
        <member name="F:sl.ECEF.x">
            <summary>
            x coordinate of ECEF.
            </summary>
        </member>
        <member name="F:sl.ECEF.y">
            <summary>
            y coordinate of ECEF.
            </summary>
        </member>
        <member name="F:sl.ECEF.z">
            <summary>
            z coordinate of ECEF.
            </summary>
        </member>
        <member name="T:sl.LatLng">
            \ingroup Fusion_group
            <summary>
            Represents a world position in LatLng format.
            </summary>
        </member>
        <member name="F:sl.LatLng.latitude">
            <summary>
            Latitude in radian.
            </summary>
        </member>
        <member name="F:sl.LatLng.longitude">
            <summary>
            Longitude in radian.
            </summary>
        </member>
        <member name="F:sl.LatLng.altitude">
            <summary>
            Altitude in meter.
            </summary>
        </member>
        <member name="T:sl.UTM">
            \ingroup Fusion_group
            <summary>
            Represents a world position in UTM format.
            </summary>
        </member>
        <member name="F:sl.UTM.northing">
            <summary>
            Northing coordinate.
            </summary>
        </member>
        <member name="F:sl.UTM.easting">
            <summary>
            Easting coordinate.
            </summary>
        </member>
        <member name="F:sl.UTM.gamma">
            <summary>
            Gamma coordinate.
            </summary>
        </member>
        <member name="F:sl.UTM.UTMZone">
            <summary>
            UTMZone of the coordinate.
            </summary>
        </member>
        <member name="T:sl.GNSSCalibrationParameters">
            \ingroup Fusion_group
            <summary>
            Holds the options used for calibrating GNSS / VIO.
            </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.targetYawUncertainty">
            <summary>
            This parameter defines the target yaw uncertainty at which the calibration process between GNSS and VIO concludes.
            The unit of this parameter is in radian.
            
            Default: 0.1 radians
            </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.enableTranslationUncertaintyTarget">
             <summary>
             When this parameter is enabled (set to true), the calibration process between GNSS and VIO accounts for the uncertainty in the determined translation, thereby facilitating the calibration termination. 
             The maximum allowable uncertainty is controlled by the 'target_translation_uncertainty' parameter.
            
             Default: false
             </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.targetTranslationUncertainty">
             <summary>
             This parameter defines the target translation uncertainty at which the calibration process between GNSS and VIO concludes.
            
             Default: 10e-2 (10 centimeters)
             </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.enableReinitialization">
            <summary>
            This parameter determines whether reinitialization should be performed between GNSS and VIO fusion when a significant disparity is detected between GNSS data and the current fusion data.
            It becomes particularly crucial during prolonged GNSS signal loss scenarios.
            
            Default: true
            </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.gnssVioReinitThreshold">
            <summary>
            This parameter determines the threshold for GNSS/VIO reinitialization.
            If the fused position deviates beyond out of the region defined by the product of the GNSS covariance and the gnss_vio_reinit_threshold, a reinitialization will be triggered.
            
            Default: 5
            </summary>
        </member>
        <member name="F:sl.GNSSCalibrationParameters.enableRollingCalibration">
             <summary>
             If this parameter is set to true, the fusion algorithm will used a rough VIO / GNSS calibration at first and then refine it.
             This allow you to quickly get a fused position.
            
              Default: true
             </summary>     
        </member>
        <member name="F:sl.GNSSCalibrationParameters.gnssAntennaPosition">
            <summary>
            Define a transform between the GNSS antenna and the camera system for the VIO / GNSS calibration.
            Default value is [0,0,0], this position can be refined by the calibration if enabled
            </summary>
        </member>
        <member name="T:sl.PositionalTrackingFusionParameters">
            \ingroup Fusion_group
            <summary>
            Holds the options used for initializing the positional tracking fusion module.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingFusionParameters.enableGNSSFusion">
            <summary>
            This attribute is responsible for enabling or not GNSS positional tracking fusion.
            </summary>
        </member>
        <member name="F:sl.PositionalTrackingFusionParameters.gnssCalibrationParameters">
            <summary>
            Control the VIO / GNSS calibration process.
            </summary>
        </member>
        <member name="M:sl.PositionalTrackingFusionParameters.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:sl.char2">
            <summary>
            Represents a 2D vector of uchars for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="T:sl.char3">
            <summary>
            Represents a 3D vector of uchars for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="T:sl.char4">
            <summary>
            Represents a 4D vector of uchars for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="T:sl.float2">
            <summary>
            Represents a 2D vector of floats for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="F:sl.float2.x">
            <summary>
            the x component of the float2.
            </summary>
        </member>
        <member name="F:sl.float2.y">
            <summary>
            the y component of the float2.
            </summary>
        </member>
        <member name="M:sl.float2.#ctor(System.Single,System.Single)">
            <summary>
            Constructor : Creates a float2 whose elements have the specified values.
            </summary>
            <param name="m_x">value to assign to the x field</param>
            <param name="m_y">value to assign to the y field</param>
        </member>
        <member name="T:sl.float3">
            <summary>
            Represents a 3D vector of floats for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="F:sl.float3.x">
            <summary>
            The x component of the float3.
            </summary>
        </member>
        <member name="F:sl.float3.y">
            <summary>
            the y component of the float3.
            </summary>
        </member>
        <member name="F:sl.float3.z">
            <summary>
            the z component of the float3.
            </summary>
        </member>
        <member name="M:sl.float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor : Creates a float3 whose elements have the specified values.
            </summary>
            <param name="m_x">value to assign to the x field.</param>
            <param name="m_y">value to assign to the y field.</param>
            <param name="m_z">value to assign to the z field</param>
        </member>
        <member name="M:sl.float3.add(sl.float3)">
            <summary>
            Returns the addition of two float3
            </summary>
            <param name="b"></param>
            <returns>The second vector to add.</returns>
        </member>
        <member name="M:sl.float3.sub(sl.float3)">
            <summary>
            Returns the substraction of two float3
            </summary>
            <param name="b">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:sl.float3.divide(System.Single)">
            <summary>
            Divides the float3 by a specified scalar value
            </summary>
            <param name="a">The scalar value</param>
        </member>
        <member name="M:sl.float3.multiply(System.Single)">
            <summary>
            Multiplies the float3 by a specified scalar value
            </summary>
            <param name="a">The scalar value</param>
            <returns></returns>
        </member>
        <member name="M:sl.float3.norm">
            <summary>
            Returns the length of the float3 
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.float3.dot(sl.float3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="b">The second vector</param>
            <returns></returns>
        </member>
        <member name="M:sl.float3.cross(sl.float3)">
            <summary>
            Returns the cross product of two vectors
            </summary>
            <param name="b">The second vector</param>
            <returns></returns>
        </member>
        <member name="T:sl.float4">
            <summary>
            Represents a 4D vector of floats for use on both the CPU and GPU. 
            </summary>
        </member>
        <member name="F:sl.float4.x">
            <summary>
            The x component of the float4.
            </summary>
        </member>
        <member name="F:sl.float4.y">
            <summary>
            the y component of the float4.
            </summary>
        </member>
        <member name="F:sl.float4.z">
            <summary>
            the z component of the float4.
            </summary>
        </member>
        <member name="F:sl.float4.w">
            <summary>
            The w component of the float4.
            </summary>
        </member>
        <member name="T:sl.MAT_TYPE">
            \ingroup Core_group
            <summary>
            Lists available sl.Mat formats.
            \note sl.Mat type depends on image or measure type.
            \note For the dependencies, see sl.VIEW and sl.MEASURE.
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_32F_C1">
            <summary>
            1-channel matrix of float
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_32F_C2">
            <summary>
            2-channel matrix of float
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_32F_C3">
            <summary>
            3-channel matrix of float
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_32F_C4">
            <summary>
            4-channel matrix of float
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_8U_C1">
            <summary>
            1-channel matrix of unsigned char
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_8U_C2">
            <summary>
            2-channel matrix of unsigned char
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_8U_C3">
            <summary>
            3-channel matrix of unsigned char
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_8U_C4">
            <summary>
            4-channel matrix of unsigned char
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_16U_C1">
            <summary>
            1-channel matrix of unsigned short
            </summary>
        </member>
        <member name="F:sl.MAT_TYPE.MAT_S8_C4">
            <summary>
            4-channel matrix of signed char
            </summary>
        </member>
        <member name="T:sl.COPY_TYPE">
            \ingroup Core_group
            <summary>
            Lists available copy operation on sl.Mat.
            </summary>
        </member>
        <member name="F:sl.COPY_TYPE.CPU_CPU">
            <summary>
            Copy data from CPU to CPU.
            </summary>
        </member>
        <member name="F:sl.COPY_TYPE.CPU_GPU">
            <summary>
            Copy data from CPU to GPU.
            </summary>
        </member>
        <member name="F:sl.COPY_TYPE.GPU_GPU">
            <summary>
            Copy data from GPU to GPU.
            </summary>
        </member>
        <member name="F:sl.COPY_TYPE.GPU_CPU">
            <summary>
            Copy data from GPU to CPU.
            </summary>
        </member>
        <member name="T:sl.MEM">
            \ingroup Core_group
            <summary>
            Lists available memory type.
            </summary>
        </member>
        <member name="F:sl.MEM.CPU">
            <summary>
            Data will be stored on the CPU (processor side).
            </summary>
        </member>
        <member name="F:sl.MEM.GPU">
            <summary>
            Data will be stored on the GPU (graphic card side).
            </summary>
        </member>
        <member name="T:sl.Mat">
            \ingroup Core_group
            <summary>
            Class representing 1 to 4-channel matrix of float or uchar, stored on CPU and/or GPU side.
            </summary>
            This class is defined in a row-major order, meaning that for an image buffer, the rows are stored consecutively from top to bottom.
            \note For more info, read about the ZED SDK C++ class it mirrors:
            <a href="https://www.stereolabs.com/docs/api/classsl_1_1Mat.html">Mat</a>
        </member>
        <member name="F:sl.Mat._matInternalPtr">
            <summary>
            Returns the internal ptr of a Mat. 
            </summary>
        </member>
        <member name="P:sl.Mat.MatPtr">
            <summary>
            Returns the internal ptr of a Mat.
            </summary>
        </member>
        <member name="M:sl.Mat.#ctor">
            <summary>
            Default constructor.
            </summary>
            Creates an empty sl.Mat.
        </member>
        <member name="M:sl.Mat.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            Creates a sl.Mat from an existing internal pointer.
            <param name="ptr">Internal pointer to create the sl.Mat with.</param>
        </member>
        <member name="M:sl.Mat.#ctor(sl.Resolution,sl.MAT_TYPE,sl.MEM)">
            <summary>
            Constructor.
            </summary>
            Creates a sl.Mat with a given sl.Resolution.
            <param name="resolution">Size of the matrix in pixels.</param>
            <param name="type">Type of the matrix. Depends on texture type (see sl.VIEW and sl.MEASURE).</param>
            <param name="mem">Where the buffer will be stored (CPU or GPU memory).
            \n Choose depending on where you'll need to access it from.</param>
        </member>
        <member name="M:sl.Mat.Create(sl.Resolution,sl.MAT_TYPE,sl.MEM)">
            <summary>
            Creates a sl.Mat with a given sl.Resolution.
            </summary>
            <param name="resolution">Size of the matrix in pixels.</param>
            <param name="type">Type of the matrix. Depends on texture type (see sl.VIEW and sl.MEASURE).</param>
            <param name="mem">Where the buffer will be stored (CPU or GPU memory).
            \n Choose depending on where you'll need to access it from.</param>
        </member>
        <member name="M:sl.Mat.Create(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)">
            <summary>
            Creates a Mat with a given width and height.
            </summary>
            <param name="width">Width of the matrix in pixels.</param>
            <param name="height">Height of the matrix in pixels..</param>
            <param name="type">Type of the matrix. Depends on texture type (see sl.VIEW and sl.MEASURE).</param>
            <param name="mem">Where the buffer will be stored (CPU or GPU memory).
            \n Choose depending on where you'll need to access it from.</param>
        </member>
        <member name="M:sl.Mat.IsInit">
            <summary>
            Whether the sl.Mat has been initialized.
            </summary>
        </member>
        <member name="M:sl.Mat.Free(sl.MEM)">
            <summary>
            Frees the memory of the sl.Mat.
            </summary>
            <param name="mem">Whether the sl.Mat is on CPU or GPU memory.</param>
        </member>
        <member name="M:sl.Mat.UpdateCPUFromGPU">
            <summary>
            Copies data from the GPU to the CPU, if possible.
            </summary>
            <returns>sl.ERROR_CODE.SUCCESS if everything went well, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Mat.UpdateGPUFromCPU">
            <summary>
            Copies data from the CPU to the GPU, if possible.
            </summary>
            <returns>sl.ERROR_CODE.SUCCESS if everything went well, sl.ERROR_CODE.FAILURE otherwise.</returns>
        </member>
        <member name="M:sl.Mat.GetInfos">
            <summary>
            Returns the information about the sl::Mat into a string.
            </summary>
            <returns>String containing the sl::Mat information.</returns>
        </member>
        <member name="M:sl.Mat.CopyTo(sl.Mat,sl.COPY_TYPE)">
            <summary>
            Copies data from this sl.Mat to another sl.Mat (deep copy).
            </summary>
            <param name="dest">sl.Mat that the data will be copied to.</param>
            <param name="copyType">The to and from memory types.</param>
            <returns>sl.ERROR_CODE indicating if the copy was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.Read(System.String)">
            <summary>
            Reads an image from a file.
            </summary>
            Supports .png and .jpeg.
            <param name="filePath">Path of the file to read (including the name and extension).</param>
            <returns>sl.ERROR_CODE indicating if the copy was successful, or why it wasn't.</returns>
            \note Only works if sl.Mat has access to sl.MEM.CPU.
        </member>
        <member name="M:sl.Mat.Write(System.String,System.Int32)">
            <summary>
            Writes the sl.Mat into a file as an image.
            </summary>
            <param name="filePath">Path of the file to write in (including the name and extension).</param>
            <param name="compression_level"> Compression level used. Highest value means highest compression (smaller size). Range  [0 - 100].</param>
            <returns>sl.ERROR_CODE indicating if the copy was successful, or why it wasn't.</returns>
            \note Only works if sl.Mat has access to sl.MEM.CPU.
        </member>
        <member name="M:sl.Mat.GetWidth">
            <summary>
            Returns the width of the matrix.
            </summary>
        </member>
        <member name="M:sl.Mat.GetHeight">
            <summary>
            Returns the height of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.GetChannels">
            <summary>
            Returns the number of values stored in one pixel.
            </summary>
        </member>
        <member name="M:sl.Mat.GetPixelBytes">
            <summary>
            Returns the size of one pixel in bytes.
            </summary>
        </member>
        <member name="M:sl.Mat.GetStep(sl.MEM)">
            <summary>
            Returns the memory step in number of elements (size in one pixel row).
            </summary>
        </member>
        <member name="M:sl.Mat.GetStepBytes(sl.MEM)">
            <summary>
            Returns the memory step in bytes (size of one pixel row).
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.GetWidthBytes">
            <summary>
            Returns the size of a row in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.GetMemoryType">
            <summary>
            Returns the type of memory (CPU and/or GPU).
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.IsMemoryOwner">
            <summary>
            Returns whether the sl.Mat is the owner of the memory it accesses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.GetResolution">
            <summary>
            Returns the resolution (width and height) of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Mat.Alloc(System.UInt32,System.UInt32,sl.MAT_TYPE,sl.MEM)">
            <summary>
            Allocates the sl.Mat memory.
            </summary>
            <param name="width">Width of the image/matrix in pixels.</param>
            <param name="height">Height of the image/matrix in pixels.</param>
            <param name="matType">Type of matrix (data type and channels - see sl.MAT_TYPE)</param>
            <param name="mem">Where the buffer will be stored - CPU memory or GPU memory.</param>
        </member>
        <member name="M:sl.Mat.Alloc(sl.Resolution,sl.MAT_TYPE,sl.MEM)">
            <summary>
            Allocates the sl.Mat memory.
            </summary>
            <param name="resolution">Size of the image/matrix in pixels.</param>
            <param name="matType">Type of matrix (data type and channels - see sl.MAT_TYPE)</param>
            <param name="mem">Where the buffer will be stored - CPU memory or GPU memory.</param>
        </member>
        <member name="M:sl.Mat.SetFrom(sl.Mat,sl.COPY_TYPE)">
            <summary>
            Copies data from another sl.Mat into this one (deep copy).
            </summary>
            <param name="src">sl.Mat where the data will be copied from.</param>
            <param name="copyType">Specifies the memory that will be used for the copy.</param>
            <returns>sl.ERROR_CODE (as an int) indicating if the copy was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetPtr(sl.MEM)">
            <summary>
            Returns the CPU or GPU data pointer.
            </summary>
            <param name="mem">Specifies whether you want sl.MEM.CPU or sl.MEM.GPU.</param>
        </member>
        <member name="M:sl.Mat.Clone(sl.Mat)">
            <summary>
            Duplicates a sl.Mat by copying all its data into a new one (deep copy).
            </summary>
            <param name="source">sl.Mat to clone.</param>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,System.Single@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C1.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C2.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C3.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.float4@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C4.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C1.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C2.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C3.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.GetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)">
            <summary>
            Returns the value of a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C4.
            </summary>
            <param name="x">Column of the point to get the value from.</param>
            <param name="y">Row of the point to get the value from.</param>
            <param name="value">Gets filled with the current value.</param>
            <param name="mem">Which memory should be read.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,System.Single@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C1.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.float2@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C2.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.float3@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C3.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.float4,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_32F_C4.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,System.Byte@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C1.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.char2@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C2.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.char3@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C3.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetValue(System.Int32,System.Int32,sl.char4@,sl.MEM)">
            <summary>
            Sets a value to a specific point in the matrix of type sl.MAT_TYPE.MAT_8U_C4.
            </summary>
            <param name="x">Column of the point to set the value.</param>
            <param name="y">Row of the point to set the value.</param>
            <param name="value">Value to which the point will be set.</param>
            <param name="mem">Which memory will be updated.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(System.Single@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_32F_C1 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.float2@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_32F_C2 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.float3@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_32F_C3 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.float4@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_32F_C4 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(System.Byte@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_8U_C1 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.char2@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_8U_C2 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.char3@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_8U_C3 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="M:sl.Mat.SetTo(sl.char4@,sl.MEM)">
            <summary>
            Fills the entire sl.Mat of type sl.MAT_TYPE.MAT_8U_C4 with the given value.
            </summary>
            <param name="value">Value to be copied all over the matrix.</param>
            <param name="mem">Which buffer to fill, CPU and/or GPU.</param>
            <returns>sl.ERROR_CODE indicating if the get was successful, or why it wasn't.</returns>
        </member>
        <member name="T:sl.Fusion">
            \ingroup Fusion_group
            <summary>
            Holds Fusion process data and functions
            </summary>
        </member>
        <member name="F:sl.Fusion.nameDll">
            <summary>
            DLL name, used for extern calls to the wrapper.
            </summary>
        </member>
        <member name="T:sl.Fusion.sl_GNSSCalibrationParameters">
            <summary>
            DLL-friendly version of GNSSCalibrationParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.targetYawUncertainty">
            <summary>
            This parameter defines the target yaw uncertainty at which the calibration process between GNSS and VIO concludes. The unit of this parameter is in radian. By default, the threshold is set at 0.1 radians.
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.enableTranslationUncertaintyTarget">
            <summary>
            When this parameter is enabled (set to true), the calibration process between GNSS and VIO accounts for the uncertainty in the determined translation, thereby facilitating the calibration termination. 
            The maximum allowable uncertainty is controlled by the 'target_translation_uncertainty' parameter.
            By default, it is set to false.
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.targetTranslationUncertainty">
            <summary>
            This parameter defines the target translation uncertainty at which the calibration process between GNSS and VIO terminates. By default, the threshold is set at 10 centimeters (10e-2).
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.enableReinitialization">
            <summary>
            This initialization parameter determines whether reinitialization should be performed between GNSS and VIO fusion when a significant disparity is detected between GNSS data and the current fusion data. 
            It becomes particularly crucial during prolonged GNSS signal loss scenarios.
            By default, it is set to true.
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.gnssVioReinitThreshold">
            <summary>
            This parameter determines the threshold for GNSS/VIO reinitialization. If the fused position deviates beyond the region defined by the product of the GNSS covariance and the gnss_vio_reinit_threshold, a reinitialization will be triggered.
            By default, it is set to 5.
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.enableRollingCalibration">
            <summary>
            If this parameter is set to true, the fusion algorithm will used a rough VIO / GNSS calibration at first and then refine it. This allow you to quickly get a fused position.
            By default, it is set to true.
            </summary>     
        </member>
        <member name="F:sl.Fusion.sl_GNSSCalibrationParameters.gnssAntennaPosition">
            <summary>
            Define a transform between the GNSS antenna and the camera system for the VIO / GNSS calibration.
            Default value is [0,0,0], this position can be refined by the calibration if enabled
            </summary>
        </member>
        <member name="T:sl.Fusion.sl_PositionalTrackingFusionParameters">
            <summary>
            DLL-friendly version of PositionalTrackingFusionParameters (found in ZEDCommon.cs).
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_PositionalTrackingFusionParameters.enableGNSSFusion">
            <summary>
            If the GNSS should be enabled.
            </summary>
        </member>
        <member name="F:sl.Fusion.sl_PositionalTrackingFusionParameters.gnssCalibrationParameters">
            <summary>
            GNSS calibration parameter. Determine target threshold for GNSS / VIO calibration.
            </summary>
        </member>
        <member name="M:sl.Fusion.sl_PositionalTrackingFusionParameters.#ctor(sl.PositionalTrackingFusionParameters)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:sl.Fusion.ReadConfigurationFile(System.Text.StringBuilder,sl.COORDINATE_SYSTEM,sl.UNIT,sl.FusionConfiguration[]@,System.Int32@)">
            <summary>
            Read a Configuration JSON file to configure a fusion process.
            </summary>
            <param name="jsonConfigFileName">The name of the JSON file containing the configuration.</param>
            <param name="coordinateSystem">The COORDINATE_SYSTEM in which you want the World Pose to be in.</param>
            <param name="unit">The UNIT in which you want the World Pose to be in.</param>
            <param name="configs"> An array of \ref FusionConfiguration for all the camera present in the file.</param>
            <param name="nbCameras">Number of cameras</param>
        </member>
        <member name="M:sl.Fusion.GetSenderState(sl.CameraIdentifier@)">
            <summary>
            Returns the state of a connected data sender.
            </summary>
            <param name="uuid">Identifier of the camera.</param>
            <returns>State of the sender </returns>
        </member>
        <member name="M:sl.Fusion.Init(sl.InitFusionParameters@)">
            <summary>
            FusionHandler initialisation. Initializes memory/generic datas
            </summary>
            <param name="initFusionParameters"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.Process">
            <summary>
            processes the fusion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.Subscribe(sl.CameraIdentifier@,System.String,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
             adds a camera to the multi camera handler
            </summary>
            <param name="uuid"></param>
            <param name="jsonConfigFileName"></param>
            <param name="poseTranslation"></param>
            <param name="poseRotation"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.Unsubscribe(sl.CameraIdentifier@)">
            <summary>
            Remove the specified camera from data provider.
            </summary>
            <param name="uuid">The requested camera identifier.</param>
            <returns>FUSION_ERROR_CODE "SUCCESS" if it goes as it should, otherwise it returns an FUSION_ERROR_CODE.</returns>
        </member>
        <member name="M:sl.Fusion.UpdatePose(sl.CameraIdentifier@,System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            updates the camera World pose
            </summary>
            <param name="uuid"></param>
            <param name="poseTranslation"></param>
            <param name="poseRotation"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.RetrieveImage(sl.Mat,sl.CameraIdentifier@,sl.Resolution)">
            <summary>
            Returns the current sl.VIEW.LEFT of the specified camera, the data is synchronized.
            </summary>
            <param name="mat">the CPU BGRA image of the requested camera.</param>
            <param name="uuid">the requested camera identifier.</param>
            <param name="resolution">the requested resolution of the output image, can be lower or equal (default) to the original image resolution.</param>
            <returns>FUSION_ERROR_CODE "SUCCESS" if it goes as it should, otherwise it returns an FUSION_ERROR_CODE.</returns>
        </member>
        <member name="M:sl.Fusion.RetrieveMeasure(sl.Mat,sl.CameraIdentifier@,sl.MEASURE,sl.Resolution)">
            <summary>
            Returns the current measure of the specified camera, the data is synchronized.
            </summary>
            <param name="mat">the CPU data of the requested camera.</param>
            <param name="uuid">the requested camera identifier.</param>
            <param name="type">the requested measure type, by default DEPTH (F32_C1)</param>
            Only MEASURE: DEPTH, XYZ, XYZRGBA, XYZBGRA, XYZARGB, XYZABGR, DEPTH_U16_MM are available.
            <param name="resolution">the requested resolution of the output image, can be lower or equal (default) to the original image resolution.</param>
            <returns>FUSION_ERROR_CODE "SUCCESS" if it goes as it should, otherwise it returns an FUSION_ERROR_CODE.</returns>
        </member>
        <member name="M:sl.Fusion.EnableBodyTracking(sl.BodyTrackingFusionParameters@)">
            <summary>
            enables the body tracking module
            </summary>
            <param name="btfParams"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.DisableBodyTracking">
            <summary>
            disable the body tracking module
            </summary>
        </member>
        <member name="M:sl.Fusion.RetrieveBodies(sl.Bodies@,sl.BodyTrackingFusionRuntimeParameters@,sl.CameraIdentifier)">
            <summary>
            retrieves the body data, can be the fused data (default), or the raw data provided by a specific sender
            </summary>
            <param name="bodies"></param>
            <param name="rtparams"></param>
            <param name="uuid"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetProcessMetrics(sl.FusionMetrics@)">
            <summary>
            gets the metrics of the Fusion process, for the fused data as well as individual camera provider data
            </summary>
            <param name="metrics"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.EnablePositionalTracking(sl.PositionalTrackingFusionParameters@)">
            <summary>
            enables positional tracking module
            </summary>
            <param name="ptfParams"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetPosition(sl.Pose@,sl.REFERENCE_FRAME,sl.UNIT,sl.CameraIdentifier@,sl.POSITION_TYPE)">
            <summary>
            Gets the Fused Position of the camera system
            </summary>
            <param name="pose">contains the camera pose in world position (world position is given by the calibration of the cameras system)</param>
            <param name="referenceFrame">defines the reference from which you want the pose to be expressed. Default : \ref REFERENCE_FRAME "REFERENCE_FRAME::WORLD".</param>
            <param name="coordinateSystem"></param>
            <param name="unit"></param>
            <param name="uuid"></param>
            <param name="retrieveType"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetFusedPositionalTrackingStatus">
            <summary>
            Gets the current status of fused position.
            </summary>
            <returns> The current status of the tracking process.</returns>
        </member>
        <member name="M:sl.Fusion.DisablePositionalTracking">
            <summary>
            Disables the positional tracking 
            </summary>
        </member>
        <member name="M:sl.Fusion.IngestGNSSData(sl.GNSSData@)">
            <summary>
            ingests GNSS data from an external sensor into the fusion module
            </summary>
            <param name="data">the current GNSS data to combine with the current positional tracking data</param>
        </member>
        <member name="M:sl.Fusion.GetCurrentGNSSData(sl.GNSSData@)">
            <summary>
            returns the current GNSS data
            </summary>
            <param name="data">the current GNSS data </param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetGeoPose(sl.GeoPose@)">
            <summary>
            returns the current GeoPose
            </summary>
            <param name="pose">the current GeoPose</param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GeoToCamera(sl.LatLng@,sl.Pose@)">
            <summary>
            Converts latitude / longitude into position in sl::Fusion coordinate system.
            </summary>
            <param name="inLatLng"></param>
            <param name="outPose"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.CameraToGeo(sl.Pose@,sl.GeoPose@)">
            <summary>
            Converts a position in sl::Fusion coordinate system in real world coordinate. 
            </summary>
            <param name="inPose"></param>
            <param name="outGeoPose"></param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetCurrentTimestamp">
            <summary>
            Gets the current timestamp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetCurrentGNSSCalibrationStd(System.Single@,System.Numerics.Vector3@)">
            <summary>
            Get the current calibration uncertainty defined during calibration process
            </summary>
            <param name="yawStd">yaw uncertainty</param>
            <param name="positionStd">position uncertainty</param>
            <returns></returns>
        </member>
        <member name="M:sl.Fusion.GetGeoTrackingCalibration(System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Get the calibration found between VIO and GNSS
            </summary>
            <param name="position">calibration found between VIO and GNSS (Translation)</param>
            <param name="rotation">calibration found between VIO and GNSS (Rotation)</param>
        </member>
    </members>
</doc>
