Imports cv = OpenCvSharp
Public Class HullLine_Basics : Inherits TaskParent
    Dim hulls As New Contour_Hulls
    Public minDistance As Integer = dst2.Width * 0.02
    Public lpList As New List(Of lpData)
    Public Sub New()
        task.gOptions.DebugSlider.Value = 25
        desc = "Find all the lines generated by Contour_Hulls"
    End Sub
    Public Overrides Sub RunAlg(src As cv.Mat)
        hulls.Run(src)
        dst3 = hulls.dst3
        labels(3) = hulls.labels(3)

        lpList.Clear()
        dst2 = dst3.Clone
        Dim maxLines = task.gOptions.DebugSlider.Value * 2
        For Each contour In hulls.contourList
            If contour.hull.Count < 5 Then Continue For

            Dim ptLast As cv.Point = contour.hull(0)

            For Each pt In contour.hull
                Dim lp = New lpData(pt, ptLast)
                If lp.m >= 100000 Then Continue For ' likely just the edge of the image.
                If Math.Abs(lp.m) < 0.0001 Then Continue For ' likely just the edge of the image
                lp.hullMaxDStable = contour.maxDstable
                lpList.Add(lp)
                ptLast = pt
                dst2.Line(lp.p1, lp.p2, task.highlight, task.lineWidth, task.lineType)
                If lpList.Count >= maxLines Then Exit For
            Next
            If lpList.Count >= maxLines Then Exit For
        Next

        labels(2) = CStr(lpList.Count) + " hull lines"
    End Sub
End Class






Public Class HullLine_EdgePoints : Inherits TaskParent
    Dim knn As New KNN_EdgePoints
    Public Sub New()
        desc = "Find the edge points for the current and last frm for the hull lines."
    End Sub
    Public Shared Function EdgePointOffset(lpIn As lpData, offset As Integer) As lpData
        Dim lp = New lpData(lpIn.p1, lpIn.p2)
        If lp.ep1.X <= 1 Then lp.ep1.X += offset
        If lp.ep1.Y <= 1 Then lp.ep1.Y += offset
        If lp.ep2.X <= 1 Then lp.ep2.X += offset
        If lp.ep2.Y <= 1 Then lp.ep2.Y += offset
        If lp.ep1.X >= task.workingRes.Width - 1 Then lp.ep1.X -= offset
        If lp.ep1.Y >= task.workingRes.Height - 1 Then lp.ep1.Y -= offset
        If lp.ep2.X >= task.workingRes.Width - 1 Then lp.ep2.X -= offset
        If lp.ep2.Y >= task.workingRes.Height - 1 Then lp.ep2.Y -= offset
        Return lp
    End Function
    Public Overrides Sub RunAlg(src As cv.Mat)
        dst3 = task.hullLines.dst2
        labels(3) = task.hullLines.labels(3)

        dst2 = src.Clone
        Static lpLast = New List(Of lpData)(task.hullLines.lpList)
        For Each lpIn In task.hullLines.lpList
            Dim lp = EdgePointOffset(lpIn, 1)
            dst2.Circle(New cv.Point(CInt(lp.ep1.X), CInt(lp.ep1.Y)), task.DotSize, task.highlight, -1, task.lineType)
            dst2.Circle(New cv.Point(CInt(lp.ep2.X), CInt(lp.ep2.Y)), task.DotSize, task.highlight, -1, task.lineType)
        Next

        lpLast = New List(Of lpData)(task.hullLines.lpList)
    End Sub
End Class






Public Class HullLine_KNN : Inherits TaskParent
    Dim hullLines As New HullLine_Basics
    Dim knn As New KNN_EdgePoints
    Public Sub New()
        desc = "Find the edge points for the current and last frm for the hull lines."
    End Sub
    Public Overrides Sub RunAlg(src As cv.Mat)
        hullLines.Run(src)
        dst3 = hullLines.dst2
        labels(3) = hullLines.labels(3)

        knn.lpInput = hullLines.lpList
        knn.Run(src)

        dst2 = src.Clone
        Static lpLast = New List(Of lpData)(hullLines.lpList)
        For Each lpIn In hullLines.lpList
            Dim lp = HullLine_EdgePoints.EdgePointOffset(lpIn, 1)
            dst2.Circle(New cv.Point(CInt(lp.ep1.X), CInt(lp.ep1.Y)), task.DotSize, task.highlight, -1, task.lineType)
            dst2.Circle(New cv.Point(CInt(lp.ep2.X), CInt(lp.ep2.Y)), task.DotSize, task.highlight, -1, task.lineType)
        Next

        For Each lpIn In lpLast
            Dim lp = HullLine_EdgePoints.EdgePointOffset(lpIn, 5)
            dst2.Circle(New cv.Point(CInt(lp.ep1.X), CInt(lp.ep1.Y)), task.DotSize, white, -1, task.lineType)
            dst2.Circle(New cv.Point(CInt(lp.ep2.X), CInt(lp.ep2.Y)), task.DotSize, white, -1, task.lineType)
        Next

        lpLast = New List(Of lpData)(hullLines.lpList)
        labels(2) = CStr(lpLast.count) + " edge points in the previous frame (white). " + CStr(hullLines.lpList.Count) +
                    " edge points found in the current frame (yellow)"
    End Sub
End Class
